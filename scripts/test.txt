---
title: "DesStat_biodiversity_wdpa"
author: "Antoine Vuillot"
date: "2023-06-14"
output: html_document
---

Descriptive statistics on biodiversity in the protected areas

In this document are computed and plotted descriptive statistics for the protected areas (PAs) using the mapme biodiversity package. This package provides an easy access to biodiversity-related data and allow to compute different indicators.

Importing packages and functions

{r setup, include=FALSE}
knitr::opts_knit$set(root.dir = rprojroot::find_rstudio_root_file())

{r message=FALSE, warning=FALSE}
source("02_scripts/functions_DesStat_biodiv.R")

{r message=FALSE, warning=FALSE}
library(mapme.biodiversity)
library(sf)
library(tidyverse)
library(mapview)
library(magrittr)
library(stargazer)
library(dplyr)
library(openxlsx)
library(writexl)
library(ggplot2)
library(questionr)
library(readxl)
library(sp)
library(raster)
library(terra)
library(janitor)



{r}
#A first look at mapme biodiversity indicators

resources <- names(available_resources())
indicators <- names(available_indicators())
cat(paste("Supported resources:\n-",
            paste(resources, collapse = "\n- "),
          "\n\nSupported indicators:\n-",
            paste(indicators, collapse = "\n- ")))

Importing datasets

{r message=FALSE, warning=FALSE}

#Load spatial data and transform into polygons (requirement of the mapme package)

#If the function get_resources used later returns an error "...Loop 0 is not valid: Edge 94 crosses edge 96>...", then the following function might solve it. It uses the S2 spherical geometry package.
sf_use_s2(FALSE)
pa_shp = read_sf("00_data_raw/WDPA_SHP/BDD_SHP_nodupl.shp") %>%
  st_make_valid() %>%
  sf::st_cast(to="POLYGON") %>%
  clean_names() 

pa_pfolio = pa_shp %>%
  init_portfolio(2000:2020,
                 outdir = "00_data_raw/mapme_bio_data",
                 tmpdir = "06_temp",
                 cores = 4,
                 add_resources = TRUE,
                 verbose = TRUE)

#Visualisation of the PAs
#mapview(pa_shp)

Computing statistics

Forests

First the data are extracted on the polygons corresponding to protected areas. Then indicators can be computed and a dataset is returned for further analysis.

{r}

#Download and extract data

pa_pfolio = get_resources(pa_pfolio,
    resources = c("gfw_lossyear","gfw_treecover","gfw_emissions"), 
    vers_treecover = "GFC-2020-v1.8",
    vers_lossyear = "GFC-2020-v1.8")

# get_resources(pa_pfolio,
#     resources = c("gfw_lossyear"))

# calculate indicators
# FAO forest definition here: Minimum treecover = 10%, minimum size =1 hectare
pa_pfolio_forest = 
  calc_indicators(x = pa_pfolio,
                  indicators = "treecoverloss_emissions",
                  min_cover = 10,
                  min_size = 1, overwrite=T) 

# test = rast("00_data_raw/mapme_bio_data/gfw_treecover/Hansen_GFC-2020-v1.8_treecover2000_20N_000E.tif")
# test2 = extract(test, pa_pfolio)
# test3 = test2 %>% group_by(ID) %>%
#   summarize(avg = mean(`Hansen_GFC-2020-v1.8_treecover2000_20N_000E`, na.rm = TRUE))

# unnest results data for further analysis
pa_treeloss = unnest(pa_pfolio_forest, cols="treecover_area") %>%
  sf::st_drop_geometry() %>%
  dplyr::select(ID_pr,Nm_AP,Drct_,WDPAID,Ann_c,years,treecover) %>%
  clean_names() %>%
  mutate(treecover = case_when(treecover == 0 ~ NA, TRUE ~ treecover)) %>%
  subset(!is.na(treecover))


Finally statistics of interest can be computed.

{r}

#Variation of the forest loss over time
data_stat_treeloss = pa_treeloss %>%
  group_by(nm_ap) %>% 
  #Comoute variation over time in each PA
  mutate(lag_treecov = lag(treecover),
         loss = ((treecover - lag_treecov)/lag_treecov)*100) %>%
  ungroup() %>%
  #Regroup years for analysis in five years intervals
  mutate(years_regroup = case_when(
  years <= 2005 ~ "2000-2005",
  years <= 2010 ~ "2005-2010",
  years <= 2015 ~ "2010-2015",
  years <=2020 ~ "2015-2020",
  TRUE ~ "NA")) %>%
  #Remove NA values for loss
  subset(!is.na(loss)) %>%
  #Compute mean loss for five years intervals in each PA
  group_by(nm_ap, years_regroup) %>%
  mutate(moy_5 = mean(loss)) %>%
  ungroup()


#Function to perform analysis for a given PA
##Buba
stat_forest_buba = stat_treeloss_id(df = data_stat_treeloss,
                                    id = "317051",
                                    name_pa = "Buba",
                                    treatment_yr = 2007)
fig_evo_buba = stat_forest_buba[[1]]
ggsave(plot = fig_evo_buba,
       name = "fig_forest_loss_evo_buba.png",
       path = "05_StatDes/biodiversity/forest/loss")
fig_evo5_buba = stat_forest_buba[[2]]
ggsave(plot = fig_evo_buba,
       name = "fig_forest_loss_evo_buba.png",
       path = "05_StatDes/biodiversity/forest/loss")

#Niumi
stat_forest_niumi = stat_treeloss_id(df = data_stat_treeloss,
                                    id = "317051",
                                    name_pa = "Buba",
                                    treatment_yr = 2007)
fig_evo_buba = stat_forest_buba[[1]]
ggsave(plot = fig_evo_buba,
       name = "fig_forest_loss_evo_buba.png",
       path = "05_StatDes/biodiversity/forest/loss")
fig_evo5_buba = stat_forest_buba[[2]]
ggsave(plot = fig_evo_buba,
       name = "fig_forest_loss_evo_buba.png",
       path = "05_StatDes/biodiversity/forest/loss")



