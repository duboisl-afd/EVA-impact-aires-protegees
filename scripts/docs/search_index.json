[["index.html", "Impact analysis of protected areas funded by the AFD : an open-guide for reproductibility About this website", " Impact analysis of protected areas funded by the AFD : an open-guide for reproductibility Antoine Vuillot Ingrid Dallmann Léa Poulin Pierre-Yves Durand 2023-09-29 About this website This site presents in an open and transparent way the analysis performed by IRS/EVA team on protected areas. More precisely, an impact analysis is performed using geospatial data to assess to what extent do PAs funded by the AFD preserve biodiversity. "],["building-the-datasets.html", "Section 1 Building the datasets 1.1 Initial settings 1.2 Datasets for analysis 1.3 Computing total areas covered by PAs in the sample", " Section 1 Building the datasets This script builds the different datasets for the analysis. The lists of protected areas (PAs) reported by the Agence Française de Développement (AFD) departments are combined, merged with AFD project database (“SIOP”) and the World Database on Protected Areas (WDPA). The latter is the most comprehensive database on marine and terrestrial protected areas, published by the International Union for the Conservation of Nature (IUCN). The following datasets are created : A confidential dataset to perform descriptive statistics on fundings A dataset to perform non-confidential statistics Datasets specific to impact analysis (for PA supported by the AFD or a specific funder, a all PA in a given country, etc.) Datasets with geospatial information, for specific uses (e.g maps) Datasets with total area at country, region or world level, taking into account potential intersection between PA reported by the WDPA (see WDPA documentation) These datasets are available upon requests, with potential restriction for datasets containing confidential data. Note that this script loads geospatial datasets that are memory demanding. Ensure that the R session has accessed to enough temporary memory (RAM) before running the script (typically 10 GB), or clean the RAM regularly. The datasets used are stored and saved into the SSPCloud platform that uses minIO storage. Thus specific functions from the aws.S3 package are used to write and read files (aws.S3::s3read_using() and aws.S3::s3write_using()). These can be replaced by other R functions to read/write locally (data.table::fread() typically). 1.1 Initial settings Configuring the Rmarkdown #{r setup, include = FALSE, eval = FALSE} #knitr::opts_knit$set(root.dir = rprojroot::find_rstudio_root_file()) # Downloading and importing the relevant packages install.packages(c(&quot;janitor&quot;, &quot;geodata&quot;, &quot;wdpar&quot;, &quot;countrycode&quot;)) library(tidyverse) library(dplyr) library(data.table) library(readxl) library(janitor) library(stringi) library(sf) library(terra) library(mapview) library(wdpar) library(aws.s3) library(countrycode) library(geodata) #Install webdriver to download WDPA data #webdriver::install_phantomjs() 1.2 Datasets for analysis 1.2.1 Merge PAs reporting by AFD technical departments A first step has been to collect information on the PAs funded by the AFD. A first bunch was collected by Léa Poulin, Ingrid Dallmann and Pierre-Yves Durand (from evaluation and learning service of the innovation, research and knowledge department). Others were reported to us by the agriculture, rural development and biodiversity department. These datasets are combined with only relevant variables for future merging with WDPA and SIOP databases. #PAs gathered by the evaluation department ##BDD_joint created by Léa Poulin. ##Create a dataset with a merged column for cofunders, instead of a variable for each. Only relevant variables are kept, and the date/author of the report are added. data_pa_eva = #read_excel(&quot;data_raw/BDD_joint.xlsx&quot;) %&gt;% s3read_using(readxl::read_excel, object = &quot;data_raw/BDD_joint.xlsx&quot;, bucket = &quot;projet-afd-eva-ap&quot;, opts = list(&quot;region&quot; = &quot;&quot;)) %&gt;% as.data.frame() %&gt;% unite(cofinanciers, starts_with(&quot;cofinancier&quot;), sep=&quot;,&quot;, remove = TRUE, na.rm = TRUE) %&gt;% select(c(id_projet, id_concours, cofinanciers, nom_ap, wdpaid, superficie)) %&gt;% rename(&quot;superficie_km2&quot; = &quot;superficie&quot;) %&gt;% mutate(superficie_km2 = as.numeric(superficie_km2), wdpaid = as.numeric(wdpaid), date_entree = &quot;2022-12-06&quot;, auteur_entree = &quot;Léa Poulin,Pierre-Yves Durand,Ingrid Dallmann&quot;) %&gt;% # Change encoding of characters mutate(across(.cols = !c(wdpaid, superficie_km2), .fns = ~stri_enc_toutf8(.x))) ##WDPAID 797 with ID project CZZ3056 corresponds to APAC de Kawawana in Senegal, with no WDPAID (https://kawawana.iccaconsortium.org/) data_pa_eva[data_pa_eva$wdpaid == &quot;797&quot; &amp; data_pa_eva$id_projet == &quot;CZZ3056&quot;,]$nom_ap = &quot;APAC de Kawawana&quot; #Change reported area (https://kawawana.iccaconsortium.org/?p=150) : 10 000 ha or 100 km2 data_pa_eva[data_pa_eva$wdpaid == &quot;797&quot; &amp; data_pa_eva$id_projet == &quot;CZZ3056&quot;,]$superficie_km2 = 100 data_pa_eva[data_pa_eva$wdpaid == &quot;797&quot; &amp; data_pa_eva$id_projet == &quot;CZZ3056&quot;,]$wdpaid = NA #PAs gathered by agriculture, rural development and biodiversity department (10-08-2023) data_pa_arb = #read_excel(&quot;data_raw/BDD_ARB_10082023.xlsx&quot;) %&gt;% s3read_using(readxl::read_excel, object = &quot;data_raw/BDD_ARB_10082023.xlsx&quot;, bucket = &quot;projet-afd-eva-ap&quot;, opts = list(&quot;region&quot; = &quot;&quot;)) %&gt;% as.data.frame() %&gt;% clean_names() %&gt;% select(c(id_projet, id_concours, nom_cofinanciers, nom_de_laire_protegee, id_wdpa, superficie_km2)) %&gt;% rename(&quot;cofinanciers&quot; = &quot;nom_cofinanciers&quot;, &quot;nom_ap&quot; = &quot;nom_de_laire_protegee&quot;, &quot;wdpaid&quot; = &quot;id_wdpa&quot;, &quot;superficie_raw&quot; = &quot;superficie_km2&quot;) %&gt;% #Create variables: ## Replace &quot;NA&quot; by NA values in wdpaid ## Check unit of area given reported by ARB ## Convert the area reported in km2, controlling for NA values, unreported values (&quot;Non requis (information délivrée par la WDPA)&quot;), values in hectares or km2. Note in some rows, unit must be removed and &quot;,&quot; replaced by &quot;.&quot; for the numeric conversion mutate(wdpaid = as.numeric(case_when(wdpaid == &quot;NA&quot; ~ NA, TRUE ~ wdpaid)), date_entree = &quot;2023-08-10&quot;, auteur_entree = &quot;ARB&quot;, superficie_unit = case_when(grepl(&quot;km2&quot;, superficie_raw) ~ &quot;km2&quot;, grepl(&quot;ha|Ha&quot;, superficie_raw) ~ &quot;ha&quot;, TRUE ~ &quot;km2&quot;), superficie_km2 = case_when(grepl(&quot;Non&quot;, superficie_raw) ~ NA, is.na(superficie_raw) ~ NA, superficie_unit == &quot;ha&quot; ~ as.numeric(gsub(&quot;,&quot;, &quot;.&quot;, gsub(&quot;ha|Ha&quot;, &quot;&quot;, superficie_raw)))/1e2, superficie_unit == &quot;km2&quot; ~ as.numeric(gsub(&quot;,&quot;, &quot;.&quot;, gsub(&quot;km2&quot;, &quot;&quot;, superficie_raw))), TRUE ~ as.numeric(superficie_raw))) %&gt;% # Change encoding of characters mutate(across(.cols = !c(wdpaid, superficie_km2), .fns = ~stri_enc_toutf8(.x))) %&gt;% select(c(&quot;id_projet&quot;, &quot;id_concours&quot;, &quot;cofinanciers&quot;, &quot;nom_ap&quot;, &quot;wdpaid&quot;, &quot;superficie_km2&quot;, &quot;date_entree&quot;, &quot;auteur_entree&quot;)) #Create a dataset gathering the previous datasets data_pa_afd = rbind(data_pa_eva, data_pa_arb) #Finally, writing the dataset in csv file. Careful to the delimiter : &quot;;&quot; used as &quot;,&quot; present in some variables values. # write_delim(data_pa_afd, &quot;data_raw/BDD_PA_AFD.csv&quot;, # delim = &quot;;&quot;, # na = &quot;NA&quot;) # s3write_using(x = data_pa_afd, # FUN = readr::write_delim, # delim = &quot;;&quot;, # object = &quot;data_raw/BDD_PA_AFD.csv&quot;, # bucket = &quot;projet-afd-eva-ap&quot;, # opts = list(&quot;region&quot; = &quot;&quot;)) 1.2.2 Merge the list of PAs to AFD project information and WDPA The list of PAs reported by AFD departments are then merged with AFD internal project information database (so-called “SIOP”) and the World Database on Protected areas. #Import the list of PAs data_pa_afd = #read_delim(&quot;data_raw/BDD_PA_AFD.csv&quot;, delim = &quot;;&quot;) s3read_using(readr::read_delim, delim = &quot;;&quot;, #Careful to the delimiter choice show_col_types = FALSE, object = &quot;data_raw/BDD_PA_AFD.csv&quot;, bucket = &quot;projet-afd-eva-ap&quot;, opts = list(&quot;region&quot; = &quot;&quot;)) list_wdpa_afd = unique(data_pa_afd$wdpaid) #Import SIOP extract ##A function to transform country names from upper case (SIOP database) to lower cases : FRANCE -&gt; France fn_ucfirst &lt;- function (str) { paste(toupper(substring(str, 1, 1)), tolower(substring(str, 2)), sep = &quot;&quot;) } data_siop_pa = #read_excel(&quot;data_raw/BO_AP_16082023.xlsx&quot;) %&gt;% s3read_using(readxl::read_excel, object = &quot;data_raw/BO_AP_16082023.xlsx&quot;, bucket = &quot;projet-afd-eva-ap&quot;, opts = list(&quot;region&quot; = &quot;&quot;)) %&gt;% clean_names() %&gt;% #Keep only project IDs corresponding to PAs reported filter(id_projet %in% data_pa_afd$id_projet) %&gt;% select(c(id_projet, id_concours, libelle_court_direction_regionale, pays_de_realisation, autres_pays_de_realisation, mt_fin_global_af_d_prevu_devise, montant_prevu_concours_euro_octroi, mt_global_projet_prevu_devise, cofinancier, mt_part_cofinancier_prevu_euro, libelle_produit, date_doctroi_projet, annee_doctroi_projet)) %&gt;% rename(&quot;cofinanciers_siop&quot; = &quot;cofinancier&quot;, &quot;pays&quot; = &quot;pays_de_realisation&quot;, &quot;pays2&quot; = &quot;autres_pays_de_realisation&quot;) %&gt;% #Change country (&quot;pays&quot;) name from upper case to lower case : e.g FRANCE -&gt; France mutate(pays = case_when(is.na(pays) == TRUE ~ NA, is.na(pays) == FALSE ~ fn_ucfirst(pays)), pays2 = case_when(is.na(pays2) == TRUE ~ NA, is.na(pays2) == FALSE ~ fn_ucfirst(pays2))) %&gt;% #Add ISO code from countrycode package, reading &quot;pays&quot; variable mutate(iso3_siop = countrycode(sourcevar = pays, origin = &quot;country.name.fr&quot;, destination = &quot;iso3c&quot;, custom_match = c(&quot;Multi-pays&quot; = &quot;ZZ&quot;, &quot;Multi-Pays&quot; = &quot;ZZ&quot;, &quot;Inde&quot; = &quot;IND&quot;)), .after = &quot;pays&quot;) #Import WDPA data ##Download the latest version of the WDPA and write to the storage, if necessary # data_wdpa = wdpa_fetch(x = &quot;global&quot;, wait = TRUE, download_dir = &quot;data_raw&quot;, # page_wait = 2, verbose = TRUE) # st_write(wdpa, # dsn = &quot;data_raw/wdpa/wdpa_shp_global_raw.gpkg&quot;, # delete_dsn = TRUE) ##Load the WDPA from the storage data_wdpa = #st_read(&quot;data_raw/wdpa/wdpa_shp_global_raw.gpkg&quot;) %&gt;% s3read_using(sf::st_read, object = &quot;data_raw/wdpa/wdpa_shp_global_raw.gpkg&quot;, bucket = &quot;projet-afd-eva-ap&quot;, opts = list(&quot;region&quot; = &quot;&quot;)) %&gt;% st_drop_geometry() %&gt;% clean_names() %&gt;% filter(wdpaid %in% list_wdpa_afd) %&gt;% rename(&quot;iso3_wdpa&quot; = &quot;iso3&quot;) #Merge the datasets ##A first raw dataset that will be edited to complete ISO3 code of countries. data_raw1 = data_pa_afd %&gt;% #Add information from WDPA to PAs funded and with WDPAID left_join(data_wdpa, by = &quot;wdpaid&quot;) %&gt;% #Add information from SIOP left_join(data_siop_pa, by = c(&quot;id_projet&quot;, &quot;id_concours&quot;)) %&gt;% #Keep only one ISO information : priority WDPA, then SIOP if NA value mutate(iso3 = iso3_wdpa, iso3 = case_when(is.na(iso3) == TRUE ~ iso3_siop, TRUE ~ iso3), .after = &quot;iso3_wdpa&quot;) #Manually add iso3 for some PAs where names are known but assigned &quot;ZZ&quot;. #The nom_ap is searched on google (&quot;nom_ap protected area&quot;) and iso3 completed if #information found data_raw2 = data_raw1 %&gt;% mutate(iso3 = case_when(grepl(&quot;Yambé-Diahoué&quot;, nom_ap) ~ &quot;NCL&quot;, nom_ap == &quot;Aitutaki (3 Ra&#39;ui)&quot; ~ &quot;COK&quot;, nom_ap == &quot;Dohimen (Hienghène)&quot; ~ &quot;NCL&quot;, nom_ap == &quot;Kerehira&quot; ~ &quot;SLB&quot;, nom_ap == &quot;Kiribati&quot; ~ &quot;KIR&quot;, nom_ap == &quot;Marou&quot; ~ &quot;VUT&quot;, nom_ap == &quot;Mistery Island (Aneityum)&quot; ~ &quot;VUT&quot;, nom_ap == &quot;Ngula Pele&quot; ~ &quot;VUT&quot;, nom_ap == &quot;Paonangisu&quot; ~ &quot;VUT&quot;, nom_ap == &quot;Parc provincial Yeega-Hienga (Hienghène)&quot; ~ &quot;NCL&quot;, grepl(&quot;Rarotonga&quot;, nom_ap) ~ &quot;COK&quot;, nom_ap == &quot;Saama&quot; ~ &quot;VUT&quot;, nom_ap == &quot;Siviri&quot; ~ &quot;VUT&quot;, nom_ap == &quot;Dohimen&quot; ~ &quot;NCL&quot;, nom_ap == &quot;Hienghène&quot; ~ &quot;NCL&quot;, nom_ap == &quot;Hyabe Lé Jao&quot; ~ &quot;NCL&quot;, grepl(&quot;Pouébo&quot;, nom_ap) ~ &quot;NCL&quot;, nom_ap == &quot;Tasi Vanua&quot; ~ &quot;VUT&quot;, nom_ap == &quot;Yeega&quot; ~ &quot;NCL&quot;, nom_ap == &quot;Mangareva&quot; ~ &quot;PYF&quot;, nom_ap == &quot;Rakiraiki&quot; ~ &quot;FJI&quot;, nom_ap == &quot;Tasi Vanua&quot; ~ &quot;VUT&quot;, nom_ap == &quot;Parc National Pongara&quot; ~ &quot;GAB&quot;, TRUE ~ iso3)) #Save this raw dataset # s3write_using(x = data_raw2, # FUN = readr::write_delim, # delim = &quot;;&quot;, # object = &quot;data_raw/BDD_PA_raw.csv&quot;, # bucket = &quot;projet-afd-eva-ap&quot;, # opts = list(&quot;region&quot; = &quot;&quot;)) 1.2.3 Correct errors Here errors in the reported information are corrected manually. Note the SIOP can be updated and the error not present anymore. The errors that do not need to be corrected anymore are kept in comment. #Loading the raw dataset data_raw = #fread(&quot;data_raw/BDD_PA_raw.csv&quot;) s3read_using(readr::read_delim, delim = &quot;;&quot;, show_col_types = FALSE, object = &quot;data_raw/BDD_PA_raw.csv&quot;, bucket = &quot;projet-afd-eva-ap&quot;, opts = list(&quot;region&quot; = &quot;&quot;)) data_raw_corr = data_raw #Modify errors in the dataset ##4223, 4224, 4226, 4228, 4229 : all in PS-N.Caledonie ## -&gt; not relevant with new SIOP extract # data_raw_corr[data_raw_corr$wdpaid %in% c(&quot;4223&quot;, &quot;4224&quot;, &quot;4226&quot;, &quot;4228&quot;, &quot;4229&quot;) &amp; data_raw_corr$pays == &quot;Fidji&quot;,]$pays = &quot;P-S N.Caléd&quot; ##305082 : Vanuatu instead of Fidji # -&gt; not relevant with new SIOP extract # data_raw_corr[data_raw_corr$wdpaid %in% c(&quot;305082&quot;) &amp; data_raw_corr$pays == &quot;Fidji&quot;,]$pays = &quot;Vanuatu&quot; ##31459 : Central African Republic instead of Cameroon. # -&gt; not relevant with new SIOP extract # data_raw_corr[data_raw_corr$wdpaid %in% c(&quot;31459&quot;) &amp; data_raw_corr$pays == &quot;Cameroun&quot;,]$pays = &quot;Centrafrique&quot; ##Rio Grande de Buba : Guinee Bissau instead of Gambia # -&gt; not relevant with new SIOP extract # data_raw_corr[data_raw_corr$wdpaid %in% c(&quot;317051&quot;) &amp; data_raw_corr$pays == &quot;Gambie&quot;,]$pays = &quot;Guinee-Bissau&quot; ##WDPAID 20267 : in GNQ instead of GIN # -&gt; not relevant with new SIOP extract # data_raw_corr[data_raw_corr$wdpaid %in% c(&quot;20267&quot;) ,]$pays = &quot;Guinee-Equatoriale&quot; # data_raw_corr[data_raw_corr$wdpaid %in% c(&quot;20267&quot;) ,]$iso3 = &quot;GNQ&quot; # s3write_using(x = data_raw_corr, # FUN = readr::write_delim, # delim = &quot;;&quot;, # object = &quot;data_raw/BDD_PA_raw_corr.csv&quot;, # bucket = &quot;projet-afd-eva-ap&quot;, # opts = list(&quot;region&quot; = &quot;&quot;)) 1.2.4 Tidy the datasets After manual correction, a tidy dataset is built. Relevant variables are selected, region/sub-region/country names are added from ISO3 codes and countrycode package, description of IUCN categories added. Some variables are renamed in English. #Import raw dataset corrected from report errors data_raw_corr = #fread(&quot;data_raw/BDD_PA_raw_corr.csv&quot;) s3read_using(readr::read_delim, delim = &quot;;&quot;, show_col_types = FALSE, object = &quot;data_raw/BDD_PA_raw_corr.csv&quot;, bucket = &quot;projet-afd-eva-ap&quot;, opts = list(&quot;region&quot; = &quot;&quot;)) #Build the tidy dataset data_tidy = data_raw_corr %&gt;% #Select relevant variables select(c(libelle_court_direction_regionale, pays, pays2, parent_iso3, iso3, id_projet, id_concours, nom_ap, wdpaid, wdpa_pid, date_doctroi_projet, annee_doctroi_projet, status, status_yr, iucn_cat, marine, superficie_km2, rep_m_area, rep_area, gov_type, own_type, cofinanciers, cofinanciers_siop, mt_fin_global_af_d_prevu_devise, montant_prevu_concours_euro_octroi, mt_global_projet_prevu_devise, mt_part_cofinancier_prevu_euro, libelle_produit, date_entree, auteur_entree)) %&gt;% #Create dummy variables for main investors #AFD is always funder, so no need of a dummy. mutate(kfw_bin = grepl(&quot;KFW|kfw|KfW&quot;, cofinanciers), ffem_bin = grepl(&quot;ffem|FFEM&quot;, cofinanciers), cof_bin = is.na(cofinanciers) == FALSE &amp; !(cofinanciers %in% c(&quot;AFD&quot;, &quot;afd&quot;)), .after = &quot;cofinanciers&quot;) %&gt;% #Create an area variable combining AFD and WDPA information. Priority given to WDPA, then AFD if unknown rename(&quot;area_afd_km2&quot; = &quot;superficie_km2&quot;) %&gt;% #If both are not NA and different, take rep_area #If both are equal, take rep_area #if one is NA, take the other #If both NA, set NA #If rep_area = 0 and area_afd_km2 != 0 then set area_afd_km2 mutate(area_km2 = case_when(is.na(area_afd_km2) == FALSE &amp; is.na(rep_area) == FALSE &amp; area_afd_km2 == rep_area ~ rep_area, is.na(area_afd_km2) == FALSE &amp; is.na(rep_area) == FALSE &amp; area_afd_km2 != rep_area ~ rep_area, is.na(area_afd_km2) == TRUE &amp; is.na(rep_area) == FALSE ~ rep_area, is.na(area_afd_km2) == FALSE &amp; is.na(rep_area) == TRUE ~ area_afd_km2, is.na(area_afd_km2) == TRUE &amp; is.na(rep_area) == TRUE ~ NA, rep_area == 0 &amp; is.na(area_afd_km2) == FALSE &amp; area_afd_km2 &gt;0 ~ area_afd_km2 ), .after = &quot;rep_area&quot;) %&gt;% #Some entries in &quot;pays&quot; are French department, DROM-COM, &quot;Ocean Indien&quot; or #&quot;Multi-Pays&quot;. #French related : the ISO3 code #Ocen Indien let NA value, Muti-pays set to ZZ as in the SIOP dataset #Nouvelle-Calédonie is divided in two provinces : north and south. This subdivision is irrelevant in our analysis so we keep only &quot;Nouvelle Caledonie&quot; mutate(iso3 = case_when( pays == &quot;Mayotte&quot; ~ &quot;MYT&quot;, pays == &quot;Nouvelle-Caledonie&quot; ~ &quot;NCL&quot;, pays == &quot;Polynesie Francaise&quot; ~ &quot;PYF&quot;, is.na(iso3) &amp; pays %in% c(&quot;Multi-Pays&quot;, &quot;Multi-pays&quot;, &quot;Ocean Indien&quot;) ~ &quot;ZZ&quot;, TRUE ~ iso3)) %&gt;% #Add region, sub-region and country names from the ISO3 country code mutate(region = countrycode(sourcevar = iso3, origin = &quot;iso3c&quot;, destination = &quot;un.region.name&quot;, custom_match = c(&quot;COG;CMR;CAF&quot; = &quot;Africa&quot;, &quot;ZZ&quot; = &quot;&quot;)), sub_region = countrycode(sourcevar = iso3, origin = &quot;iso3c&quot;, destination = &quot;un.regionsub.name&quot;, custom_match = c(&quot;COG;CMR;CAF&quot; = &quot;Sub-Saharan Africa&quot;, &quot;ZZ&quot; = &quot;&quot;)), country_en = countrycode(sourcevar = iso3, origin = &quot;iso3c&quot;, destination = &quot;un.name.en&quot;, custom_match = c(&quot;PYF&quot; = &quot;French Polynesia&quot;, &quot;NCL&quot; = &quot;New Caledonia&quot;, &quot;MYT&quot; = &quot;Mayotte&quot;, &quot;COK&quot; = &quot;Cook Islands&quot;, &quot;ZZ&quot; = &quot;Multi-countries&quot;, &quot;COG;CMR;CAF&quot; = &quot;Multi-countries&quot;)), country_fr = countrycode(sourcevar = iso3, origin = &quot;iso3c&quot;, destination = &quot;un.name.fr&quot;, custom_match = c(&quot;PYF&quot; = &quot;Polynésie Française&quot;, &quot;NCL&quot; = &quot;Nouvelle-Calédonie&quot;, &quot;MYT&quot; = &quot;Mayotte&quot;, &quot;COK&quot; = &quot;Iles Cook&quot;, &quot;ZZ&quot; = &quot;Multi-pays&quot;, &quot;COG;CMR;CAF&quot; = &quot;Multi-pays&quot;)), .after = &quot;iso3&quot;) %&gt;% #Change transboundary iso3 to ZZ (multi-countries) mutate(iso3 = case_when(iso3 == &quot;COG;CMR;CAF&quot; ~&quot;ZZ&quot;, TRUE ~iso3)) %&gt;% #Some PAs have iso &quot;ZZ&quot; (multi-countries) by funded by Dr Ocean Pacifique. The region is assigned to Oceania mutate(region = case_when(region == &quot;&quot; &amp; libelle_court_direction_regionale == &quot;DR OCEAN PACIFIQUE&quot; ~ &quot;Oceania&quot;, region == &quot;&quot; &amp; grepl(&quot;sahel|guinee|africa&quot;, libelle_court_direction_regionale, ignore.case = TRUE) ~ &quot;Africa&quot;, region == &quot;&quot; &amp; grepl(&quot;chine|asie&quot;, libelle_court_direction_regionale, ignore.case = TRUE) ~ &quot;Asia&quot;, region == &quot;&quot; &amp; grepl(&quot;amerique&quot;, libelle_court_direction_regionale, ignore.case = TRUE) ~ &quot;America&quot;, region == &quot;&quot; ~ NA, TRUE ~ region)) %&gt;% #Add the description of IUCN from its category &#39;in French and English) mutate(iucn_des_fr = case_when( !is.na(wdpaid) &amp; iucn_cat == &quot;Ia&quot; ~ &quot;Réserve naturelle intégrale&quot;, !is.na(wdpaid) &amp; iucn_cat == &quot;Ib&quot; ~ &quot;Zone de nature sauvage&quot;, !is.na(wdpaid) &amp; iucn_cat == &quot;II&quot; ~ &quot;Parc national&quot;, !is.na(wdpaid) &amp; iucn_cat == &quot;III&quot; ~ &quot;Monument naturel&quot;, !is.na(wdpaid) &amp; iucn_cat == &quot;IV&quot; ~ &quot;Gest. des habitats/espèces&quot;, !is.na(wdpaid) &amp; iucn_cat == &quot;V&quot; ~ &quot;Paysage protégé&quot;, !is.na(wdpaid) &amp; iucn_cat == &quot;VI&quot; ~ &quot;Gest. de ress. protégées&quot;, !is.na(wdpaid) &amp; iucn_cat == &quot;Not Applicable&quot; ~ &quot;Non catégorisée&quot;, !is.na(wdpaid) &amp; iucn_cat == &quot;Not Reported&quot; ~ &quot;Non catégorisée&quot;, !is.na(wdpaid) &amp; iucn_cat == &quot;Not Assigned&quot; ~ &quot;Non catégorisée&quot;, TRUE ~ &quot;Non référencée&quot;), .after = iucn_cat) %&gt;% mutate(iucn_des_en = case_when( !is.na(wdpaid) &amp; iucn_cat == &quot;Ia&quot; ~ &quot;Strict nature reserve&quot;, !is.na(wdpaid) &amp; iucn_cat == &quot;Ib&quot; ~ &quot;Wilderness area&quot;, !is.na(wdpaid) &amp; iucn_cat == &quot;II&quot; ~ &quot;National park&quot;, !is.na(wdpaid) &amp; iucn_cat == &quot;III&quot; ~ &quot;Natural monument or feature&quot;, !is.na(wdpaid) &amp; iucn_cat == &quot;IV&quot; ~ &quot; Habitat or species management area&quot;, !is.na(wdpaid) &amp; iucn_cat == &quot;V&quot; ~ &quot;Protected landscape or seascape&quot;, !is.na(wdpaid) &amp; iucn_cat == &quot;VI&quot; ~ &quot;Protected area with sust. use of nat. res.&quot;, !is.na(wdpaid) &amp; iucn_cat == &quot;Not Applicable&quot; ~ &quot;Not categorized&quot;, !is.na(wdpaid) &amp; iucn_cat == &quot;Not Reported&quot; ~ &quot;Not categorized&quot;, !is.na(wdpaid) &amp; iucn_cat == &quot;Not Assigned&quot; ~ &quot;Not categorized&quot;, TRUE ~ &quot;Not referenced&quot;), .after = iucn_cat) %&gt;% #Modify class of some variables mutate(across(.cols = -c(&quot;wdpaid&quot;, &quot;area_afd_km2&quot;, &quot;area_km2&quot;, &quot;rep_area&quot;, &quot;rep_m_area&quot;, &quot;annee_doctroi_projet&quot;, &quot;mt_fin_global_af_d_prevu_devise&quot;, &quot;montant_prevu_concours_euro_octroi&quot; , &quot;mt_global_projet_prevu_devise&quot;, &quot;mt_part_cofinancier_prevu_euro&quot;), .fns = ~stri_enc_toutf8(.x))) %&gt;% #Translate names in English rename(&quot;region_afd&quot; = &quot;libelle_court_direction_regionale&quot;, &quot;name_pa&quot; = &quot;nom_ap&quot;, &quot;date_funding&quot; = &quot;date_doctroi_projet&quot;, &quot;year_funding&quot; = &quot;annee_doctroi_projet&quot;) 1.2.5 Dataset with only AFD project variables Build a dataset from the tidy dataset that keeps only SIOP variables. Potentially useful for analysis on SIOP information. #Select info corresponding to SIOP extract and AP list_var_siop = c(&quot;id_projet&quot;, &quot;id_concours&quot;, &quot;region_afd&quot;, &quot;pays&quot;, &quot;pays2&quot;, &quot;date_funding&quot;, &quot;year_funding&quot;, &quot;cofinanciers_siop&quot;, &quot;mt_fin_global_af_d_prevu_devise&quot; , &quot;montant_prevu_concours_euro_octroi&quot;, &quot;mt_global_projet_prevu_devise&quot;, &quot;mt_part_cofinancier_prevu_euro&quot;, &quot;libelle_produit&quot;, &quot;date_entree&quot;, &quot;auteur_entree&quot; ) #Definining dataset for future work with dataset other than WDPA data_siop_tidy = data_tidy %&gt;% dplyr::select(all_of(list_var_siop)) #write_csv(data_siop_tidy, &quot;data_tidy/BDD_siop_tidy.xlsx&quot;) # s3write_using(x = data_siop_tidy, # FUN = readr::write_delim, # delim = &quot;;&quot;, # object = &quot;data_tidy/BDD_PA_tidy_siop.csv&quot;, # bucket = &quot;projet-afd-eva-ap&quot;, # opts = list(&quot;region&quot; = &quot;&quot;)) 1.2.6 Dataset for non-confidential analysis Build a dataset with one row per PA. In the list of PAs reported by AFD department, some PAs are also reported in the WDPA and are identified by a unique WDPA ID, some have no WDPAID but have a unique name, and other have neither name nor WDPAID. For the latter case, a PA is supposed to be identified by project ID and country. Thus we need to remove duplicates for each case. Also, all the funding years of each PA is kept. Note that a few PAs have an entry with WDPA ID, and an other with no WDPAID though they have the same name (e.g Parc National de Pongara). The duplicate without WDPA ID is removed. For the impact analysis, we also need to take into account transboundary PAs (i.e PAs on more than one country). Indeed the analysis is performed country by country. Thus we need to divide the PAs across the countries it is located in, and re-compute the area of the PA in each country. 1.2.6.1 For descriptive statistics #Listing relevant variables for analysis that are NOT confidential (i.e not concern funding) list_var_fund = c(&quot;cofinanciers&quot;, &quot;cofinanciers_siop&quot;, &quot;mt_fin_global_af_d_prevu_devise&quot;, &quot;montant_prevu_concours_euro_octroi&quot;, &quot;mt_global_projet_prevu_devise&quot;, &quot;mt_part_cofinancier_prevu_euro&quot;, &quot;libelle_produit&quot;, &quot;kfw_bin&quot;, &quot;ffem_bin&quot;, &quot;cof_bin&quot;) #Defining dataset for descriptive statistics data_nofund = data_tidy %&gt;% select(!all_of(list_var_fund)) #fwrite(data_nofund, &quot;data_tidy/BDD_PA_AFD_nofund.csv&quot;) # s3write_using(x = data_nofund, # FUN = readr::write_delim, # delim = &quot;;&quot;, # object = &quot;data_tidy/BDD_PA_AFD_nofund.csv&quot;, # bucket = &quot;projet-afd-eva-ap&quot;, # opts = list(&quot;region&quot; = &quot;&quot;)) #Then to keep only one row per PA, we need to consider separately PAs having WDPA ID and PAs which do not. ## Observations with WDPAID ###We keep information on fundings : one row for each wdpa_pid, funding year is kept ###Note that WDPA_PID is a unique identifier for zones inside the corresponding WDPAID. The choice of the WDPA_PID to keep is performed below (e.g choosing the area instead of the buffer zone) data_nofund_wdpa = data_nofund %&gt;% subset(is.na(wdpaid) == FALSE) %&gt;% group_by(wdpa_pid, year_funding) %&gt;% slice(1) %&gt;% ungroup() %&gt;% group_by(wdpa_pid) %&gt;% #Then we create a variable with all the funding year for each WDPA ... mutate(year_funding_all = paste0(year_funding, collapse = &quot;,&quot;), .after = &quot;year_funding&quot;) %&gt;% #... and keep only the earlier funding year for year_funding arrange(year_funding) %&gt;% slice(1) %&gt;% #Rename year_funding variable to precise it is the year of first funding by the AFD rename(&quot;year_funding_first&quot; = &quot;year_funding&quot;) %&gt;% ungroup() %&gt;% #Finally, we need to manually remove lines with more than one WDPA_PID ## Remove the marine area of WDPAID 9035 with null area filter(!(wdpa_pid == &quot;9035_A&quot;)) %&gt;% ## 555547861 has 3 marine PAs. The C one is chosen as the size reported by AFD (superficie_km2) matches the area reported by WDPA (https://www.protectedplanet.net/555547861) filter(!(wdpa_pid %in% c(&quot;555547861_A&quot;, &quot;555547861_B&quot;))) %&gt;% # 555705345 : buffer area is also reported. Remove the buffer filter(!(wdpa_pid == &quot;555705345_B&quot;)) %&gt;% #555547863 : keep the WDPA_PID whose area matches the one reported by AFD employees and WDPA website (https://www.protectedplanet.net/555547863) filter(!(wdpa_pid == &quot;555547863_A&quot;)) # info_filtering = filter(data_raw_corr, wdpaid %in% c(9035, 555547861, 555547863, 555705345 )) %&gt;% # group_by(wdpa_pid) %&gt;% # slice(1) #Observations without WDPAID but with name of the PA data_nofund_name = data_nofund %&gt;% subset(is.na(wdpaid) == TRUE &amp; is.na(name_pa) == FALSE) %&gt;% #Remove completely similar rows (due to merging with SIOP and WDPA) unique() %&gt;% #Some PAs might have been funded at different times. Create a variable with all the funding year for each PA name group_by(name_pa) %&gt;% mutate(year_funding_all = paste0(unique(year_funding), collapse = &quot;,&quot;), .after = &quot;year_funding&quot;) %&gt;% mutate(year_funding_all = case_when(year_funding_all == &quot;NA&quot; ~NA, TRUE ~ year_funding_all)) %&gt;% #keep observation with largest area reported arrange(-area_km2) %&gt;% slice(1) %&gt;% #Change year_funding to min of year_fund_all mutate(year_funding = min(as.numeric(unlist(strsplit(year_funding_all, split = &quot;,&quot;))), na.rm = TRUE), year_funding = case_when(year_funding == Inf ~ NA, TRUE ~ year_funding)) %&gt;% #Rename year_funding variable to precise it is the year of first funding by the AFD rename(&quot;year_funding_first&quot; = &quot;year_funding&quot;) %&gt;% ungroup() %&gt;% #Some PAs have multiple entries, with DR Siege de Paris and DR Ocean Pacifique. Their region is assigned to Oceania mutate(region = case_when(name_pa %in% c(&quot;Ailite&quot;, &quot;Aitutaki (3 Ra&#39;ui)&quot;, &quot;Kerehira&quot;, &quot;Kibelofolu&quot;, &quot;Kiribati&quot;, &quot;Ma&#39;au&quot;, &quot;Mereka&quot;, &quot;Mistery Island (Aneityum)&quot;, &quot;Ngula Pele&quot;, &quot;Niu Houa&quot;, &quot;Niumarere&quot;, &quot;Paonangisu&quot;, &quot;Parc provincial Yeega-Hienga (Hienghène)&quot;, &quot;Rarotonga : Avana-Muri lagoon ra&#39;ui&quot;, &quot;Rarotonga : Mitiaro ra&#39;ui&quot;, &quot;Saama&quot;, &quot;Siviri&quot;, &quot;Takara&quot;, &quot;Takola&quot;, &quot;Tavuilo&quot;, &quot;Waimamaru&quot;) &amp; id_projet == &quot;CZZ1282&quot; ~ &quot;Oceania&quot;, TRUE ~ region)) #Careful : the following filtering are outdated # filter(!(grepl(&quot;Aire de gestion durable des ressources Yambé&quot;, name_pa) &amp; id_projet == &quot;CZZ1282&quot;)) %&gt;% # ##Remove duplicate with zero area while the other is non-zerp # filter(!(id_projet == &quot;CZZ1667&quot; &amp; name_pa == &quot;Dohimen&quot;)) %&gt;% # filter(!(name_pa == &quot;Hienghène&quot; &amp; id_projet == &quot;CZZ1667&quot;)) %&gt;% # filter(!(name_pa == &quot;Hyabe Lé Jao&quot; &amp; id_projet == &quot;CZZ1667&quot;)) %&gt;% # filter(!(name_pa == &quot;Naroko&quot; &amp; id_projet == &quot;CZZ1667&quot;)) %&gt;% # filter(!(name_pa == &quot;Tasi Vanua&quot; &amp; id_projet == &quot;CZZ166701&quot;)) %&gt;% # filter(!(name_pa == &quot;Yeega&quot; &amp; id_projet == &quot;CZZ1667&quot;)) %&gt;% # ##Remove duplicate of Pouébo with area 0 # filter(!(name_pa == &quot;Pweevo (Pouébo)&quot;)) #Finally, observations with no WDPAID and no name_pa data_nofund_na = data_nofund %&gt;% subset(is.na(wdpaid) == TRUE &amp; is.na(name_pa) == TRUE) %&gt;% #Remove identical observations unique() %&gt;% #Some PAs might have been funded at different times. Create a variable with all the funding year for each PA name group_by(id_projet, iso3) %&gt;% mutate(year_funding_all = paste0(unique(year_funding), collapse = &quot;,&quot;), .after = &quot;year_funding&quot;) %&gt;% mutate(year_funding_all = case_when(year_funding_all == &quot;NA&quot; ~NA, TRUE ~ year_funding_all)) %&gt;% #keep observation with largest area reported arrange(-area_km2) %&gt;% slice(1) %&gt;% #Change year_funding to min of year_fund_all mutate(year_funding = min(as.numeric(unlist(strsplit(year_funding_all, split = &quot;,&quot;))), na.rm = TRUE), year_funding = case_when(year_funding == Inf ~ NA, TRUE ~ year_funding)) %&gt;% #Rename year_funding variable to precise it is the year of first funding by the AFD rename(&quot;year_funding_first&quot; = &quot;year_funding&quot;) %&gt;% ungroup() #Finally bind the datasets data_nofund_nodupl = rbind(data_nofund_wdpa, data_nofund_name, data_nofund_na) #fwrite(data_nofund_nodupl, &quot;data_tidy/BDD_nofund_nodupl.csv&quot;) # s3write_using(x = data_nofund_nodupl, # FUN = readr::write_delim, # delim = &quot;;&quot;, # object = &quot;data_tidy/BDD_PA_AFD_nofund_nodupl.csv&quot;, # bucket = &quot;projet-afd-eva-ap&quot;, # opts = list(&quot;region&quot; = &quot;&quot;)) 1.2.6.2 For impact analysis Different datasets are built, depending on the portfolio to analyse (e.g PAs supported by AFD or a specific funder). 1.2.6.2.1 AFD portfolio One PA in the AFD portfolio is located in Congo Republic, Cameroon and Republican Central Africa (WDPA ID 555547988). As by desing the impact analysis is performed country by country, this PA must be artificially divided in three and each part assigned to the country it is located in. #Import the non-confidential dataset with no duplicates data_pa_nofund_nodupl = #fread(&quot;data_raw/BDD_PA_AFD_nofund_nodupl.csv&quot;) s3read_using(readr::read_delim, delim = &quot;;&quot;, show_col_types = FALSE, object = &quot;data_tidy/BDD_PA_AFD_nofund_nodupl.csv&quot;, bucket = &quot;projet-afd-eva-ap&quot;, opts = list(&quot;region&quot; = &quot;&quot;)) #Import WDPA data data_wdpa = #st_read(&quot;data_raw/wdpa/wdpa_shp_global_raw.gpkg&quot;) %&gt;% s3read_using(sf::st_read, object = &quot;data_raw/wdpa/wdpa_shp_global_raw.gpkg&quot;, bucket = &quot;projet-afd-eva-ap&quot;, opts = list(&quot;region&quot; = &quot;&quot;)) %&gt;% clean_names() %&gt;% select(c(wdpaid, geom)) %&gt;% filter(wdpaid %in% data_pa_nofund_nodupl$wdpaid) #The PA WDPAID 555547988 is located in COG, CMR and CAF ##Create a frame with one line by country df_555547988 = data_pa_nofund_nodupl %&gt;% filter(wdpaid == 555547988) %&gt;% left_join(data_wdpa, by = &quot;wdpaid&quot;) %&gt;% #Create one line by country separate_longer_delim(cols = c(&quot;parent_iso3&quot;), delim = &quot;;&quot;) %&gt;% mutate(iso3 = parent_iso3, country_en = countrycode(sourcevar = iso3, origin = &quot;iso3c&quot;, destination = &quot;un.name.en&quot;), country_fr = countrycode(sourcevar = iso3, origin = &quot;iso3c&quot;, destination = &quot;un.name.fr&quot;), name_pa = paste(name_pa, iso3, sep = &quot;-&quot;)) ##Get countries boundaries from geodata package ctry_bnd = gadm(country = unique(df_555547988$iso3), path = tempfile(), version = &quot;latest&quot;, level = 0) %&gt;% st_as_sf() %&gt;% rename(&quot;geom_ctry&quot; = &quot;geometry&quot;, &quot;iso3&quot; = &quot;GID_0&quot;) ##Take the intersection of each country with the transboundary polygon, then compute its area in km2 df_int = st_intersection(ctry_bnd, df_555547988$geom) %&gt;% st_as_sf() %&gt;% #Compute the area in km2 mutate(area_int_km2 = as.numeric(st_area(geom_ctry))/1e6) %&gt;% group_by(area_int_km2) %&gt;% slice(1) %&gt;% select(c(&quot;iso3&quot;, &quot;area_int_km2&quot;)) %&gt;% st_drop_geometry() ##Define the cropped dataset df_cropd = df_555547988 %&gt;% left_join(df_int, by = &quot;iso3&quot;) %&gt;% mutate(area_km2 = area_int_km2) %&gt;% select(c(names(data_pa_nofund_nodupl))) %&gt;% st_drop_geometry() ##Replace the original transboundary line by multiple lines data_pa_ie = data_pa_nofund_nodupl %&gt;% #Select all lines excepted the one to replace filter(is.na(wdpaid) | wdpaid != 555547988) %&gt;% #Add the multiple lines rbind(df_cropd) #Finally this dataset is saved # s3write_using(x = data_pa_ie, # FUN = readr::write_delim, # delim = &quot;;&quot;, # object = &quot;data_tidy/BDD_PA_AFD_ie.csv&quot;, # bucket = &quot;projet-afd-eva-ap&quot;, # opts = list(&quot;region&quot; = &quot;&quot;)) 1.2.6.2.2 FAPBM portfolio The Fund for Protected Areas and Biodiversity in Madagascar (FAPBM in French) is the main funder of PAs in Madagascar. A dataset specific to the PAs it supports is built, knowing the name of these PAs (FAPBM website). #The name of PAs funded by the FAPBM, as stated on their website (https://www.fapbm.org/aires-protegees-soutenues/, consulted the 2023-09-18). # I have removed any &quot;-&quot; and replace it by &quot;&quot;. pa_fapbm_names = data.frame(name_pa = c(&quot;Ambohitantely&quot;, &quot;Ibity&quot;, &quot;Corridor Marojejy-Anjanaharibe Sud-Tsaratanana&quot;,&quot;Nosy Hara&quot;,&quot;Galoko Kalobinono&quot;,&quot;Analamerana&quot; ,&quot;Anjanaharibe Sud&quot;,&quot;Lokobe&quot;,&quot;Manongarivo&quot;, &quot;Ambodivahibe&quot; , &quot;Andrafiamena Andavakoera&quot;, &quot;Ankivonjy&quot;, &quot;Ankarana&quot;, &quot;Montagne d’Ambre&quot;,&quot;Montagne des Français&quot;, &quot;Loky Manambato&quot; , &quot;Tsaratanana&quot;, &quot;Oronjia&quot;, &quot;Masoala&quot;, &quot;Marojejy&quot;, &quot;Makira&quot; , &quot;Ivohibe&quot;, &quot;Befotaka Midongy&quot;, &quot;Andringitra&quot;, &quot;Massif d’Itremo&quot; , &quot;Agnalazaha&quot;, &quot;Ranomafana&quot;, &quot;Manombo&quot;, &quot;Zombitse Voabasia&quot; , &quot;Nosy Ve Androka&quot;, &quot;Kalambatritra&quot;, &quot;Cap Sainte Marie&quot;, &quot;Beza Mahafaly&quot;, &quot;Andranomena&quot;, &quot;Menabe Antimena&quot;, &quot;Mikea&quot; , &quot;Isalo&quot;, &quot;Tsimanampetsotse&quot;, &quot;Complexe Mangoky Ihotry&quot; , &quot;Kirindy Mitea&quot;, &quot;Andohahela&quot;, &quot;Bombetoka&quot;, &quot;Namoroka&quot; , &quot;Sahamalaza Îles Radama&quot;, &quot;Complexe Tsimembo Manambolomaty&quot; , &quot;Mandrozo&quot;, &quot;Complexe Mahavavy Kinkony&quot;, &quot;Bemaraha&quot; , &quot;Beanka&quot;, &quot;Baie de Baly&quot;, &quot;Site bioculturel d’Antrema&quot; , &quot;Ankarafantsika&quot;, &quot;Corridor Ankeniheny Zahamena&quot;, &quot;Mangerivola&quot; , &quot;Betampona&quot;, &quot;Andasibe Mantadia&quot;, &quot;Analamazaotra&quot;, &quot;Nosy Mangabe&quot; , &quot;Mananara Nord&quot;, &quot;Zahamena&quot;, &quot;Marotandrano&quot;, &quot;Maromizaha&quot; , &quot;Analalava&quot;, &quot;Ambatovaky&quot;)) %&gt;% #Change name for some PAs that are in WDPA but with slightly different name #after cross-checking with polygon of WDPA on https://www.protectedplanet.net/ #and https://www.fapbm.org/aires-protegees-soutenues/ #Not found : ## Corridor Marojejy-Anjanaharibe Sud-Tsaratanana mutate(name_pa = case_when(name_pa == &quot;Andasibe Mantadia&quot; ~ &quot;Mantadia&quot;, name_pa == &quot;Bombetoka&quot; ~ &quot;Bombetoka Belemboka&quot;, name_pa == &quot;Complexe Mahavavy Kinkony&quot; ~ &quot;Complexe Zones Humides Mahavavy Kinkony&quot;, name_pa == &quot;Complexe Mangoky Ihotry&quot; ~ &quot;Complexe Zones Humides Mangoky Ihotry&quot;, name_pa == &quot;Kalambatritra&quot; ~ &quot;Kalambatrika&quot;, name_pa == &quot;Ibity&quot; ~ &quot;Massif d&#39;Ibity&quot;, name_pa == &quot;Kirindy Mitea&quot; ~ &quot;Kirindy Mite&quot;, name_pa == &quot;Mandrozo&quot; ~&quot;Zone Humide de Mandrozo&quot;, name_pa == &quot;Montagne des Français&quot; ~&quot;Ambohitr&#39;Antsingy Montagne des Français&quot;, name_pa == &quot;Tsimanampetsotse&quot; ~ &quot;Tsimanampesotse&quot;, name_pa == &quot;Zombitse Voabasia&quot; ~ &quot;Zombitse Vohibasia&quot;, TRUE ~ name_pa)) %&gt;% mutate(name_pa_clean = janitor::make_clean_names(name_pa)) #Filter the WDPA with PA funded by FAPBM data_pa_fapbm = data_wdpa %&gt;% janitor::clean_names() %&gt;% filter(iso3 == &quot;MDG&quot;) %&gt;% mutate(name_clean = make_clean_names(name), .after = &quot;name&quot;) %&gt;% filter(name_clean %in% pa_fapbm_names$name_pa_clean) %&gt;% mutate(area_km2 = rep_area, .after = &quot;rep_area&quot;) %&gt;% mutate(region_afd = &quot;DR OCEAN INDIEN&quot;, name_pa = name, region = countrycode::countrycode(sourcevar = iso3, origin = &quot;iso3c&quot;, destination = &quot;un.region.name&quot;), sub_region = countrycode::countrycode(sourcevar = iso3, origin = &quot;iso3c&quot;, destination = &quot;un.regionsub.name&quot;), country_en = countrycode::countrycode(sourcevar = iso3, origin = &quot;iso3c&quot;, destination = &quot;un.name.en&quot;), country_fr = countrycode::countrycode(sourcevar = iso3, origin = &quot;iso3c&quot;, destination = &quot;un.name.fr&quot;), .after = &quot;iso3&quot;) %&gt;% #Add the description of IUCN from its category (French and English) mutate(iucn_des_fr = case_when( !is.na(wdpaid) &amp; iucn_cat == &quot;Ia&quot; ~ &quot;Réserve naturelle intégrale&quot;, !is.na(wdpaid) &amp; iucn_cat == &quot;Ib&quot; ~ &quot;Zone de nature sauvage&quot;, !is.na(wdpaid) &amp; iucn_cat == &quot;II&quot; ~ &quot;Parc national&quot;, !is.na(wdpaid) &amp; iucn_cat == &quot;III&quot; ~ &quot;Monument naturel&quot;, !is.na(wdpaid) &amp; iucn_cat == &quot;IV&quot; ~ &quot;Gest. des habitats/espèces&quot;, !is.na(wdpaid) &amp; iucn_cat == &quot;V&quot; ~ &quot;Paysage protégé&quot;, !is.na(wdpaid) &amp; iucn_cat == &quot;VI&quot; ~ &quot;Gest. de ress. protégées&quot;, !is.na(wdpaid) &amp; iucn_cat == &quot;Not Applicable&quot; ~ &quot;Non catégorisée&quot;, !is.na(wdpaid) &amp; iucn_cat == &quot;Not Reported&quot; ~ &quot;Non catégorisée&quot;, !is.na(wdpaid) &amp; iucn_cat == &quot;Not Assigned&quot; ~ &quot;Non catégorisée&quot;, TRUE ~ &quot;Non référencée&quot;), .after = iucn_cat) %&gt;% mutate(iucn_des_en = case_when( !is.na(wdpaid) &amp; iucn_cat == &quot;Ia&quot; ~ &quot;Strict nature reserve&quot;, !is.na(wdpaid) &amp; iucn_cat == &quot;Ib&quot; ~ &quot;Wilderness area&quot;, !is.na(wdpaid) &amp; iucn_cat == &quot;II&quot; ~ &quot;National park&quot;, !is.na(wdpaid) &amp; iucn_cat == &quot;III&quot; ~ &quot;Natural monument or feature&quot;, !is.na(wdpaid) &amp; iucn_cat == &quot;IV&quot; ~ &quot; Habitat or species management area&quot;, !is.na(wdpaid) &amp; iucn_cat == &quot;V&quot; ~ &quot;Protected landscape or seascape&quot;, !is.na(wdpaid) &amp; iucn_cat == &quot;VI&quot; ~ &quot;Protected area with sust. use of nat. res.&quot;, !is.na(wdpaid) &amp; iucn_cat == &quot;Not Applicable&quot; ~ &quot;Not categorized&quot;, !is.na(wdpaid) &amp; iucn_cat == &quot;Not Reported&quot; ~ &quot;Not categorized&quot;, !is.na(wdpaid) &amp; iucn_cat == &quot;Not Assigned&quot; ~ &quot;Not categorized&quot;, TRUE ~ &quot;Not referenced&quot;), .after = iucn_cat) %&gt;% mutate(year_funding_first = NA, year_funding_all = NA) #The PA funded by FAPBM but not in the WDPA pa_fapbm_not_found = pa_fapbm_names %&gt;% filter(!(name_pa_clean %in% data_pa_fapbm$name_clean)) #Save the dataset # s3write_using(x = data_pa_fapbm, # FUN = readr::write_delim, # delim = &quot;;&quot;, # object = &quot;data_tidy/BDD_PA_FAPBM.csv&quot;, # bucket = &quot;projet-afd-eva-ap&quot;, # opts = list(&quot;region&quot; = &quot;&quot;)) 1.2.6.2.3 For Madagascar A dataset is built from the WDPA. The only modification consists in adding region and country names, plus IUCN category description. data_wdpa = #st_read(&quot;data_raw/wdpa/wdpa_shp_global_raw.gpkg&quot;) %&gt;% s3read_using(sf::st_read, object = &quot;data_raw/wdpa/wdpa_shp_global_raw.gpkg&quot;, bucket = &quot;projet-afd-eva-ap&quot;, opts = list(&quot;region&quot; = &quot;&quot;)) %&gt;% clean_names() data_pa_mdg = data_wdpa %&gt;% filter(iso3 == &quot;MDG&quot;) %&gt;% mutate(name_clean = make_clean_names(name), .after = &quot;name&quot;) %&gt;% mutate(area_km2 = rep_area, .after = &quot;rep_area&quot;) %&gt;% mutate(region_afd = &quot;DR OCEAN INDIEN&quot;, name_pa = name, region = countrycode::countrycode(sourcevar = iso3, origin = &quot;iso3c&quot;, destination = &quot;un.region.name&quot;), sub_region = countrycode::countrycode(sourcevar = iso3, origin = &quot;iso3c&quot;, destination = &quot;un.regionsub.name&quot;), country_en = countrycode::countrycode(sourcevar = iso3, origin = &quot;iso3c&quot;, destination = &quot;un.name.en&quot;), country_fr = countrycode::countrycode(sourcevar = iso3, origin = &quot;iso3c&quot;, destination = &quot;un.name.fr&quot;), .after = &quot;iso3&quot;) %&gt;% #Add the description of IUCN from its category mutate(iucn_des_fr = case_when( !is.na(wdpaid) &amp; iucn_cat == &quot;Ia&quot; ~ &quot;Réserve naturelle intégrale&quot;, !is.na(wdpaid) &amp; iucn_cat == &quot;Ib&quot; ~ &quot;Zone de nature sauvage&quot;, !is.na(wdpaid) &amp; iucn_cat == &quot;II&quot; ~ &quot;Parc national&quot;, !is.na(wdpaid) &amp; iucn_cat == &quot;III&quot; ~ &quot;Monument naturel&quot;, !is.na(wdpaid) &amp; iucn_cat == &quot;IV&quot; ~ &quot;Gest. des habitats/espèces&quot;, !is.na(wdpaid) &amp; iucn_cat == &quot;V&quot; ~ &quot;Paysage protégé&quot;, !is.na(wdpaid) &amp; iucn_cat == &quot;VI&quot; ~ &quot;Gest. de ress. protégées&quot;, !is.na(wdpaid) &amp; iucn_cat == &quot;Not Applicable&quot; ~ &quot;Non catégorisée&quot;, !is.na(wdpaid) &amp; iucn_cat == &quot;Not Reported&quot; ~ &quot;Non catégorisée&quot;, !is.na(wdpaid) &amp; iucn_cat == &quot;Not Assigned&quot; ~ &quot;Non catégorisée&quot;, TRUE ~ &quot;Non référencée&quot;), .after = iucn_cat) %&gt;% mutate(iucn_des_en = case_when( !is.na(wdpaid) &amp; iucn_cat == &quot;Ia&quot; ~ &quot;Strict nature reserve&quot;, !is.na(wdpaid) &amp; iucn_cat == &quot;Ib&quot; ~ &quot;Wilderness area&quot;, !is.na(wdpaid) &amp; iucn_cat == &quot;II&quot; ~ &quot;National park&quot;, !is.na(wdpaid) &amp; iucn_cat == &quot;III&quot; ~ &quot;Natural monument or feature&quot;, !is.na(wdpaid) &amp; iucn_cat == &quot;IV&quot; ~ &quot; Habitat or species management area&quot;, !is.na(wdpaid) &amp; iucn_cat == &quot;V&quot; ~ &quot;Protected landscape or seascape&quot;, !is.na(wdpaid) &amp; iucn_cat == &quot;VI&quot; ~ &quot;Protected area with sust. use of nat. res.&quot;, !is.na(wdpaid) &amp; iucn_cat == &quot;Not Applicable&quot; ~ &quot;Not categorized&quot;, !is.na(wdpaid) &amp; iucn_cat == &quot;Not Reported&quot; ~ &quot;Not categorized&quot;, !is.na(wdpaid) &amp; iucn_cat == &quot;Not Assigned&quot; ~ &quot;Not categorized&quot;, TRUE ~ &quot;Not referenced&quot;), .after = iucn_cat) %&gt;% mutate(year_funding_first = NA, year_funding_all = NA) %&gt;% #Finally compute centroid coordindates (to create maps) and dummy for FAPBM funded mutate(coord = st_centroid(geom), lon = unlist(map(coord,1)), lat = unlist(map(coord,2)), fapbm = wdpaid %in% data_pa_fapbm$wdpaid) #Save the dataset # s3write_using(x = data_pa_mdg, # FUN = readr::write_delim, # delim = &quot;;&quot;, # object = &quot;data_tidy/BDD_PA_MDG.csv&quot;, # bucket = &quot;projet-afd-eva-ap&quot;, # opts = list(&quot;region&quot; = &quot;&quot;)) 1.2.7 Datasets for confidential analysis The first funding dataset is there to perform descriptive statistics on project funding. Thus we do not need to have one line per PA, as it is not possible to isolate the funding a given WDPAID has received. We simply save the SIOP dataset for project reported as PAs related. #Listing relevant variables for descriptive statistics list_var_fund = c(&quot;id_projet&quot;, &quot;name_pa&quot;, &quot;id_concours&quot;, &quot;wdpaid&quot;, &quot;country_en&quot;, &quot;country_fr&quot;, &quot;iso3&quot;, &quot;region_afd&quot;, &quot;region&quot;, &quot;sub_region&quot;, &quot;area_km2&quot;, &quot;rep_area&quot;, &quot;area_afd_km2&quot;, &quot;cofinanciers&quot;, &quot;cofinanciers_siop&quot;, &quot;mt_fin_global_af_d_prevu_devise&quot;, &quot;montant_prevu_concours_euro_octroi&quot;, &quot;mt_global_projet_prevu_devise&quot;, &quot;mt_part_cofinancier_prevu_euro&quot;, &quot;libelle_produit&quot;, &quot;date_funding&quot;, &quot;year_funding&quot;) #Defining dataset for descriptive statistics on PAs funding. Keep one row for each id_projet/id_concours/cofinanciers of SIOP data_fund = data_tidy %&gt;% select(all_of(list_var_fund)) %&gt;% group_by(id_projet, id_concours, cofinanciers_siop) %&gt;% slice(1) #fwrite(data_fund, &quot;data_tidy/BDD_AFD_fund.csv&quot;) # s3write_using(x = data_fund, # FUN = readr::write_delim, # delim = &quot;;&quot;, # object = &quot;data_tidy/BDD_PA_AFD_fund.csv&quot;, # bucket = &quot;projet-afd-eva-ap&quot;, # opts = list(&quot;region&quot; = &quot;&quot;)) Then a dataset is built with funding associated to each WDPAID. Note a project can fund several WDPAID, and that AFD funding data do not make it possible to isolate the funding of each PA defined by a WDPAID. data_fund_pa = data_tidy #For PAs with WDPAIDs data_fund_wdpa = data_fund_pa %&gt;% subset(is.na(wdpaid) == FALSE) %&gt;% #We need to manually remove some WDPA_PID not relevant ## Remove the marine area with null area of WDPAID 9035 filter(!(wdpa_pid == &quot;9035_A&quot;)) %&gt;% ## 555547861 has 3 marine PAs. The C one is chosen as the size reported by AFD (superficie_km2) matches the area reported by WDPA (https://www.protectedplanet.net/555547861) filter(!(wdpa_pid %in% c(&quot;555547861_A&quot;, &quot;555547861_B&quot;))) %&gt;% # 555705345 : buffer area is also reported. Remove the buffer filter(!(wdpa_pid == &quot;555705345_B&quot;)) %&gt;% #555547863 : keep the WDPA_PID whose area matches the one reported by AFD employees and WDPA website (https://www.protectedplanet.net/555547863) filter(!(wdpa_pid == &quot;555547863_A&quot;)) %&gt;% #Finally, keep for each WDPAID the different funding it get group_by(id_projet, id_concours, wdpaid, cofinanciers) %&gt;% slice(1) %&gt;% ungroup() #For PAs without WDPAIDs but a name_pa : for the PA identified by name_pa, keep id_projet/id_concours/confinanciers data_fund_name = data_fund_pa %&gt;% filter(is.na(wdpaid) == TRUE &amp; is.na(name_pa) == FALSE) %&gt;% group_by(id_projet, id_concours, name_pa, cofinanciers) %&gt;% slice(1) %&gt;% ungroup() #For PAs without WDPAIDs nor name_pa : for the PA identified by id_projet/iso3, keep id_concours/confinanciers data_fund_na = data_fund_pa %&gt;% filter(is.na(wdpaid) == TRUE &amp; is.na(name_pa) == TRUE) %&gt;% group_by(id_projet, iso3, id_concours, cofinanciers) %&gt;% slice(1) %&gt;% ungroup() data_fund_pa_nodupl = rbind(data_fund_wdpa, data_fund_name, data_fund_na) #fwrite(data_fund, &quot;data_tidy/BDD_PA_AFD_fund.csv&quot;) # s3write_using(x = data_fund_pa_nodupl, # FUN = readr::write_delim, # delim = &quot;;&quot;, # object = &quot;data_tidy/BDD_AFD_fund_PA.csv&quot;, # bucket = &quot;projet-afd-eva-ap&quot;, # opts = list(&quot;region&quot; = &quot;&quot;)) 1.2.8 A polygon dataset for specific use The funding and non-funding datasets with polygon, for maps creation. #Loading the datasets ##WDPA data (polygons) data_wdpa = #st_read(&quot;data_raw/wdpa/wdpa_shp_global_raw.gpkg&quot;) %&gt;% s3read_using(sf::st_read, object = &quot;data_raw/wdpa/wdpa_shp_global_raw.gpkg&quot;, bucket = &quot;projet-afd-eva-ap&quot;, opts = list(&quot;region&quot; = &quot;&quot;)) %&gt;% clean_names() %&gt;% select(c(wdpaid, wdpa_pid, geom)) %&gt;% mutate(geom_type = sf::st_geometry_type(geom)) ## Non-confidential dataset data_pa_nofund_nodupl = #fread(&quot;data_raw/BDD_PA_AFD_nofund_nodupl.csv&quot;) s3read_using(readr::read_delim, delim = &quot;;&quot;, show_col_types = FALSE, object = &quot;data_tidy/BDD_PA_AFD_nofund_nodupl.csv&quot;, bucket = &quot;projet-afd-eva-ap&quot;, opts = list(&quot;region&quot; = &quot;&quot;)) ## Confidential dataset data_pa_fund_nodupl = #fread(&quot;data_tidy/BDD_AFD_fund_PA.csv&quot;) s3read_using(readr::read_delim, delim = &quot;;&quot;, show_col_types = FALSE, object = &quot;data_tidy/BDD_AFD_fund_PA.csv&quot;, bucket = &quot;projet-afd-eva-ap&quot;, opts = list(&quot;region&quot; = &quot;&quot;)) #Creating the dataset of with geospatial information (polygons) data_pa_nofund_shp = data_pa_nofund_nodupl %&gt;% left_join(data_wdpa, by = c(&quot;wdpaid&quot;, &quot;wdpa_pid&quot;)) data_pa_fund_shp = data_pa_fund_nodupl %&gt;% left_join(data_wdpa, by = c(&quot;wdpaid&quot;, &quot;wdpa_pid&quot;)) data_pa_nofund_polygon_shp = data_pa_nofund_shp %&gt;% filter(geom_type == &quot;MULTIPOLYGON&quot;) #Saving the datasets # st_write(pa_shp, # dsn = &quot;data_tidy/BDD_pa_afd_shp_pub.gpkg&quot;, # delete_dsn = TRUE) # s3write_using(x = data_pa_nofund_shp, # FUN = sf::st_write, # delim = &quot;;&quot;, # object = &quot;data_tidy/BDD_PA_AFD_nofund_shp.geojson&quot;, # bucket = &quot;projet-afd-eva-ap&quot;, # opts = list(&quot;region&quot; = &quot;&quot;)) # st_write(pa_shp, # dsn = &quot;data_tidy/BDD_pa_afd_shp_pub.gpkg&quot;, # delete_dsn = TRUE) # s3write_using(x = data_pa_nofund_polygon_shp, # FUN = sf::st_write, # delim = &quot;;&quot;, # object = &quot;data_tidy/BDD_PA_AFD_nofund_polygon_shp.geojson&quot;, # bucket = &quot;projet-afd-eva-ap&quot;, # opts = list(&quot;region&quot; = &quot;&quot;)) # st_write(pa_shp, # dsn = &quot;data_tidy/BDD_pa_afd_shp_pub.gpkg&quot;, # delete_dsn = TRUE) # s3write_using(x = data_pa_fund_shp, # FUN = sf::st_write, # delim = &quot;;&quot;, # object = &quot;data_tidy/BDD_PA_AFD_fund_shp.geojson&quot;, # bucket = &quot;projet-afd-eva-ap&quot;, # opts = list(&quot;region&quot; = &quot;&quot;)) 1.3 Computing total areas covered by PAs in the sample Knowing the total area covered by PAs at different level of aggregation is interesting per se. It is also necessary to compute several statistics (e.g average funding by unit of area). According to the WDPA documentation, it is likely that some reported polygons overlap. Simply summing the areas would thus lead to a biased estimate of the total area at a given level of aggregation. We follow the procedure of the WDPA (https://www.protectedplanet.net/en/resources/calculating-protected-area-coverage). Our case is simpler as all of the PAs we consider are given a polygon. The layer is converted to Mollweide (an equal area projection) and the area of each polygon is calculated, in km2. Intersection of polygons and the corresponding area are computed. Then the intersection can be aggregated at country, region or world level. Then it is subtracted to the sum of areas at country, region or world level. Note that intersections between PAs whose polygon is unknown won’t be taken into account. Note that the following codes are about computing total area at country/region/world level, taking potential intersections into account. It is not about generating a new shape files for the impact analysis. Indeed the overlap should be taken into account in the impact evaluation analysis codes. 1.3.1 Computations of polygons’ area #Importing shapefiles sf_use_s2(FALSE) pa_shp = #read_sf(&quot;data_tidy/BDD_PA_AFD_shp.gpkg&quot;) %&gt;% aws.s3::s3read_using( FUN = sf::read_sf, # Mettre les options de FUN ici object = &quot;data_tidy/BDD_PA_AFD_nofund_shp.gpkg&quot;, bucket = &quot;projet-afd-eva-ap&quot;, opts = list(&quot;region&quot; = &quot;&quot;)) %&gt;% #Take polygons only mutate(geom_type = as.character(st_geometry_type(geom))) %&gt;% filter(geom_type == &quot;MULTIPOLYGON&quot;) %&gt;% #Ensure all geometries are valid st_make_valid() %&gt;% #From multipolygon to polygon sf::st_cast(to=&quot;POLYGON&quot;) %&gt;% #Select relevant variables dplyr::select(c(wdpaid, area_afd_km2, rep_area, geom, iso3, region_afd, region, sub_region, year_funding_first, year_funding_all)) #Spatial definition of wdpaid 555547988 overlaps CMR and CAF. Wdpaid 1245 corresponds to the CMR part. The overlap is removed and iso3 redefined so that 555547988 is CAF only. geom_555547988_1245 = st_difference(pa_shp[pa_shp$wdpaid == 555547988,]$geom, pa_shp[pa_shp$wdpaid == 1245,]$geom) pa_shp[pa_shp$wdpaid == 555547988,]$geom = geom_555547988_1245 pa_shp[pa_shp$wdpaid == 555547988,]$iso3 = &quot;CAF&quot; #Define a tidy version of the former dataset, with modifications on wdpaid 555547988 pa_shp_tidy = pa_shp %&gt;% #Project to Mollweide to compute relevant areas in km2 st_transform(crs = &quot;+proj=moll +datum=WGS84&quot;) %&gt;% #Compute areas in km2 from the geometry, in km2. It must be equal to gis_a by definition #Then to take into account potential refinements of the geometries (as for wdpaid 55547988), a variable for relevant area is defined. It takes rep_a value except for modified geometries where area_sf_moll is taken mutate(area_sf_moll = as.numeric(st_area(geom)/1e6), area_afd_km2 = ifelse(wdpaid == 555547988, yes = area_sf_moll, no = rep_area)) 1.3.2 Computing the intersection at country, region, world level #Compute intersecting areas of polygons pa_int = st_intersection(pa_shp_tidy, pa_shp_tidy) %&gt;% #Remove intersection of polygons with themselves subset(wdpaid != wdpaid.1) %&gt;% #If one of the two intersectin polygon have unknwon area, then it is not necessary to subtract the interesction area. Indeed there is no double-counting of the intersection in this case, when both polygon areas are summed. subset(is.na(area_afd_km2) == FALSE &amp; is.na(area_afd_km2.1) == FALSE) %&gt;% #Compute the intersecting areas (pa_shp already in Mollweide projection) in km2 mutate(area_int = as.numeric(st_area(geom)/1e6)) %&gt;% #Now duplicates need to be removed : intersection of X with Y AND intersection of Y with X are reported. We need only one. #An id_int to identify the intersection of a given pair mutate(id_int = paste0(wdpaid, &quot;_&quot;, wdpaid.1), .before = wdpaid) %&gt;% mutate(id_int_temp = paste0(wdpaid, &quot;_&quot;, wdpaid.1), .before = wdpaid) %&gt;% #create a mirror idX_idY --&gt; idY_idX so that we identify the both member of a pair with the same id separate(id_int_temp, into = c(&quot;id_temp1&quot;, &quot;id_temp2&quot;), sep = &quot;_&quot;) %&gt;% mutate(id_int_rev = case_when( id_temp1 &lt; id_temp2 ~ paste(id_temp1, id_temp2, sep = &quot;_&quot;), id_temp1 &gt; id_temp2 ~ paste(id_temp2, id_temp1, sep = &quot;_&quot;), TRUE ~ paste(id_temp1, id_temp2, sep = &quot;_&quot;)), .after = id_int) %&gt;% #finally, get rid of the duplicates (have the same id_int_rev) group_by(id_int_rev) %&gt;% slice(1) %&gt;% ungroup() %&gt;% #select relevant variables only select(wdpaid, iso3, region_afd, region, sub_region, year_funding_first, wdpaid.1, iso3.1, region_afd.1, region.1, sub_region.1, year_funding_first.1, geom, area_int) #Computing the total area of intersections #At country level ... pa_int_ctry = pa_int %&gt;% #Only overlapping PAs in the same country are considered subset(iso3 == iso3.1) %&gt;% group_by(iso3) %&gt;% summarize(tot_area_int = sum(area_int)) %&gt;% st_drop_geometry() #At region level #AFD regions : not performed as some PAs have multiple DR and only one kept # pa_int_dr = pa_int %&gt;% # #Only overlapping PAs in the same DR are considered # subset(region_afd == region_afd.1) %&gt;% # group_by(region_afd) %&gt;% # summarize(tot_area_int = sum(area_int)) %&gt;% # st_drop_geometry() #UN regions pa_int_region = pa_int %&gt;% #Only overlapping PAs in the same DR are considered subset(region == region.1) %&gt;% group_by(region) %&gt;% summarize(tot_area_int = sum(area_int)) %&gt;% st_drop_geometry() #UN sub-regions pa_int_subregion = pa_int %&gt;% #Only overlapping PAs in the same DR are considered subset(sub_region == sub_region.1) %&gt;% group_by(sub_region) %&gt;% summarize(tot_area_int = sum(area_int)) %&gt;% st_drop_geometry() ##At world level : all overlap are considered pa_int_wld = sum(pa_int$area_int) #Compute the total intersection for each year pa_int_yr = pa_int %&gt;% #Define intersection year : the date ann_c of the later PA in the pair rowwise() %&gt;% mutate(annee_int = max(year_funding_first, year_funding_first.1)) %&gt;% group_by(annee_int) %&gt;% summarize(tot_int_km2 = sum(area_int)) %&gt;% st_drop_geometry() # fwrite(pa_int_yr, # &quot;data_tidy/area/pa_int_yr.csv&quot;) s3write_using(x = pa_int_yr, FUN = data.table::fwrite, object = &quot;data_tidy/area/pa_int_yr.csv&quot;, bucket = &quot;projet-afd-eva-ap&quot;, opts = list(&quot;region&quot; = &quot;&quot;)) 1.3.3 Computing total areas without intersection data_pa_afd = #fread(&quot;data_raw/BDD_PA_AFD_nofund_nodupl.csv&quot;) s3read_using(readr::read_delim, delim = &quot;;&quot;, show_col_types = FALSE, object = &quot;data_tidy/BDD_PA_AFD_nofund_nodupl.csv&quot;, bucket = &quot;projet-afd-eva-ap&quot;, opts = list(&quot;region&quot; = &quot;&quot;)) #At country level ... pa_area_ctry = data_pa_afd %&gt;% #Compute total area at country level group_by(iso3) %&gt;% summarize(area_tot_km2 = sum(area_afd_km2, na.rm = TRUE)) %&gt;% ungroup() %&gt;% #Add information on intersection area in each country. Modify the variable so that NA value -&gt; 0 left_join(pa_int_ctry, by = &quot;iso3&quot;) %&gt;% mutate(tot_area_int = case_when(is.na(tot_area_int) == TRUE ~ 0, TRUE ~ tot_area_int)) %&gt;% #Compute the total area at country level without intersection mutate(area_tot_noint_km2 = area_tot_km2 - tot_area_int) #fwrite(pa_area_ctry, &quot;data_tidy/area/pa_area_ctry.csv&quot;) # s3write_using(x = pa_area_ctry, # FUN = data.table::fwrite, # object = &quot;data_tidy/area/pa_area_ctry.csv&quot;, # bucket = &quot;projet-afd-eva-ap&quot;, # opts = list(&quot;region&quot; = &quot;&quot;)) #At AFD region level ... # pa_area_dr = data_pa_afd %&gt;% # #Compute total area at dr level # group_by(region_afd) %&gt;% # summarize(area_tot_km2 = sum(area_afd_km2, na.rm = TRUE)) %&gt;% # ungroup() %&gt;% # #Add information on intersection area in each DR. Modify the variable so that NA value -&gt; 0 # left_join(pa_int_dr, by = &quot;region_afd&quot;) %&gt;% # mutate(tot_area_int = case_when(is.na(tot_area_int) == TRUE ~0, TRUE ~tot_area_int)) %&gt;% # #Compute the total area at country level without intersection # mutate(area_tot_noint_km2 = area_tot_km2 - tot_area_int) %&gt;% # st_drop_geometry() # # #fwrite(pa_area_dr, &quot;data_tidy/area/pa_area_dr.csv&quot;) # s3write_using(x = pa_area_dr, # FUN = data.table::fwrite, # object = &quot;data_tidy/area/pa_area_dr.csv&quot;, # bucket = &quot;projet-afd-eva-ap&quot;, # opts = list(&quot;region&quot; = &quot;&quot;)) #At UN region level pa_area_region = data_pa_afd %&gt;% #Compute total area at dr level group_by(region) %&gt;% summarize(area_tot_km2 = sum(area_afd_km2, na.rm = TRUE)) %&gt;% ungroup() %&gt;% #Add information on intersection area in each DR. Modify the variable so that NA value -&gt; 0 left_join(pa_int_region, by = &quot;region&quot;) %&gt;% mutate(tot_area_int = case_when(is.na(tot_area_int) == TRUE ~0, TRUE ~tot_area_int)) %&gt;% #Compute the total area at country level without intersection mutate(area_tot_noint_km2 = area_tot_km2 - tot_area_int) %&gt;% st_drop_geometry() #fwrite(pa_area_dr, &quot;data_tidy/area/pa_area_dr.csv&quot;) # s3write_using(x = pa_area_region, # FUN = data.table::fwrite, # object = &quot;data_tidy/area/pa_area_region.csv&quot;, # bucket = &quot;projet-afd-eva-ap&quot;, # opts = list(&quot;region&quot; = &quot;&quot;)) #At UN sub-region level pa_area_subregion = data_pa_afd %&gt;% #Compute total area at dr level group_by(sub_region) %&gt;% summarize(area_tot_km2 = sum(area_afd_km2, na.rm = TRUE)) %&gt;% ungroup() %&gt;% #Add information on intersection area in each DR. Modify the variable so that NA value -&gt; 0 left_join(pa_int_subregion, by = &quot;sub_region&quot;) %&gt;% mutate(tot_area_int = case_when(is.na(tot_area_int) == TRUE ~0, TRUE ~tot_area_int)) %&gt;% #Compute the total area at country level without intersection mutate(area_tot_noint_km2 = area_tot_km2 - tot_area_int) %&gt;% st_drop_geometry() #fwrite(pa_area_dr, &quot;data_tidy/area/pa_area_dr.csv&quot;) # s3write_using(x = pa_area_subregion, # FUN = data.table::fwrite, # object = &quot;data_tidy/area/pa_area_subregion.csv&quot;, # bucket = &quot;projet-afd-eva-ap&quot;, # opts = list(&quot;region&quot; = &quot;&quot;)) #At world level pa_area_wld = sum(data_pa_afd$area_afd_km2, na.rm = TRUE) - pa_int_wld %&gt;% as.data.frame() %&gt;% rename(&quot;area_tot_noint_km2&quot; = &quot;.&quot;) #fwrite(pa_area_wld, &quot;data_tidy/area/pa_area_wld.csv&quot;) # s3write_using(x = pa_area_wld, # FUN = data.table::fwrite, # object = &quot;data_tidy/area/pa_area_wld.csv&quot;, # bucket = &quot;projet-afd-eva-ap&quot;, # opts = list(&quot;region&quot; = &quot;&quot;)) "],["projects-funded-by-the-afd.html", "Section 2 Projects funded by the AFD 2.1 Initial settings 2.2 Importing the datasets 2.3 Performing descriptive statistics", " Section 2 Projects funded by the AFD In this document are performed and plotted the following descriptive statistics on the protected areas (PAs) funded by Agence Française de Développement (AFD) : Distribution of PAs among IUCN categories, at country, region and world level Distribution in terms of ecosystems Distribution of PAs across countries and regions, in terms of numbers or areas Temporal evolution in the number and area of PAs funded by the AFD Distribution in terms of governance types In general, PAs refer to AFD funded PAs. When all PAs reported through the world are considered (typically for comparative statistics between general PAs and AFD funded PAs), it will be stated. Some statistics are performed for all PAs across the world, while others are done for some regions and some specific PAs. Typically some statistics are performed for non-marine PAs, i.e terrestrial or coastal ones. These categories are defined by the WDPA and are indicative. A terrestrial PA has less than 10% of its area covered by sea or ocean, a marine one more than 90% and coastal PAs are in between. The statistics are derived from datasets stored in the SSPCloud, and saved into the SSPCloud. Thus specific functions from the aws.S3 package are used (s3read_using() and s3write_using()). These can be replaced by other R functions to read/write locally (fread() typically). The ggplot2::ggsave() function cannot be used to write directly in the SSPCloud storage. Instead, plots from ggplot2 are stored in the temporary memory, then moved to the SSPCloud storage. Working locally, ggsave() can be directly used once the plots are created. 2.1 Initial settings Configuring the Rmarkdown #{r setup, include=FALSE, eval = FALSE} #knitr::opts_knit$set(root.dir = rprojroot::find_rstudio_root_file()) # Importing the relevant packages install.packages(c(&quot;stargazer&quot;, &quot;janitor&quot;, &quot;questionr&quot;, &quot;countrycode&quot;, &quot;WDI&quot;)) library(tidyverse) library(stargazer) library(dplyr) library(sf) library(ggplot2) library(ggrepel) library(RColorBrewer) library(countrycode) library(data.table) #library(readxl) #library(splitstackshape) library(janitor) library(xtable) library(questionr) library(aws.s3) library(WDI) 2.2 Importing the datasets A dataset with information for each PA funded by the AFD, a dataset of all PAs reported by the World Database on Protected Areas (WDPA), and datasets on aggregated size at country/region/world level and by year. The latter takes into account potential overlap between PAs reported in the WDPA. ##Dataset with one line per PA data_stat_nodupl = #fread(&quot;data_tidy/BDD_PA_AFD_nofund_nodupl.csv&quot; , encoding = &quot;UTF-8&quot;) aws.s3::s3read_using( FUN = data.table::fread, encoding = &quot;UTF-8&quot;, # Mettre les options de FUN ici object = &quot;data_tidy/BDD_PA_AFD_nofund_nodupl.csv&quot;, bucket = &quot;projet-afd-eva-ap&quot;, opts = list(&quot;region&quot; = &quot;&quot;)) #Import WDPA data ## Downoad and save data directly using the WDPA R package # data_wdpa = wdpa_fetch(x = &quot;global&quot;, wait = TRUE, download_dir = &quot;data_raw&quot;, # page_wait = 2, verbose = TRUE) # st_write(wdpa, # dsn = &quot;data_raw/wdpa/wdpa_shp_global_raw.gpkg&quot;, # delete_dsn = TRUE) ##Loading from the storage data_wdpa = #st_read(&quot;data_raw/wdpa/wdpa_shp_global_raw.gpkg&quot;) %&gt;% s3read_using(sf::st_read, object = &quot;data_raw/wdpa/wdpa_shp_global_raw.gpkg&quot;, bucket = &quot;projet-afd-eva-ap&quot;, opts = list(&quot;region&quot; = &quot;&quot;)) %&gt;% st_drop_geometry() %&gt;% clean_names() %&gt;% #Add region, sub-region and country names mutate(region = countrycode(sourcevar = iso3, origin = &quot;iso3c&quot;, destination = &quot;un.region.name&quot;), sub_region = countrycode(sourcevar = iso3, origin = &quot;iso3c&quot;, destination = &quot;un.regionsub.name&quot;), country_en = countrycode(sourcevar = iso3, origin = &quot;iso3c&quot;, destination = &quot;un.name.en&quot;), country_fr = countrycode(sourcevar = iso3, origin = &quot;iso3c&quot;, destination = &quot;un.name.fr&quot;), .after = &quot;iso3&quot;) ##Datasets on aggregated size of PAs supported by the AFD per country/region/year and at world level, taking into account the potential spatial overlap. ###Country pa_area_ctry = #fread(&quot;data_tidy/area/pa_area_ctry.csv&quot;, encoding = &quot;UTF-8&quot;) aws.s3::s3read_using( FUN = data.table::fread, encoding = &quot;UTF-8&quot;, # Mettre les options de FUN ici object = &quot;data_tidy/area/pa_area_ctry.csv&quot;, bucket = &quot;projet-afd-eva-ap&quot;, opts = list(&quot;region&quot; = &quot;&quot;)) ### Region pa_area_region = #fread(&quot;data_tidy/area/pa_area_region.csv&quot;, encoding = &quot;UTF-8&quot;) aws.s3::s3read_using( FUN = data.table::fread, encoding = &quot;UTF-8&quot;, # Mettre les options de FUN ici object = &quot;data_tidy/area/pa_area_region.csv&quot;, bucket = &quot;projet-afd-eva-ap&quot;, opts = list(&quot;region&quot; = &quot;&quot;)) ### World pa_area_wld = #fread(&quot;data_tidy/area/pa_area_wld.csv&quot;, encoding = &quot;UTF-8&quot;) aws.s3::s3read_using( FUN = data.table::fread, encoding = &quot;UTF-8&quot;, # Mettre les options de FUN ici object = &quot;data_tidy/area/pa_area_wld.csv&quot;, bucket = &quot;projet-afd-eva-ap&quot;, opts = list(&quot;region&quot; = &quot;&quot;)) ### By year pa_int_yr = #fread(&quot;data_tidy/area/pa_area_dr.csv&quot;, encoding = &quot;UTF-8&quot;) aws.s3::s3read_using( FUN = data.table::fread, encoding = &quot;UTF-8&quot;, # Mettre les options de FUN ici object = &quot;data_tidy/area/pa_int_yr.csv&quot;, bucket = &quot;projet-afd-eva-ap&quot;, opts = list(&quot;region&quot; = &quot;&quot;)) #To perform statistics on the distribution of PAs reported by the WDPA across countries/regions, we focus on not high-income countries. #Precisely, we restrict to countries defined as low-income, lower middle-income, upper-middle income, minus Russia, and including Chile, Uruguay New Caledonia and Panama. Indeed the latter are potential AFD partners while Russia is not, so this country list is more relevant for comparisons between AFD supported PAs and the others. df_ctry_stat_wdpa = WDI(country = &quot;all&quot;, start = &quot;1960&quot;, end = &quot;2022&quot;, extra = TRUE, language = &quot;en&quot;) %&gt;% group_by(iso3c) %&gt;% slice(1) %&gt;% ungroup() %&gt;% select(c(&quot;iso3c&quot;, &quot;income&quot;)) %&gt;% rename(&quot;iso3&quot; = &quot;iso3c&quot;, &quot;wb_inc_grp&quot; = &quot;income&quot;) %&gt;% filter((wb_inc_grp %in% c(&quot;Low income&quot;, &quot;Lower middle income&quot;, &quot;Upper middle income&quot;) &amp; iso3 != &quot;RUS&quot;) | iso3 %in% c(&quot;CHL&quot;, &quot;URY&quot;, &quot;PAN&quot;, &quot;NCL&quot;)) lst_ctry_stat_wdpa = df_ctry_stat_wdpa$iso3 2.3 Performing descriptive statistics The figures and tables are drawn and saved as follow. In a first code chunk, a dataset specific to the statistic needed is generated, then plots are built from ggplot package. Finally, a specific code chunk saves the figures and tables (thanks to xtable package) to a temporary folder and put it in the SSPCloud. Importantly, a specific statistic performed at world and regional level for all and non-marine PAs use same naming for conciseness. See IUCN categories statistics for instance. It is then necessary to generate the relevant plots before running saving chunk, otherwise the lots won’t be saved in the good folder. 2.3.1 IUCN categories The distribution of PAs across the different IUCN categories. This information is reported by the WDPA, thus PAs funded by the AFD but not reported in this database have no information on IUCN categories, and assigned to “not referenced” category. The information on IUCN category is not mandatory in the WDPA, and some PAs have no category reported (“not categorized”). 2.3.1.1 Share of PAs by IUCN categories (world, all) For all PAs in the world, marine and non-marine. #Building the relevant dataset ##For all PAs .. data_cat_iucn = data_stat_nodupl %&gt;% group_by(iucn_des_en, iucn_des_fr) %&gt;% #number of PAs per IUCN category summarize(n_iucn = n()) %&gt;% ungroup() %&gt;% #Frequency of IUCN categories mutate(n_pa = sum(n_iucn), freq_iucn = round(n_iucn/n_pa*100, 2)) %&gt;% arrange(desc(iucn_des_en)) %&gt;% mutate(ypos_iucn = cumsum(freq_iucn) - 0.5*freq_iucn) ##... and for referenced PAs only data_cat_iucn_ref = data_stat_nodupl %&gt;% #Remove not referenced PAs subset(!(iucn_des_fr %in% c(&quot;Non catégorisée&quot;, &quot;Non référencée&quot;))) %&gt;% group_by(iucn_des_en, iucn_des_fr) %&gt;% #number of PAs per IUCN category summarize(n_iucn = n()) %&gt;% ungroup() %&gt;% #Frequency of IUCN categories mutate(n_pa = sum(n_iucn), freq_iucn = round(n_iucn/n_pa*100, 2)) %&gt;% arrange(freq_iucn) %&gt;% mutate(ypos_iucn = cumsum(freq_iucn) - 0.5*freq_iucn) #Latex table ##French tbl_cat_iucn_fr = data_cat_iucn %&gt;% select(c(iucn_des_fr, n_iucn, freq_iucn)) names(tbl_cat_iucn_fr) &lt;- c(&quot;Catégories IUCN&quot;,&quot;Nombre d&#39;AP&quot;, &quot;Proportion d&#39;AP (%)&quot;) tbl_cat_iucn_ref_fr = data_cat_iucn_ref %&gt;% select(c(iucn_des_fr, n_iucn, freq_iucn)) names(tbl_cat_iucn_ref_fr) &lt;- c(&quot;Catégories IUCN&quot;,&quot;Nombre d&#39;AP&quot;, &quot;Proportion d&#39;AP (%)&quot;) ##English tbl_cat_iucn_en = data_cat_iucn %&gt;% select(c(iucn_des_en, n_iucn, freq_iucn)) names(tbl_cat_iucn_en) &lt;- c(&quot;IUCN categories&quot;,&quot;Number of PAs&quot;, &quot;Share of PAs (%)&quot;) tbl_cat_iucn_ref_en = data_cat_iucn_ref %&gt;% select(c(iucn_des_en, n_iucn, freq_iucn)) names(tbl_cat_iucn_ref_en) &lt;- c(&quot;IUCN categories&quot;,&quot;Number of PAs&quot;, &quot;Share of PAs (%)&quot;) #Histogram including non-referenced PAs ##French hist_cat_iucn_fr = ggplot(data_cat_iucn, aes(x = reorder(iucn_des_fr, -freq_iucn), y = freq_iucn, fill = iucn_des_fr)) %&gt;% + geom_bar(stat = &quot;identity&quot;, width = 0.50, fill=&quot;#3182BD&quot;) %&gt;% + geom_text(aes(label = round(n_iucn, 1), y = freq_iucn), vjust = -0.1, color=&quot;black&quot;, size=3.5) %&gt;% + labs(title = &quot;Proportion d&#39;aires protégées par catégorie IUCN&quot;, subtitle = paste(&quot;Echantillon :&quot;, sum(data_cat_iucn$n_iucn), &quot;aires protégées. Nombre d&#39;aires indiqué sur les barres.&quot;), x = &quot;Catégories IUCN&quot;, y = &quot;Proportion (%)&quot;) %&gt;% + theme(legend.position = &quot;bottom&quot;, legend.key = element_rect(fill = &quot;white&quot;), plot.title = element_text(size = 14, face = &quot;bold&quot;), axis.text.x = element_text(angle = 45,size=9, hjust = .5, vjust = .6), panel.background = element_rect(fill = &#39;white&#39;, colour = &#39;white&#39;, linewidth = 0.5, linetype = &#39;solid&#39;), panel.grid.major = element_line(colour = &#39;grey90&#39;, linetype = &#39;solid&#39;), panel.grid.minor = element_line(colour = &#39;grey90&#39;, linetype = &#39;solid&#39;), plot.caption = element_text(color = &#39;grey50&#39;, size = 8.5, face = &#39;plain&#39;)) hist_cat_iucn_fr ##English hist_cat_iucn_en = ggplot(data_cat_iucn, aes(x = reorder(iucn_des_en, -freq_iucn), y = freq_iucn, fill = iucn_des_en)) %&gt;% + geom_bar(stat = &quot;identity&quot;, width = 0.50, fill=&quot;#3182BD&quot;) %&gt;% + geom_text(aes(label = round(n_iucn, 1), y = freq_iucn), vjust = -0.1, color=&quot;black&quot;, size=3.5) %&gt;% + labs(title = &quot;Distribution of protected areas by IUCN categories&quot;, subtitle = paste(&quot;Sample :&quot;, sum(data_cat_iucn$n_iucn), &quot;protected areas. Number of areas indicated above the bars.&quot;), x = &quot;IUCN categories&quot;, y = &quot;Share (%)&quot;) %&gt;% + theme(legend.position = &quot;bottom&quot;, legend.key = element_rect(fill = &quot;white&quot;), plot.title = element_text(size = 14, face = &quot;bold&quot;), axis.text.x = element_text(angle = 45,size=9, hjust = .5, vjust = .6), panel.background = element_rect(fill = &#39;white&#39;, colour = &#39;white&#39;, linewidth = 0.5, linetype = &#39;solid&#39;), panel.grid.major = element_line(colour = &#39;grey90&#39;, linetype = &#39;solid&#39;), panel.grid.minor = element_line(colour = &#39;grey90&#39;, linetype = &#39;solid&#39;), plot.caption = element_text(color = &#39;grey50&#39;, size = 8.5, face = &#39;plain&#39;)) hist_cat_iucn_en #Histogram excluding non-referenced PAs #French hist_cat_iucn_ref_fr = ggplot(data_cat_iucn_ref, aes(x = reorder(iucn_des_fr, -freq_iucn), y = freq_iucn, fill = iucn_des_fr)) %&gt;% + geom_bar(stat = &quot;identity&quot;, width = 0.50, fill=&quot;#3182BD&quot;) %&gt;% + geom_text(aes(label = round(n_iucn, 1), y = freq_iucn), vjust = -0.1, color=&quot;black&quot;, size=3.5) %&gt;% + labs(title = &quot;Proportion d&#39;aires protégées par catégorie IUCN (hors AP non-répertoriées)&quot;, subtitle = paste(&quot;Echantillon :&quot;, sum(data_cat_iucn_ref$n_iucn), &quot;sur&quot;, sum(data_cat_iucn$n_iucn), &quot;aires protégées. Nombre d&#39;aires indiqué sur les barres.&quot;), x = &quot;Catégories IUCN&quot;, y = &quot;Nombre (%)&quot;) %&gt;% + theme(legend.position = &quot;bottom&quot;, legend.key = element_rect(fill = &quot;white&quot;), plot.title = element_text(size = 14, face = &quot;bold&quot;), axis.text.x = element_text(angle = 45,size=9, hjust = .5, vjust = .6), panel.background = element_rect(fill = &#39;white&#39;, colour = &#39;white&#39;, linewidth = 0.5, linetype = &#39;solid&#39;), panel.grid.major = element_line(colour = &#39;grey90&#39;, linetype = &#39;solid&#39;), panel.grid.minor = element_line(colour = &#39;grey90&#39;, linetype = &#39;solid&#39;), plot.caption = element_text(color = &#39;grey50&#39;, size = 8.5, face = &#39;plain&#39;)) hist_cat_iucn_ref_fr #English hist_cat_iucn_ref_en = ggplot(data_cat_iucn_ref, aes(x = reorder(iucn_des_en, -freq_iucn), y = freq_iucn, fill = iucn_des_en)) %&gt;% + geom_bar(stat = &quot;identity&quot;, width = 0.50, fill=&quot;#3182BD&quot;) %&gt;% + geom_text(aes(label = round(n_iucn, 1), y = freq_iucn), vjust = -0.1, color=&quot;black&quot;, size=3.5) %&gt;% + labs(title = &quot;Distribution of protected areas by IUCN categories (excluding not reported/categorized)&quot;, subtitle = paste(&quot;Sample :&quot;, sum(data_cat_iucn_ref$n_iucn), &quot;out of&quot;, sum(data_cat_iucn$n_iucn), &quot;protected areas. Number of areas indicated above the bars.&quot;), x = &quot;IUCN categories&quot;, y = &quot;Share (%)&quot;) %&gt;% + theme(legend.position = &quot;bottom&quot;, legend.key = element_rect(fill = &quot;white&quot;), plot.title = element_text(size = 14, face = &quot;bold&quot;), axis.text.x = element_text(angle = 45,size=9, hjust = .5, vjust = .6), panel.background = element_rect(fill = &#39;white&#39;, colour = &#39;white&#39;, linewidth = 0.5, linetype = &#39;solid&#39;), panel.grid.major = element_line(colour = &#39;grey90&#39;, linetype = &#39;solid&#39;), panel.grid.minor = element_line(colour = &#39;grey90&#39;, linetype = &#39;solid&#39;), plot.caption = element_text(color = &#39;grey50&#39;, size = 8.5, face = &#39;plain&#39;)) hist_cat_iucn_ref_en #Pie chart INcluding non-referenced PAs ##French pie_cat_iucn_fr = ggplot(data_cat_iucn, aes(x=&quot;&quot;, y= freq_iucn, fill = iucn_des_fr)) %&gt;% + geom_bar(width = 1, stat = &quot;identity&quot;, color=&quot;white&quot;) %&gt;% + coord_polar(&quot;y&quot;, start=0) %&gt;% + geom_label_repel(aes(x=1.2, label = paste0(round(freq_iucn, 1), &quot;%&quot;)), color = &quot;white&quot;, position = position_stack(vjust = 0.55), size=2.5, show.legend = FALSE) %&gt;% # + geom_label(aes(x=1.4, label = paste0(freq_iucn, &quot;%&quot;)), # color = &quot;white&quot;, # position = position_stack(vjust = 0.7), size=2.5, # show.legend = FALSE) %&gt;% + labs(x = &quot;&quot;, y = &quot;&quot;, title = &quot;Proportion d&#39;aires protégées par catégorie IUCN (%)&quot;, subtitle = paste(&quot;Echantillon :&quot;, sum(data_cat_iucn$n_iucn), &quot;aires protégées&quot;)) %&gt;% + scale_fill_brewer(name = &quot;Catégories&quot;, palette = &quot;Dark2&quot;) %&gt;% + theme_void() pie_cat_iucn_fr ##English pie_cat_iucn_en = ggplot(data_cat_iucn, aes(x=&quot;&quot;, y= freq_iucn, fill = iucn_des_en)) %&gt;% + geom_bar(width = 1, stat = &quot;identity&quot;, color=&quot;white&quot;) %&gt;% + coord_polar(&quot;y&quot;, start=0) %&gt;% + geom_label_repel(aes(x=1.2, label = paste0(round(freq_iucn, 1), &quot;%&quot;)), color = &quot;white&quot;, position = position_stack(vjust = 0.55), size=2.5, show.legend = FALSE) %&gt;% # + geom_label(aes(x=1.4, label = paste0(freq_iucn, &quot;%&quot;)), # color = &quot;white&quot;, # position = position_stack(vjust = 0.7), size=2.5, # show.legend = FALSE) %&gt;% + labs(x = &quot;&quot;, y = &quot;&quot;, title = &quot;Distribution of protected areas by IUCN categories (%)&quot;, subtitle = paste(&quot;Sample :&quot;, sum(data_cat_iucn$n_iucn), &quot;protected areas&quot;)) %&gt;% + scale_fill_brewer(name = &quot;Categories&quot;, palette = &quot;Dark2&quot;) %&gt;% + theme_void() pie_cat_iucn_en #Pie chart EXcluding non-referenced PAs ##French pie_cat_iucn_ref_fr = ggplot(data_cat_iucn_ref, aes(x=&quot;&quot;, y= freq_iucn, fill = iucn_des_fr)) %&gt;% + geom_bar(width = 1, stat = &quot;identity&quot;, color=&quot;white&quot;) %&gt;% + coord_polar(&quot;y&quot;, start=0) %&gt;% + geom_label_repel(aes(x=1.2, label = paste0(round(freq_iucn, 1), &quot;%&quot;)), color = &quot;white&quot;, position = position_stack(vjust = 0.55), size=2.5, show.legend = FALSE) %&gt;% # + geom_label(aes(x=1.4, label = paste0(freq_iucn, &quot;%&quot;)), # color = &quot;white&quot;, # position = position_stack(vjust = 0.7), size=2.5, # show.legend = FALSE) %&gt;% + labs(x = &quot;&quot;, y = &quot;&quot;, title = &quot;Proportion d&#39;aires protégées par catégorie IUCN \\nhors aires non répertoriées (%)&quot;, subtitle = paste(&quot;Echantillon :&quot;, sum(data_cat_iucn_ref$n_iucn), &quot;sur&quot;, sum(data_cat_iucn$n_iucn), &quot;aires protégées&quot;)) %&gt;% + scale_fill_brewer(name = &quot;Catégories&quot;, palette = &quot;Dark2&quot;) %&gt;% + theme_void() pie_cat_iucn_ref_fr ##English pie_cat_iucn_ref_en = ggplot(data_cat_iucn_ref, aes(x=&quot;&quot;, y= freq_iucn, fill = iucn_des_en)) %&gt;% + geom_bar(width = 1, stat = &quot;identity&quot;, color=&quot;white&quot;) %&gt;% + coord_polar(&quot;y&quot;, start=0) %&gt;% + geom_label_repel(aes(x=1.2, label = paste0(round(freq_iucn, 1), &quot;%&quot;)), color = &quot;white&quot;, position = position_stack(vjust = 0.55), size=2.5, show.legend = FALSE) %&gt;% # + geom_label(aes(x=1.4, label = paste0(freq_iucn, &quot;%&quot;)), # color = &quot;white&quot;, # position = position_stack(vjust = 0.7), size=2.5, # show.legend = FALSE) %&gt;% + labs(x = &quot;&quot;, y = &quot;&quot;, title = &quot;Distribution of protected areas by IUCN categories \\nexcluding not reported/categorized (%)&quot;, subtitle = paste(&quot;Sample :&quot;, sum(data_cat_iucn_ref$n_iucn), &quot;out of&quot;, sum(data_cat_iucn$n_iucn), &quot;protected areas&quot;)) %&gt;% + scale_fill_brewer(name = &quot;Categories&quot;, palette = &quot;Dark2&quot;) %&gt;% + theme_void() pie_cat_iucn_ref_en #Saving figures tmp = paste(tempdir(), &quot;fig&quot;, sep = &quot;/&quot;) ggsave(paste(tmp, &quot;hist_cat_iucn_fr.png&quot;, sep = &quot;/&quot;), plot = hist_cat_iucn_fr, device = &quot;png&quot;, height = 6, width = 9) ggsave(paste(tmp, &quot;hist_cat_iucn_en.png&quot;, sep = &quot;/&quot;), plot = hist_cat_iucn_en, device = &quot;png&quot;, height = 6, width = 9) ggsave(paste(tmp, &quot;hist_cat_iucn_ref_fr.png&quot;, sep = &quot;/&quot;), plot = hist_cat_iucn_ref_fr, device = &quot;png&quot;, height = 6, width = 9) ggsave(paste(tmp, &quot;hist_cat_iucn_ref_en.png&quot;, sep = &quot;/&quot;), plot = hist_cat_iucn_ref_en, device = &quot;png&quot;, height = 6, width = 9) ggsave(paste(tmp, &quot;pie_cat_iucn_fr.png&quot;, sep = &quot;/&quot;), plot = pie_cat_iucn_fr, device = &quot;png&quot;, height = 6, width = 9) ggsave(paste(tmp, &quot;pie_cat_iucn_en.png&quot;, sep = &quot;/&quot;), plot = pie_cat_iucn_en, device = &quot;png&quot;, height = 6, width = 9) ggsave(paste(tmp, &quot;pie_cat_iucn_ref_fr.png&quot;, sep = &quot;/&quot;), plot = pie_cat_iucn_ref_fr, device = &quot;png&quot;, height = 6, width = 9) ggsave(paste(tmp, &quot;pie_cat_iucn_ref_en.png&quot;, sep = &quot;/&quot;), plot = pie_cat_iucn_ref_en, device = &quot;png&quot;, height = 6, width = 9) print(xtable(tbl_cat_iucn_fr, type = &quot;latex&quot;), file = paste(tmp, &quot;tbl_cat_iucn_fr.tex&quot;, sep = &quot;/&quot;)) print(xtable(tbl_cat_iucn_en, type = &quot;latex&quot;), file = paste(tmp, &quot;tbl_cat_iucn_en.tex&quot;, sep = &quot;/&quot;)) print(xtable(tbl_cat_iucn_ref_fr, type = &quot;latex&quot;), file = paste(tmp, &quot;tbl_cat_iucn_ref_fr.tex&quot;, sep = &quot;/&quot;)) print(xtable(tbl_cat_iucn_ref_en, type = &quot;latex&quot;), file = paste(tmp, &quot;tbl_cat_iucn_ref_en.tex&quot;, sep = &quot;/&quot;)) #Export to S3 storage ##List of files to save in the temp folder files &lt;- list.files(tmp, full.names = TRUE) ##Add each file in the bucket (same foler for every file in the temp) for(f in files) { cat(&quot;Uploading file&quot;, paste0(&quot;&#39;&quot;, f, &quot;&#39;&quot;), &quot;\\n&quot;) aws.s3::put_object(file = f, bucket = &quot;projet-afd-eva-ap/descriptive_stats/IUCN/world/all&quot;, region = &quot;&quot;, show_progress = TRUE) } #Erase the files in the temp directory do.call(file.remove, list(list.files(tmp, full.names = TRUE))) 2.3.1.2 Share of PAs by IUCN categories (world, no marine) For PAs across the world, non-marine only. #Building the relevant dataset ##For all PAs .. data_cat_iucn = data_stat_nodupl %&gt;% #Keep only terrestrial or coastal PA (when unknown, discarded) filter(marine %in% c(0,1)) %&gt;% group_by(iucn_des_en, iucn_des_fr) %&gt;% #number of PAs per IUCN category summarize(n_iucn = n()) %&gt;% ungroup() %&gt;% #Frequency of IUCN categories mutate(n_pa = sum(n_iucn), freq_iucn = round(n_iucn/n_pa*100, 2)) %&gt;% arrange(desc(iucn_des_en)) %&gt;% mutate(ypos_iucn = cumsum(freq_iucn) - 0.5*freq_iucn) ##... and for referenced PAs only data_cat_iucn_ref = data_stat_nodupl %&gt;% #Keep only terrestrial or coastal PA (when unknown, discarded) filter(marine %in% c(0,1)) %&gt;% #Remove not referenced PAs subset(!(iucn_des_fr %in% c(&quot;Non catégorisée&quot;, &quot;Non référencée&quot;))) %&gt;% group_by(iucn_des_en, iucn_des_fr) %&gt;% #number of PAs per IUCN category summarize(n_iucn = n()) %&gt;% ungroup() %&gt;% #Frequency of IUCN categories mutate(n_pa = sum(n_iucn), freq_iucn = round(n_iucn/n_pa*100, 2)) %&gt;% arrange(freq_iucn) %&gt;% mutate(ypos_iucn = cumsum(freq_iucn) - 0.5*freq_iucn) #Latex table ##French tbl_cat_iucn_fr = data_cat_iucn %&gt;% select(c(iucn_des_fr, n_iucn, freq_iucn)) names(tbl_cat_iucn_fr) &lt;- c(&quot;Catégories IUCN&quot;,&quot;Nombre d&#39;AP&quot;, &quot;Proportion d&#39;AP (%)&quot;) tbl_cat_iucn_ref_fr = data_cat_iucn_ref %&gt;% select(c(iucn_des_fr, n_iucn, freq_iucn)) names(tbl_cat_iucn_ref_fr) &lt;- c(&quot;Catégories IUCN&quot;,&quot;Nombre d&#39;AP&quot;, &quot;Proportion d&#39;AP (%)&quot;) ##English tbl_cat_iucn_en = data_cat_iucn %&gt;% select(c(iucn_des_en, n_iucn, freq_iucn)) names(tbl_cat_iucn_en) &lt;- c(&quot;IUCN categories&quot;,&quot;Number of PAs&quot;, &quot;Share of PAs (%)&quot;) tbl_cat_iucn_ref_en = data_cat_iucn_ref %&gt;% select(c(iucn_des_en, n_iucn, freq_iucn)) names(tbl_cat_iucn_ref_en) &lt;- c(&quot;IUCN categories&quot;,&quot;Number of PAs&quot;, &quot;Share of PAs (%)&quot;) #Histogram including non-referenced PAs ##French hist_cat_iucn_fr = ggplot(data_cat_iucn, aes(x = reorder(iucn_des_fr, -freq_iucn), y = freq_iucn, fill = iucn_des_fr)) %&gt;% + geom_bar(stat = &quot;identity&quot;, width = 0.50, fill=&quot;#3182BD&quot;) %&gt;% + geom_text(aes(label = round(n_iucn, 1), y = freq_iucn), vjust = -0.1, color=&quot;black&quot;, size=3.5) %&gt;% + labs(title = &quot;Proportion d&#39;aires protégées non-marines par catégorie IUCN&quot;, subtitle = paste(&quot;Echantillon :&quot;, sum(data_cat_iucn$n_iucn), &quot;aires protégées non-marines. Nombre d&#39;aires indiqué sur les barres.&quot;), x = &quot;Catégories IUCN&quot;, y = &quot;Proportion (%)&quot;) %&gt;% + theme(legend.position = &quot;bottom&quot;, legend.key = element_rect(fill = &quot;white&quot;), plot.title = element_text(size = 14, face = &quot;bold&quot;), axis.text.x = element_text(angle = 45,size=9, hjust = .5, vjust = .6), panel.background = element_rect(fill = &#39;white&#39;, colour = &#39;white&#39;, linewidth = 0.5, linetype = &#39;solid&#39;), panel.grid.major = element_line(colour = &#39;grey90&#39;, linetype = &#39;solid&#39;), panel.grid.minor = element_line(colour = &#39;grey90&#39;, linetype = &#39;solid&#39;), plot.caption = element_text(color = &#39;grey50&#39;, size = 8.5, face = &#39;plain&#39;)) hist_cat_iucn_fr ##English hist_cat_iucn_en = ggplot(data_cat_iucn, aes(x = reorder(iucn_des_en, -freq_iucn), y = freq_iucn, fill = iucn_des_en)) %&gt;% + geom_bar(stat = &quot;identity&quot;, width = 0.50, fill=&quot;#3182BD&quot;) %&gt;% + geom_text(aes(label = round(n_iucn, 1), y = freq_iucn), vjust = -0.1, color=&quot;black&quot;, size=3.5) %&gt;% + labs(title = &quot;Distribution of non-marine protected areas by IUCN categories&quot;, subtitle = paste(&quot;Sample :&quot;, sum(data_cat_iucn$n_iucn), &quot;non-marine protected areas. Number of areas indicated above the bars.&quot;), x = &quot;IUCN categories&quot;, y = &quot;Share (%)&quot;) %&gt;% + theme(legend.position = &quot;bottom&quot;, legend.key = element_rect(fill = &quot;white&quot;), plot.title = element_text(size = 14, face = &quot;bold&quot;), axis.text.x = element_text(angle = 45,size=9, hjust = .5, vjust = .6), panel.background = element_rect(fill = &#39;white&#39;, colour = &#39;white&#39;, linewidth = 0.5, linetype = &#39;solid&#39;), panel.grid.major = element_line(colour = &#39;grey90&#39;, linetype = &#39;solid&#39;), panel.grid.minor = element_line(colour = &#39;grey90&#39;, linetype = &#39;solid&#39;), plot.caption = element_text(color = &#39;grey50&#39;, size = 8.5, face = &#39;plain&#39;)) hist_cat_iucn_en #Histogram excluding non-referenced PAs #French hist_cat_iucn_ref_fr = ggplot(data_cat_iucn_ref, aes(x = reorder(iucn_des_fr, -freq_iucn), y = freq_iucn, fill = iucn_des_fr)) %&gt;% + geom_bar(stat = &quot;identity&quot;, width = 0.50, fill=&quot;#3182BD&quot;) %&gt;% + geom_text(aes(label = round(n_iucn, 1), y = freq_iucn), vjust = -0.1, color=&quot;black&quot;, size=3.5) %&gt;% + labs(title = &quot;Proportion d&#39;aires protégées non-marines par catégorie IUCN \\n(hors AP non-répertoriées)&quot;, subtitle = paste(&quot;Echantillon :&quot;, sum(data_cat_iucn_ref$n_iucn), &quot;sur&quot;, sum(data_cat_iucn$n_iucn), &quot;aires protégées non-marines. Nombre d&#39;aires indiqué sur les barres.&quot;), x = &quot;Catégories IUCN&quot;, y = &quot;Nombre (%)&quot;) %&gt;% + theme(legend.position = &quot;bottom&quot;, legend.key = element_rect(fill = &quot;white&quot;), plot.title = element_text(size = 14, face = &quot;bold&quot;), axis.text.x = element_text(angle = 45,size=9, hjust = .5, vjust = .6), panel.background = element_rect(fill = &#39;white&#39;, colour = &#39;white&#39;, linewidth = 0.5, linetype = &#39;solid&#39;), panel.grid.major = element_line(colour = &#39;grey90&#39;, linetype = &#39;solid&#39;), panel.grid.minor = element_line(colour = &#39;grey90&#39;, linetype = &#39;solid&#39;), plot.caption = element_text(color = &#39;grey50&#39;, size = 8.5, face = &#39;plain&#39;)) hist_cat_iucn_ref_fr #English hist_cat_iucn_ref_en = ggplot(data_cat_iucn_ref, aes(x = reorder(iucn_des_en, -freq_iucn), y = freq_iucn, fill = iucn_des_en)) %&gt;% + geom_bar(stat = &quot;identity&quot;, width = 0.50, fill=&quot;#3182BD&quot;) %&gt;% + geom_text(aes(label = round(n_iucn, 1), y = freq_iucn), vjust = -0.1, color=&quot;black&quot;, size=3.5) %&gt;% + labs(title = &quot;Distribution of non-marine protected areas by IUCN categories \\n(excluding not reported/categorized)&quot;, subtitle = paste(&quot;Sample :&quot;, sum(data_cat_iucn_ref$n_iucn), &quot;out of&quot;, sum(data_cat_iucn$n_iucn), &quot;non-marine protected areas. Number of areas indicated above the bars.&quot;), x = &quot;IUCN categories&quot;, y = &quot;Share (%)&quot;) %&gt;% + theme(legend.position = &quot;bottom&quot;, legend.key = element_rect(fill = &quot;white&quot;), plot.title = element_text(size = 14, face = &quot;bold&quot;), axis.text.x = element_text(angle = 45,size=9, hjust = .5, vjust = .6), panel.background = element_rect(fill = &#39;white&#39;, colour = &#39;white&#39;, linewidth = 0.5, linetype = &#39;solid&#39;), panel.grid.major = element_line(colour = &#39;grey90&#39;, linetype = &#39;solid&#39;), panel.grid.minor = element_line(colour = &#39;grey90&#39;, linetype = &#39;solid&#39;), plot.caption = element_text(color = &#39;grey50&#39;, size = 8.5, face = &#39;plain&#39;)) hist_cat_iucn_ref_en #Pie chart INcluding non-referenced PAs ##French pie_cat_iucn_fr = ggplot(data_cat_iucn, aes(x=&quot;&quot;, y= freq_iucn, fill = iucn_des_fr)) %&gt;% + geom_bar(width = 1, stat = &quot;identity&quot;, color=&quot;white&quot;) %&gt;% + coord_polar(&quot;y&quot;, start=0) %&gt;% + geom_label_repel(aes(x=1.2, label = paste0(round(freq_iucn, 1), &quot;%&quot;)), color = &quot;white&quot;, position = position_stack(vjust = 0.55), size=2.5, show.legend = FALSE) %&gt;% # + geom_label(aes(x=1.4, label = paste0(freq_iucn, &quot;%&quot;)), # color = &quot;white&quot;, # position = position_stack(vjust = 0.7), size=2.5, # show.legend = FALSE) %&gt;% + labs(x = &quot;&quot;, y = &quot;&quot;, title = &quot;Proportion d&#39;aires protégées non-marines par catégorie IUCN (%)&quot;, subtitle = paste(&quot;Echantillon :&quot;, sum(data_cat_iucn$n_iucn), &quot;aires protégées non-marines&quot;)) %&gt;% + scale_fill_brewer(name = &quot;Catégories&quot;, palette = &quot;Dark2&quot;) %&gt;% + theme_void() pie_cat_iucn_fr ##English pie_cat_iucn_en = ggplot(data_cat_iucn, aes(x=&quot;&quot;, y= freq_iucn, fill = iucn_des_en)) %&gt;% + geom_bar(width = 1, stat = &quot;identity&quot;, color=&quot;white&quot;) %&gt;% + coord_polar(&quot;y&quot;, start=0) %&gt;% + geom_label_repel(aes(x=1.2, label = paste0(round(freq_iucn, 1), &quot;%&quot;)), color = &quot;white&quot;, position = position_stack(vjust = 0.55), size=2.5, show.legend = FALSE) %&gt;% # + geom_label(aes(x=1.4, label = paste0(freq_iucn, &quot;%&quot;)), # color = &quot;white&quot;, # position = position_stack(vjust = 0.7), size=2.5, # show.legend = FALSE) %&gt;% + labs(x = &quot;&quot;, y = &quot;&quot;, title = &quot;Distribution of non-marine protected areas by IUCN categories (%)&quot;, subtitle = paste(&quot;Sample :&quot;, sum(data_cat_iucn$n_iucn), &quot;non-marine protected areas&quot;)) %&gt;% + scale_fill_brewer(name = &quot;Categories&quot;, palette = &quot;Dark2&quot;) %&gt;% + theme_void() pie_cat_iucn_en #Pie chart EXcluding non-referenced PAs ##French pie_cat_iucn_ref_fr = ggplot(data_cat_iucn_ref, aes(x=&quot;&quot;, y= freq_iucn, fill = iucn_des_fr)) %&gt;% + geom_bar(width = 1, stat = &quot;identity&quot;, color=&quot;white&quot;) %&gt;% + coord_polar(&quot;y&quot;, start=0) %&gt;% + geom_label_repel(aes(x=1.2, label = paste0(round(freq_iucn, 1), &quot;%&quot;)), color = &quot;white&quot;, position = position_stack(vjust = 0.55), size=2.5, show.legend = FALSE) %&gt;% # + geom_label(aes(x=1.4, label = paste0(freq_iucn, &quot;%&quot;)), # color = &quot;white&quot;, # position = position_stack(vjust = 0.7), size=2.5, # show.legend = FALSE) %&gt;% + labs(x = &quot;&quot;, y = &quot;&quot;, title = &quot;Proportion d&#39;aires protégées non-marines par catégorie IUCN \\nhors aires non répertoriées (%)&quot;, subtitle = paste(&quot;Echantillon :&quot;, sum(data_cat_iucn_ref$n_iucn), &quot;sur&quot;, sum(data_cat_iucn$n_iucn), &quot;aires protégées non-marines&quot;)) %&gt;% + scale_fill_brewer(name = &quot;Catégories&quot;, palette = &quot;Dark2&quot;) %&gt;% + theme_void() pie_cat_iucn_ref_fr ##English pie_cat_iucn_ref_en = ggplot(data_cat_iucn_ref, aes(x=&quot;&quot;, y= freq_iucn, fill = iucn_des_en)) %&gt;% + geom_bar(width = 1, stat = &quot;identity&quot;, color=&quot;white&quot;) %&gt;% + coord_polar(&quot;y&quot;, start=0) %&gt;% + geom_label_repel(aes(x=1.2, label = paste0(round(freq_iucn, 1), &quot;%&quot;)), color = &quot;white&quot;, position = position_stack(vjust = 0.55), size=2.5, show.legend = FALSE) %&gt;% # + geom_label(aes(x=1.4, label = paste0(freq_iucn, &quot;%&quot;)), # color = &quot;white&quot;, # position = position_stack(vjust = 0.7), size=2.5, # show.legend = FALSE) %&gt;% + labs(x = &quot;&quot;, y = &quot;&quot;, title = &quot;Distribution of non-marine protected areas by IUCN categories \\nexcluding not reported/categorized (%)&quot;, subtitle = paste(&quot;Sample :&quot;, sum(data_cat_iucn_ref$n_iucn), &quot;out of&quot;, sum(data_cat_iucn$n_iucn), &quot;non-marine protected areas&quot;)) %&gt;% + scale_fill_brewer(name = &quot;Categories&quot;, palette = &quot;Dark2&quot;) %&gt;% + theme_void() pie_cat_iucn_ref_en #Saving figures tmp = paste(tempdir(), &quot;fig&quot;, sep = &quot;/&quot;) ggsave(paste(tmp, &quot;hist_cat_iucn_fr.png&quot;, sep = &quot;/&quot;), plot = hist_cat_iucn_fr, device = &quot;png&quot;, height = 6, width = 9) ggsave(paste(tmp, &quot;hist_cat_iucn_en.png&quot;, sep = &quot;/&quot;), plot = hist_cat_iucn_en, device = &quot;png&quot;, height = 6, width = 9) ggsave(paste(tmp, &quot;hist_cat_iucn_ref_fr.png&quot;, sep = &quot;/&quot;), plot = hist_cat_iucn_ref_fr, device = &quot;png&quot;, height = 6, width = 9) ggsave(paste(tmp, &quot;hist_cat_iucn_ref_en.png&quot;, sep = &quot;/&quot;), plot = hist_cat_iucn_ref_en, device = &quot;png&quot;, height = 6, width = 9) ggsave(paste(tmp, &quot;pie_cat_iucn_fr.png&quot;, sep = &quot;/&quot;), plot = pie_cat_iucn_fr, device = &quot;png&quot;, height = 6, width = 9) ggsave(paste(tmp, &quot;pie_cat_iucn_en.png&quot;, sep = &quot;/&quot;), plot = pie_cat_iucn_en, device = &quot;png&quot;, height = 6, width = 9) ggsave(paste(tmp, &quot;pie_cat_iucn_ref_fr.png&quot;, sep = &quot;/&quot;), plot = pie_cat_iucn_ref_fr, device = &quot;png&quot;, height = 6, width = 9) ggsave(paste(tmp, &quot;pie_cat_iucn_ref_en.png&quot;, sep = &quot;/&quot;), plot = pie_cat_iucn_ref_en, device = &quot;png&quot;, height = 6, width = 9) print(xtable(tbl_cat_iucn_fr, type = &quot;latex&quot;), file = paste(tmp, &quot;tbl_cat_iucn_fr.tex&quot;, sep = &quot;/&quot;)) print(xtable(tbl_cat_iucn_en, type = &quot;latex&quot;), file = paste(tmp, &quot;tbl_cat_iucn_en.tex&quot;, sep = &quot;/&quot;)) print(xtable(tbl_cat_iucn_ref_fr, type = &quot;latex&quot;), file = paste(tmp, &quot;tbl_cat_iucn_ref_fr.tex&quot;, sep = &quot;/&quot;)) print(xtable(tbl_cat_iucn_ref_en, type = &quot;latex&quot;), file = paste(tmp, &quot;tbl_cat_iucn_ref_en.tex&quot;, sep = &quot;/&quot;)) #Export to S3 storage ##List of files to save in the temp folder files &lt;- list.files(tmp, full.names = TRUE) ##Add each file in the bucket (same foler for every file in the temp) for(f in files) { cat(&quot;Uploading file&quot;, paste0(&quot;&#39;&quot;, f, &quot;&#39;&quot;), &quot;\\n&quot;) aws.s3::put_object(file = f, bucket = &quot;projet-afd-eva-ap/descriptive_stats/IUCN/world/no_marine&quot;, region = &quot;&quot;, show_progress = TRUE) } #Erase the files in the temp directory do.call(file.remove, list(list.files(tmp, full.names = TRUE))) 2.3.1.3 Share of PAs by IUCN categories (region, no marine) Pas in a specific region, non-marine only. #Define the region of interest (see region variable in the main dataset). roi = &quot;Africa&quot; #Building the relevant dataset ##For all PAs .. data_cat_iucn = data_stat_nodupl %&gt;% #Keep only terrestrial or coastal PA (when unknown, discarded) filter(marine %in% c(0,1) &amp; region == roi) %&gt;% group_by(iucn_des_en, iucn_des_fr) %&gt;% #number of PAs per IUCN category summarize(n_iucn = n()) %&gt;% ungroup() %&gt;% #Frequency of IUCN categories mutate(n_pa = sum(n_iucn), freq_iucn = round(n_iucn/n_pa*100, 2)) %&gt;% arrange(desc(iucn_des_en)) %&gt;% mutate(ypos_iucn = cumsum(freq_iucn) - 0.5*freq_iucn) ##... and for referenced PAs only data_cat_iucn_ref = data_stat_nodupl %&gt;% #Keep only terrestrial or coastal PA (when unknown, discarded) filter(marine %in% c(0,1) &amp; region == roi) %&gt;% #Remove not referenced PAs subset(!(iucn_des_fr %in% c(&quot;Non catégorisée&quot;, &quot;Non référencée&quot;))) %&gt;% group_by(iucn_des_en, iucn_des_fr) %&gt;% #number of PAs per IUCN category summarize(n_iucn = n()) %&gt;% ungroup() %&gt;% #Frequency of IUCN categories mutate(n_pa = sum(n_iucn), freq_iucn = round(n_iucn/n_pa*100, 2)) %&gt;% arrange(freq_iucn) %&gt;% mutate(ypos_iucn = cumsum(freq_iucn) - 0.5*freq_iucn) #Latex table ##French tbl_cat_iucn_fr = data_cat_iucn %&gt;% select(c(iucn_des_fr, n_iucn, freq_iucn)) names(tbl_cat_iucn_fr) &lt;- c(&quot;Catégories IUCN&quot;,&quot;Nombre d&#39;AP&quot;, &quot;Proportion d&#39;AP (%)&quot;) tbl_cat_iucn_ref_fr = data_cat_iucn_ref %&gt;% select(c(iucn_des_fr, n_iucn, freq_iucn)) names(tbl_cat_iucn_ref_fr) &lt;- c(&quot;Catégories IUCN&quot;,&quot;Nombre d&#39;AP&quot;, &quot;Proportion d&#39;AP (%)&quot;) ##English tbl_cat_iucn_en = data_cat_iucn %&gt;% select(c(iucn_des_en, n_iucn, freq_iucn)) names(tbl_cat_iucn_en) &lt;- c(&quot;IUCN categories&quot;,&quot;Number of PAs&quot;, &quot;Share of PAs (%)&quot;) tbl_cat_iucn_ref_en = data_cat_iucn_ref %&gt;% select(c(iucn_des_en, n_iucn, freq_iucn)) names(tbl_cat_iucn_ref_en) &lt;- c(&quot;IUCN categories&quot;,&quot;Number of PAs&quot;, &quot;Share of PAs (%)&quot;) #Histogram including non-referenced PAs ##French hist_cat_iucn_fr = ggplot(data_cat_iucn, aes(x = reorder(iucn_des_fr, -freq_iucn), y = freq_iucn, fill = iucn_des_fr)) %&gt;% + geom_bar(stat = &quot;identity&quot;, width = 0.50, fill=&quot;#3182BD&quot;) %&gt;% + geom_text(aes(label = round(n_iucn, 1), y = freq_iucn), vjust = -0.1, color=&quot;black&quot;, size=3.5) %&gt;% + labs(title = paste(&quot;Proportion d&#39;aires protégées non-marines par catégorie IUCN,&quot;, roi), subtitle = paste(&quot;Echantillon :&quot;, sum(data_cat_iucn$n_iucn), &quot;aires protégées non-marines. Nombre d&#39;aires indiqué sur les barres.&quot;), x = &quot;Catégories IUCN&quot;, y = &quot;Proportion (%)&quot;) %&gt;% + theme(legend.position = &quot;bottom&quot;, legend.key = element_rect(fill = &quot;white&quot;), plot.title = element_text(size = 14, face = &quot;bold&quot;), axis.text.x = element_text(angle = 45,size=9, hjust = .5, vjust = .6), panel.background = element_rect(fill = &#39;white&#39;, colour = &#39;white&#39;, linewidth = 0.5, linetype = &#39;solid&#39;), panel.grid.major = element_line(colour = &#39;grey90&#39;, linetype = &#39;solid&#39;), panel.grid.minor = element_line(colour = &#39;grey90&#39;, linetype = &#39;solid&#39;), plot.caption = element_text(color = &#39;grey50&#39;, size = 8.5, face = &#39;plain&#39;)) hist_cat_iucn_fr ##English hist_cat_iucn_en = ggplot(data_cat_iucn, aes(x = reorder(iucn_des_en, -freq_iucn), y = freq_iucn, fill = iucn_des_en)) %&gt;% + geom_bar(stat = &quot;identity&quot;, width = 0.50, fill=&quot;#3182BD&quot;) %&gt;% + geom_text(aes(label = round(n_iucn, 1), y = freq_iucn), vjust = -0.1, color=&quot;black&quot;, size=3.5) %&gt;% + labs(title = paste(&quot;Distribution of non-marine protected areas by IUCN categories,&quot;, roi), subtitle = paste(&quot;Sample :&quot;, sum(data_cat_iucn$n_iucn), &quot;non-marine protected areas. Number of areas indicated above the bars.&quot;), x = &quot;IUCN categories&quot;, y = &quot;Share (%)&quot;) %&gt;% + theme(legend.position = &quot;bottom&quot;, legend.key = element_rect(fill = &quot;white&quot;), plot.title = element_text(size = 14, face = &quot;bold&quot;), axis.text.x = element_text(angle = 45,size=9, hjust = .5, vjust = .6), panel.background = element_rect(fill = &#39;white&#39;, colour = &#39;white&#39;, linewidth = 0.5, linetype = &#39;solid&#39;), panel.grid.major = element_line(colour = &#39;grey90&#39;, linetype = &#39;solid&#39;), panel.grid.minor = element_line(colour = &#39;grey90&#39;, linetype = &#39;solid&#39;), plot.caption = element_text(color = &#39;grey50&#39;, size = 8.5, face = &#39;plain&#39;)) hist_cat_iucn_en #Histogram excluding non-referenced PAs #French hist_cat_iucn_ref_fr = ggplot(data_cat_iucn_ref, aes(x = reorder(iucn_des_fr, -freq_iucn), y = freq_iucn, fill = iucn_des_fr)) %&gt;% + geom_bar(stat = &quot;identity&quot;, width = 0.50, fill=&quot;#3182BD&quot;) %&gt;% + geom_text(aes(label = round(n_iucn, 1), y = freq_iucn), vjust = -0.1, color=&quot;black&quot;, size=3.5) %&gt;% + labs(title = paste(&quot;Proportion d&#39;aires protégées non-marines par catégorie IUCN,&quot;, roi, &quot;\\n(hors AP non-répertoriées)&quot;), subtitle = paste(&quot;Echantillon :&quot;, sum(data_cat_iucn_ref$n_iucn), &quot;sur&quot;, sum(data_cat_iucn$n_iucn), &quot;aires protégées non-marines. Nombre d&#39;aires indiqué sur les barres.&quot;), x = &quot;Catégories IUCN&quot;, y = &quot;Nombre (%)&quot;) %&gt;% + theme(legend.position = &quot;bottom&quot;, legend.key = element_rect(fill = &quot;white&quot;), plot.title = element_text(size = 14, face = &quot;bold&quot;), axis.text.x = element_text(angle = 45,size=9, hjust = .5, vjust = .6), panel.background = element_rect(fill = &#39;white&#39;, colour = &#39;white&#39;, linewidth = 0.5, linetype = &#39;solid&#39;), panel.grid.major = element_line(colour = &#39;grey90&#39;, linetype = &#39;solid&#39;), panel.grid.minor = element_line(colour = &#39;grey90&#39;, linetype = &#39;solid&#39;), plot.caption = element_text(color = &#39;grey50&#39;, size = 8.5, face = &#39;plain&#39;)) hist_cat_iucn_ref_fr #English hist_cat_iucn_ref_en = ggplot(data_cat_iucn_ref, aes(x = reorder(iucn_des_en, -freq_iucn), y = freq_iucn, fill = iucn_des_en)) %&gt;% + geom_bar(stat = &quot;identity&quot;, width = 0.50, fill=&quot;#3182BD&quot;) %&gt;% + geom_text(aes(label = round(n_iucn, 1), y = freq_iucn), vjust = -0.1, color=&quot;black&quot;, size=3.5) %&gt;% + labs(title = paste(&quot;Distribution of non-marine protected areas by IUCN categories,&quot;, roi, &quot;\\n(excluding not reported/categorized)&quot;), subtitle = paste(&quot;Sample :&quot;, sum(data_cat_iucn_ref$n_iucn), &quot;out of&quot;, sum(data_cat_iucn$n_iucn), &quot;non-marine protected areas. Number of areas indicated above the bars.&quot;), x = &quot;IUCN categories&quot;, y = &quot;Share (%)&quot;) %&gt;% + theme(legend.position = &quot;bottom&quot;, legend.key = element_rect(fill = &quot;white&quot;), plot.title = element_text(size = 14, face = &quot;bold&quot;), axis.text.x = element_text(angle = 45,size=9, hjust = .5, vjust = .6), panel.background = element_rect(fill = &#39;white&#39;, colour = &#39;white&#39;, linewidth = 0.5, linetype = &#39;solid&#39;), panel.grid.major = element_line(colour = &#39;grey90&#39;, linetype = &#39;solid&#39;), panel.grid.minor = element_line(colour = &#39;grey90&#39;, linetype = &#39;solid&#39;), plot.caption = element_text(color = &#39;grey50&#39;, size = 8.5, face = &#39;plain&#39;)) hist_cat_iucn_ref_en #Pie chart INcluding non-referenced PAs ##French pie_cat_iucn_fr = ggplot(data_cat_iucn, aes(x=&quot;&quot;, y= freq_iucn, fill = iucn_des_fr)) %&gt;% + geom_bar(width = 1, stat = &quot;identity&quot;, color=&quot;white&quot;) %&gt;% + coord_polar(&quot;y&quot;, start=0) %&gt;% + geom_label_repel(aes(x=1.2, label = paste0(round(freq_iucn, 1), &quot;%&quot;)), color = &quot;white&quot;, position = position_stack(vjust = 0.55), size=2.5, show.legend = FALSE) %&gt;% # + geom_label(aes(x=1.4, label = paste0(freq_iucn, &quot;%&quot;)), # color = &quot;white&quot;, # position = position_stack(vjust = 0.7), size=2.5, # show.legend = FALSE) %&gt;% + labs(x = &quot;&quot;, y = &quot;&quot;, title = paste(&quot;Proportion d&#39;aires protégées non-marines par catégorie IUCN (%),&quot;, roi), subtitle = paste(&quot;Echantillon :&quot;, sum(data_cat_iucn$n_iucn), &quot;aires protégées non-marines&quot;)) %&gt;% + scale_fill_brewer(name = &quot;Catégories&quot;, palette = &quot;Dark2&quot;) %&gt;% + theme_void() pie_cat_iucn_fr ##English pie_cat_iucn_en = ggplot(data_cat_iucn, aes(x=&quot;&quot;, y= freq_iucn, fill = iucn_des_en)) %&gt;% + geom_bar(width = 1, stat = &quot;identity&quot;, color=&quot;white&quot;) %&gt;% + coord_polar(&quot;y&quot;, start=0) %&gt;% + geom_label_repel(aes(x=1.2, label = paste0(round(freq_iucn, 1), &quot;%&quot;)), color = &quot;white&quot;, position = position_stack(vjust = 0.55), size=2.5, show.legend = FALSE) %&gt;% # + geom_label(aes(x=1.4, label = paste0(freq_iucn, &quot;%&quot;)), # color = &quot;white&quot;, # position = position_stack(vjust = 0.7), size=2.5, # show.legend = FALSE) %&gt;% + labs(x = &quot;&quot;, y = &quot;&quot;, title = paste(&quot;Distribution of non-marine protected areas by IUCN categories (%),&quot;, roi), subtitle = paste(&quot;Sample :&quot;, sum(data_cat_iucn$n_iucn), &quot;non-marine protected areas&quot;)) %&gt;% + scale_fill_brewer(name = &quot;Categories&quot;, palette = &quot;Dark2&quot;) %&gt;% + theme_void() pie_cat_iucn_en #Pie chart EXcluding non-referenced PAs ##French pie_cat_iucn_ref_fr = ggplot(data_cat_iucn_ref, aes(x=&quot;&quot;, y= freq_iucn, fill = iucn_des_fr)) %&gt;% + geom_bar(width = 1, stat = &quot;identity&quot;, color=&quot;white&quot;) %&gt;% + coord_polar(&quot;y&quot;, start=0) %&gt;% + geom_label_repel(aes(x=1.2, label = paste0(round(freq_iucn, 1), &quot;%&quot;)), color = &quot;white&quot;, position = position_stack(vjust = 0.55), size=2.5, show.legend = FALSE) %&gt;% # + geom_label(aes(x=1.4, label = paste0(freq_iucn, &quot;%&quot;)), # color = &quot;white&quot;, # position = position_stack(vjust = 0.7), size=2.5, # show.legend = FALSE) %&gt;% + labs(x = &quot;&quot;, y = &quot;&quot;, title = paste(&quot;Proportion d&#39;aires protégées non-marines par catégorie IUCN,&quot;, roi, &quot;\\nhors aires non répertoriées (%)&quot;), subtitle = paste(&quot;Echantillon :&quot;, sum(data_cat_iucn_ref$n_iucn), &quot;sur&quot;, sum(data_cat_iucn$n_iucn), &quot;aires protégées non-marines&quot;)) %&gt;% + scale_fill_brewer(name = &quot;Catégories&quot;, palette = &quot;Dark2&quot;) %&gt;% + theme_void() pie_cat_iucn_ref_fr ##English pie_cat_iucn_ref_en = ggplot(data_cat_iucn_ref, aes(x=&quot;&quot;, y= freq_iucn, fill = iucn_des_en)) %&gt;% + geom_bar(width = 1, stat = &quot;identity&quot;, color=&quot;white&quot;) %&gt;% + coord_polar(&quot;y&quot;, start=0) %&gt;% + geom_label_repel(aes(x=1.2, label = paste0(round(freq_iucn, 1), &quot;%&quot;)), color = &quot;white&quot;, position = position_stack(vjust = 0.55), size=2.5, show.legend = FALSE) %&gt;% # + geom_label(aes(x=1.4, label = paste0(freq_iucn, &quot;%&quot;)), # color = &quot;white&quot;, # position = position_stack(vjust = 0.7), size=2.5, # show.legend = FALSE) %&gt;% + labs(x = &quot;&quot;, y = &quot;&quot;, title = paste(&quot;Distribution of non-marine protected areas by IUCN categories,&quot;, roi, &quot;\\nexcluding not reported/categorized (%)&quot;), subtitle = paste(&quot;Sample :&quot;, sum(data_cat_iucn_ref$n_iucn), &quot;out of&quot;, sum(data_cat_iucn$n_iucn), &quot;non-marine protected areas&quot;)) %&gt;% + scale_fill_brewer(name = &quot;Categories&quot;, palette = &quot;Dark2&quot;) %&gt;% + theme_void() pie_cat_iucn_ref_en #Saving figures tmp = paste(tempdir(), &quot;fig&quot;, sep = &quot;/&quot;) ggsave(paste(tmp, &quot;hist_cat_iucn_fr.png&quot;, sep = &quot;/&quot;), plot = hist_cat_iucn_fr, device = &quot;png&quot;, height = 6, width = 9) ggsave(paste(tmp, &quot;hist_cat_iucn_en.png&quot;, sep = &quot;/&quot;), plot = hist_cat_iucn_en, device = &quot;png&quot;, height = 6, width = 9) ggsave(paste(tmp, &quot;hist_cat_iucn_ref_fr.png&quot;, sep = &quot;/&quot;), plot = hist_cat_iucn_ref_fr, device = &quot;png&quot;, height = 6, width = 9) ggsave(paste(tmp, &quot;hist_cat_iucn_ref_en.png&quot;, sep = &quot;/&quot;), plot = hist_cat_iucn_ref_en, device = &quot;png&quot;, height = 6, width = 9) ggsave(paste(tmp, &quot;pie_cat_iucn_fr.png&quot;, sep = &quot;/&quot;), plot = pie_cat_iucn_fr, device = &quot;png&quot;, height = 6, width = 9) ggsave(paste(tmp, &quot;pie_cat_iucn_en.png&quot;, sep = &quot;/&quot;), plot = pie_cat_iucn_en, device = &quot;png&quot;, height = 6, width = 9) ggsave(paste(tmp, &quot;pie_cat_iucn_ref_fr.png&quot;, sep = &quot;/&quot;), plot = pie_cat_iucn_ref_fr, device = &quot;png&quot;, height = 6, width = 9) ggsave(paste(tmp, &quot;pie_cat_iucn_ref_en.png&quot;, sep = &quot;/&quot;), plot = pie_cat_iucn_ref_en, device = &quot;png&quot;, height = 6, width = 9) print(xtable(tbl_cat_iucn_fr, type = &quot;latex&quot;), file = paste(tmp, &quot;tbl_cat_iucn_fr.tex&quot;, sep = &quot;/&quot;)) print(xtable(tbl_cat_iucn_en, type = &quot;latex&quot;), file = paste(tmp, &quot;tbl_cat_iucn_en.tex&quot;, sep = &quot;/&quot;)) print(xtable(tbl_cat_iucn_ref_fr, type = &quot;latex&quot;), file = paste(tmp, &quot;tbl_cat_iucn_ref_fr.tex&quot;, sep = &quot;/&quot;)) print(xtable(tbl_cat_iucn_ref_en, type = &quot;latex&quot;), file = paste(tmp, &quot;tbl_cat_iucn_ref_en.tex&quot;, sep = &quot;/&quot;)) #Export to S3 storage ##List of files to save in the temp folder files &lt;- list.files(tmp, full.names = TRUE) ##Add each file in the bucket (same foler for every file in the temp) for(f in files) { cat(&quot;Uploading file&quot;, paste0(&quot;&#39;&quot;, f, &quot;&#39;&quot;), &quot;\\n&quot;) aws.s3::put_object(file = f, bucket = paste(&quot;projet-afd-eva-ap/descriptive_stats/IUCN&quot;, roi, &quot;no_marine&quot;, sep = &quot;/&quot;), region = &quot;&quot;, show_progress = TRUE) } #Erase the files in the temp directory do.call(file.remove, list(list.files(tmp, full.names = TRUE))) 2.3.1.4 IUCN categories by countries and regions (world, all) For each country/region, the percentage of PAs in the different IUCN categories. #Build the distribution of IUCN categories at country level ... data_iucn_ctry_en = table(data_stat_nodupl$iucn_des_en, data_stat_nodupl$iso3) %&gt;% #Create a table with all iucn categories for each country, and compute the frequencies in percent prop.table(2) %&gt;% as.data.frame() %&gt;% mutate(Freq = round(Freq, 3)*100) %&gt;% pivot_wider(names_from = Var2, values_from = Freq) %&gt;% rename(&quot;iucn_des_en&quot; = &quot;Var1&quot;) #... and regional level data_iucn_reg_en = table(data_stat_nodupl$iucn_des_en, data_stat_nodupl$region_afd) %&gt;% #Create a table with all iucn categories for each country, and compute the frequencies in percent prop.table(2) %&gt;% as.data.frame() %&gt;% mutate(Freq = round(Freq, 3)*100) %&gt;% pivot_wider(names_from = Var2, values_from = Freq) %&gt;% rename(&quot;iucn_des_en&quot; = &quot;Var1&quot;) #Saving figures tmp = paste(tempdir(), &quot;fig&quot;, sep = &quot;/&quot;) print(xtable(data_iucn_ctry_en, type = &quot;latex&quot;), file = paste(tmp, &quot;tbl_iucn_ctry_en.tex&quot;, sep = &quot;/&quot;)) print(xtable(data_iucn_reg_en, type = &quot;latex&quot;), file = paste(tmp, &quot;tbl_iucn_reg_en.tex&quot;, sep = &quot;/&quot;)) #Export to S3 storage ##List of files to save in the temp folder files &lt;- list.files(tmp, full.names = TRUE) ##Add each file in the bucket (same foler for every file in the temp) for(f in files) { cat(&quot;Uploading file&quot;, paste0(&quot;&#39;&quot;, f, &quot;&#39;&quot;), &quot;\\n&quot;) aws.s3::put_object(file = f, bucket = &quot;projet-afd-eva-ap/descriptive_stats/IUCN/world/all&quot;, region = &quot;&quot;, show_progress = TRUE) } #Erase the files in the temp directory do.call(file.remove, list(list.files(tmp, full.names = TRUE))) 2.3.2 Ecosystems (excluding non-referenced PAs) The percentage of PAs in the ecosystem categories of WDPA : terrestrial, coastal and marine. A terrestrial PA has less than 10% of its area covered by sea or ocean, a marine one more than 90% and coastal PAs are in between. This definition is taken from the WDPA. 2.3.2.1 Proportion of PAs by marine or terrestrial areas (world) All PAs in the world. #Build datasets data_eco = data_stat_nodupl %&gt;% #subset non-referencded PAs (have NA ecosysteme) subset(is.na(marine) == FALSE) %&gt;% mutate(marine = as.factor(marine)) data_eco$ecosyst_en = fct_recode(data_eco$marine, &quot;Terrestrial&quot;=&quot;0&quot;, &quot;Coastal&quot;=&quot;1&quot;, &quot;Marine&quot;=&quot;2&quot;) data_eco$ecosyst_fr = fct_recode(data_eco$marine, &quot;Terrestre&quot;=&quot;0&quot;, &quot;Côtier&quot;=&quot;1&quot;, &quot;Marin&quot;=&quot;2&quot;) data_eco_hist = data_eco %&gt;% group_by(ecosyst_en, ecosyst_fr) %&gt;% summarize(n = n(), freq = round(n/nrow(data_eco), 2)*100) %&gt;% ungroup() #Define tables tbl_eco_fr = data_eco_hist %&gt;% select(c(ecosyst_fr, n, freq)) %&gt;% rename(&quot;Ecosystème&quot; = &quot;ecosyst_fr&quot;, &quot;Nombre d&#39;AP&quot; = &quot;n&quot;, &quot;Proportion d&#39;AP(%)&quot; = &quot;freq&quot;) tbl_eco_en = data_eco_hist %&gt;% select(c(ecosyst_en, n, freq)) %&gt;% rename(&quot;Ecosystem&quot; = &quot;ecosyst_en&quot;, &quot;Number of PAs&quot; = &quot;n&quot;, &quot;Share of PAs(%)&quot; = &quot;freq&quot;) #Histogram in share (in French) hist_eco_shr_fr = ggplot(data_eco_hist, aes(x = ecosyst_fr, y = freq, fill = ecosyst_fr)) %&gt;% + geom_bar(width = 0.50, fill= &quot;#3182BD&quot;, stat=&quot;identity&quot;) %&gt;% + geom_text(aes(label = round(n, 1), y = freq), vjust = -0.1, color=&quot;black&quot;, size=3.5) %&gt;% + labs(title = &quot;Proportion d&#39;aires protégées par type d&#39;écosystème \\n(hors AP non-référencées)&quot;, subtitle = paste(&quot;Echantillon :&quot;, sum(data_eco_hist$n), &quot;sur&quot;, nrow(data_stat_nodupl), &quot;aires protégées. Nombre d&#39;aires indiqué sur les barres.&quot;), x = &quot;Type d&#39;écosystème&quot;, y = &quot;Proportion d&#39;aires protégées(%)&quot;) %&gt;% + theme(legend.position = &quot;bottom&quot;, legend.key = element_rect(fill = &quot;white&quot;), plot.title = element_text(size = 14, face = &quot;bold&quot;), axis.text.x = element_text(angle = 0,size=10, hjust = .5, vjust = .6), axis.title.x = element_text(margin = margin(t = 10)), panel.background = element_rect(fill = &#39;white&#39;, colour = &#39;white&#39;, linewidth = 0.5, linetype = &#39;solid&#39;), panel.grid.major = element_line(colour = &#39;grey90&#39;, linetype = &#39;solid&#39;), panel.grid.minor = element_line(colour = &#39;grey90&#39;, linetype = &#39;solid&#39;), plot.caption = element_text(color = &#39;grey50&#39;, size = 8.5, face = &#39;plain&#39;)) hist_eco_shr_fr # #Histogram in share (in English) hist_eco_shr_en = ggplot(data_eco_hist, aes(x = ecosyst_en, y = freq, fill = ecosyst_en)) %&gt;% + geom_bar(width = 0.50, fill= &quot;#3182BD&quot;, stat=&quot;identity&quot;) %&gt;% + geom_text(aes(label = round(n, 1), y = freq), vjust = -0.1, color=&quot;black&quot;, size=3.5) %&gt;% + labs(title = &quot;Proportion of protected areas by ecosystem type \\n(excluding not referenced PAs)&quot;, subtitle = paste(&quot;Sample :&quot;, sum(data_eco_hist$n), &quot;out of&quot;, nrow(data_stat_nodupl), &quot;protected areas. Number of areas indicated above.&quot;), x = &quot;Ecosystem type&quot;, y = &quot;Proportion of protected areas(%)&quot;) %&gt;% + theme(legend.position = &quot;bottom&quot;, legend.key = element_rect(fill = &quot;white&quot;), plot.title = element_text(size = 14, face = &quot;bold&quot;), axis.text.x = element_text(angle = 0,size=10, hjust = .5, vjust = .6), axis.title.x = element_text(margin = margin(t = 10)), panel.background = element_rect(fill = &#39;white&#39;, colour = &#39;white&#39;, linewidth = 0.5, linetype = &#39;solid&#39;), panel.grid.major = element_line(colour = &#39;grey90&#39;, linetype = &#39;solid&#39;), panel.grid.minor = element_line(colour = &#39;grey90&#39;, linetype = &#39;solid&#39;), plot.caption = element_text(color = &#39;grey50&#39;, size = 8.5, face = &#39;plain&#39;)) #hist_eco_shr_en #Histogram in number (in French) hist_eco_n_fr = ggplot(data_eco_hist, aes(x = ecosyst_fr, y = n, fill = ecosyst_fr)) %&gt;% + geom_bar(width = 0.50, fill= &quot;#3182BD&quot;, stat=&quot;identity&quot;) %&gt;% + labs(title = &quot;Proportion d&#39;aires protégées par type d&#39;écosystème \\n(hors AP non-référencées)&quot;, subtitle = paste(&quot;Echantillon :&quot;, sum(data_eco_hist$n), &quot;sur&quot;, nrow(data_stat_nodupl), &quot;aires protégées&quot;), x = &quot;Type d&#39;écosystème&quot;, y = &quot;# d&#39;aires protégées&quot;) %&gt;% + theme(legend.position = &quot;bottom&quot;, legend.key = element_rect(fill = &quot;white&quot;), plot.title = element_text(size = 14, face = &quot;bold&quot;), axis.text.x = element_text(angle = 0,size=10, hjust = .5, vjust = .6), axis.title.x = element_text(margin = margin(t = 10)), panel.background = element_rect(fill = &#39;white&#39;, colour = &#39;white&#39;, linewidth = 0.5, linetype = &#39;solid&#39;), panel.grid.major = element_line(colour = &#39;grey90&#39;, linetype = &#39;solid&#39;), panel.grid.minor = element_line(colour = &#39;grey90&#39;, linetype = &#39;solid&#39;), plot.caption = element_text(color = &#39;grey50&#39;, size = 8.5, face = &#39;plain&#39;)) hist_eco_n_fr #Histogram in number (in English) hist_eco_n_en = ggplot(data_eco_hist, aes(x = ecosyst_en, y = n, fill = ecosyst_en)) %&gt;% + geom_bar(width = 0.50, fill= &quot;#3182BD&quot;, stat=&quot;identity&quot;) %&gt;% + labs(title = &quot;Proportion of protected areas by ecosystem type \\n(excluding not referenced PAs)&quot;, subtitle = paste(&quot;Sample :&quot;, sum(data_eco_hist$n), &quot;out of&quot;, nrow(data_stat_nodupl), &quot;protected areas&quot;), x = &quot;Ecosystem type&quot;, y = &quot;# of protected areas&quot;) %&gt;% + theme(legend.position = &quot;bottom&quot;, legend.key = element_rect(fill = &quot;white&quot;), plot.title = element_text(size = 14, face = &quot;bold&quot;), axis.text.x = element_text(angle = 0,size=10, hjust = .5, vjust = .6), axis.title.x = element_text(margin = margin(t = 10)), panel.background = element_rect(fill = &#39;white&#39;, colour = &#39;white&#39;, linewidth = 0.5, linetype = &#39;solid&#39;), panel.grid.major = element_line(colour = &#39;grey90&#39;, linetype = &#39;solid&#39;), panel.grid.minor = element_line(colour = &#39;grey90&#39;, linetype = &#39;solid&#39;), plot.caption = element_text(color = &#39;grey50&#39;, size = 8.5, face = &#39;plain&#39;)) #hist_eco_n_en #Pie chart (in French) pie_eco_fr = ggplot(data_eco_hist, aes(x = &quot;&quot;, y = freq, fill = ecosyst_fr)) %&gt;% + geom_bar(width = 1, stat = &quot;identity&quot;,color=&quot;white&quot;) %&gt;% + geom_label(aes(x=1.3, label = paste0(freq, &quot;%&quot;)), color = &quot;black&quot;, position = position_stack(vjust = 0.55), size=2.5, show.legend = FALSE) %&gt;% + coord_polar(&quot;y&quot;, start=0) %&gt;% + labs(title = &quot;Proportion d&#39;aires protégées par type d&#39;écosystème \\n(hors AP non-référencées)&quot;, subtitle = paste(&quot;Echantillon :&quot;, sum(data_eco_hist$n), &quot;sur&quot;, nrow(data_stat_nodupl), &quot;aires protégées&quot;), x = &quot;Type d&#39;écosystème&quot;, y = &quot;Proportion d&#39;aires protégées&quot;) %&gt;% + scale_fill_brewer(name = &quot;Ecosystème&quot;, palette=&quot;Paired&quot;) %&gt;% + theme_void() pie_eco_fr #Histogram in number (in English) pie_eco_en = ggplot(data_eco_hist, aes(x = &quot;&quot;, y = n, fill = ecosyst_en)) %&gt;% + geom_bar(width = 1, stat = &quot;identity&quot;,color=&quot;white&quot;) %&gt;% + geom_label(aes(x=1.3, label = paste0(freq, &quot;%&quot;)), color = &quot;black&quot;, position = position_stack(vjust = 0.55), size=2.5, show.legend = FALSE) %&gt;% + coord_polar(&quot;y&quot;, start=0) %&gt;% + labs(title = &quot;Proportion of protected areas by ecosystem type \\n(excluding not referenced PAs)&quot;, subtitle = paste(&quot;Sample :&quot;, sum(data_eco_hist$n), &quot;out of&quot;, nrow(data_stat_nodupl), &quot;protected areas&quot;), x = &quot;Ecosystem type&quot;, y = &quot;Proportion of protected areas&quot;) %&gt;% + scale_fill_brewer(name = &quot;Ecosystem&quot;, palette=&quot;Paired&quot;) %&gt;% + theme_void() pie_eco_en #Saving figures tmp = paste(tempdir(), &quot;fig&quot;, sep = &quot;/&quot;) ggsave(paste(tmp, &quot;hist_eco_shr_fr.png&quot;, sep = &quot;/&quot;), plot = hist_eco_shr_fr, device = &quot;png&quot;, height = 6, width = 9) ggsave(paste(tmp, &quot;hist_eco_shr_en.png&quot;, sep = &quot;/&quot;), plot = hist_eco_shr_en, device = &quot;png&quot;, height = 6, width = 9) ggsave(paste(tmp, &quot;hist_eco_n_fr.png&quot;, sep = &quot;/&quot;), plot = hist_eco_n_fr, device = &quot;png&quot;, height = 6, width = 9) ggsave(paste(tmp, &quot;hist_eco_n_en.png&quot;, sep = &quot;/&quot;), plot = hist_eco_n_en, device = &quot;png&quot;, height = 6, width = 9) ggsave(paste(tmp, &quot;pie_eco_fr.png&quot;, sep = &quot;/&quot;), plot = pie_eco_fr, device = &quot;png&quot;, height = 6, width = 9) ggsave(paste(tmp, &quot;pie_eco_en.png&quot;, sep = &quot;/&quot;), plot = pie_eco_en, device = &quot;png&quot;, height = 6, width = 9) print(xtable(tbl_eco_fr, type = &quot;latex&quot;), file = paste(tmp, &quot;tbl_ecosyst_fr.tex&quot;, sep = &quot;/&quot;)) print(xtable(tbl_eco_en, type = &quot;latex&quot;), file = paste(tmp, &quot;tbl_ecosyst_en.tex&quot;, sep = &quot;/&quot;)) #Export to S3 storage ##List of files to save in the temp folder files &lt;- list.files(tmp, full.names = TRUE) ##Add each file in the bucket (same foler for every file in the temp) count = 0 for(f in files) { count = count+1 cat(&quot;Uploading file&quot;, paste0(count, &quot;/&quot;, length(files), &quot; &#39;&quot;, f, &quot;&#39;&quot;), &quot;\\n&quot;) aws.s3::put_object(file = f, bucket = &quot;projet-afd-eva-ap/descriptive_stats/ecosysteme/world&quot;, region = &quot;&quot;, show_progress = TRUE) } #Erase the files in the temp directory do.call(file.remove, list(list.files(tmp, full.names = TRUE))) 2.3.2.2 Proportion of PAs by marine or terrestrial areas (region) PAs in a given region to specify. #Define the region of interest where the stats are performed roi = &quot;Africa&quot; #Build datasets data_eco = data_stat_nodupl %&gt;% #subset non-referencded PAs (have NA ecosysteme) subset(is.na(marine) == FALSE &amp; region == roi) %&gt;% mutate(marine = as.factor(marine)) data_eco$ecosyst_en = fct_recode(data_eco$marine, &quot;Terrestrial&quot;=&quot;0&quot;, &quot;Coastal&quot;=&quot;1&quot;, &quot;Marine&quot;=&quot;2&quot;) data_eco$ecosyst_fr = fct_recode(data_eco$marine, &quot;Terrestre&quot;=&quot;0&quot;, &quot;Côtier&quot;=&quot;1&quot;, &quot;Marin&quot;=&quot;2&quot;) data_eco_hist = data_eco %&gt;% group_by(ecosyst_en, ecosyst_fr) %&gt;% summarize(n = n(), freq = round(n/nrow(data_eco), 2)*100) %&gt;% ungroup() tbl_eco_fr = data_eco_hist %&gt;% select(c(ecosyst_fr, n, freq)) %&gt;% rename(&quot;Ecosystème&quot; = &quot;ecosyst_fr&quot;, &quot;Nombre d&#39;AP&quot; = &quot;n&quot;, &quot;Proportion d&#39;AP(%)&quot; = &quot;freq&quot;) tbl_eco_en = data_eco_hist %&gt;% select(c(ecosyst_en, n, freq)) %&gt;% rename(&quot;Ecosystem&quot; = &quot;ecosyst_en&quot;, &quot;Number of PAs&quot; = &quot;n&quot;, &quot;Share of PAs(%)&quot; = &quot;freq&quot;) #Histogram in share (in French) hist_eco_shr_fr = ggplot(data_eco_hist, aes(x = ecosyst_fr, y = freq, fill = ecosyst_fr)) %&gt;% + geom_bar(width = 0.50, fill= &quot;#3182BD&quot;, stat=&quot;identity&quot;) %&gt;% + geom_text(aes(label = round(n, 1), y = freq), vjust = -0.1, color=&quot;black&quot;, size=3.5) %&gt;% + labs(title = paste(&quot;Proportion d&#39;aires protégées par type d&#39;écosystème,&quot;, roi, &quot;\\n(hors AP non-référencées)&quot;), subtitle = paste(&quot;Echantillon :&quot;, sum(data_eco_hist$n), &quot;sur&quot;, nrow(subset(data_stat_nodupl, region == roi)), &quot;aires protégées. Nombre d&#39;aires indiqué sur les barres.&quot;), x = &quot;Type d&#39;écosystème&quot;, y = &quot;Proportion d&#39;aires protégées(%)&quot;) %&gt;% + theme(legend.position = &quot;bottom&quot;, legend.key = element_rect(fill = &quot;white&quot;), plot.title = element_text(size = 14, face = &quot;bold&quot;), axis.text.x = element_text(angle = 0,size=10, hjust = .5, vjust = .6), axis.title.x = element_text(margin = margin(t = 10)), panel.background = element_rect(fill = &#39;white&#39;, colour = &#39;white&#39;, linewidth = 0.5, linetype = &#39;solid&#39;), panel.grid.major = element_line(colour = &#39;grey90&#39;, linetype = &#39;solid&#39;), panel.grid.minor = element_line(colour = &#39;grey90&#39;, linetype = &#39;solid&#39;), plot.caption = element_text(color = &#39;grey50&#39;, size = 8.5, face = &#39;plain&#39;)) hist_eco_shr_fr # #Histogram in share (in English) hist_eco_shr_en = ggplot(data_eco_hist, aes(x = ecosyst_en, y = freq, fill = ecosyst_en)) %&gt;% + geom_bar(width = 0.50, fill= &quot;#3182BD&quot;, stat=&quot;identity&quot;) %&gt;% + geom_text(aes(label = round(n, 1), y = freq), vjust = -0.1, color=&quot;black&quot;, size=3.5) %&gt;% + labs(title = paste(&quot;Proportion of protected areas by ecosystem type,&quot;, roi, &quot;\\n(excluding not referenced PAs)&quot;), subtitle = paste(&quot;Sample :&quot;, sum(data_eco_hist$n), &quot;out of&quot;, nrow(subset(data_stat_nodupl, region == roi)), &quot;protected areas. Number of areas indicated above.&quot;), x = &quot;Ecosystem type&quot;, y = &quot;Proportion of protected areas(%)&quot;) %&gt;% + theme(legend.position = &quot;bottom&quot;, legend.key = element_rect(fill = &quot;white&quot;), plot.title = element_text(size = 14, face = &quot;bold&quot;), axis.text.x = element_text(angle = 0,size=10, hjust = .5, vjust = .6), axis.title.x = element_text(margin = margin(t = 10)), panel.background = element_rect(fill = &#39;white&#39;, colour = &#39;white&#39;, linewidth = 0.5, linetype = &#39;solid&#39;), panel.grid.major = element_line(colour = &#39;grey90&#39;, linetype = &#39;solid&#39;), panel.grid.minor = element_line(colour = &#39;grey90&#39;, linetype = &#39;solid&#39;), plot.caption = element_text(color = &#39;grey50&#39;, size = 8.5, face = &#39;plain&#39;)) hist_eco_shr_en #Histogram in number (in French) hist_eco_n_fr = ggplot(data_eco_hist, aes(x = ecosyst_fr, y = n, fill = ecosyst_fr)) %&gt;% + geom_bar(width = 0.50, fill= &quot;#3182BD&quot;, stat=&quot;identity&quot;) %&gt;% + labs(title = paste(&quot;Proportion d&#39;aires protégées par type d&#39;écosystème,&quot;, roi, &quot;\\n(hors AP non-référencées)&quot;), subtitle = paste(&quot;Echantillon :&quot;, sum(data_eco_hist$n), &quot;sur&quot;, nrow(subset(data_stat_nodupl, region == roi)), &quot;aires protégées&quot;), x = &quot;Type d&#39;écosystème&quot;, y = &quot;# d&#39;aires protégées&quot;) %&gt;% + theme(legend.position = &quot;bottom&quot;, legend.key = element_rect(fill = &quot;white&quot;), plot.title = element_text(size = 14, face = &quot;bold&quot;), axis.text.x = element_text(angle = 0,size=10, hjust = .5, vjust = .6), axis.title.x = element_text(margin = margin(t = 10)), panel.background = element_rect(fill = &#39;white&#39;, colour = &#39;white&#39;, linewidth = 0.5, linetype = &#39;solid&#39;), panel.grid.major = element_line(colour = &#39;grey90&#39;, linetype = &#39;solid&#39;), panel.grid.minor = element_line(colour = &#39;grey90&#39;, linetype = &#39;solid&#39;), plot.caption = element_text(color = &#39;grey50&#39;, size = 8.5, face = &#39;plain&#39;)) hist_eco_n_fr #Histogram in number (in English) hist_eco_n_en = ggplot(data_eco_hist, aes(x = ecosyst_en, y = n, fill = ecosyst_en)) %&gt;% + geom_bar(width = 0.50, fill= &quot;#3182BD&quot;, stat=&quot;identity&quot;) %&gt;% + labs(title = paste(&quot;Proportion of protected areas by ecosystem type,&quot;, roi, &quot;\\n(excluding not referenced PAs)&quot;), subtitle = paste(&quot;Sample :&quot;, sum(data_eco_hist$n), &quot;out of&quot;, nrow(subset(data_stat_nodupl, region == roi)), &quot;protected areas&quot;), x = &quot;Ecosystem type&quot;, y = &quot;# of protected areas&quot;) %&gt;% + theme(legend.position = &quot;bottom&quot;, legend.key = element_rect(fill = &quot;white&quot;), plot.title = element_text(size = 14, face = &quot;bold&quot;), axis.text.x = element_text(angle = 0,size=10, hjust = .5, vjust = .6), axis.title.x = element_text(margin = margin(t = 10)), panel.background = element_rect(fill = &#39;white&#39;, colour = &#39;white&#39;, linewidth = 0.5, linetype = &#39;solid&#39;), panel.grid.major = element_line(colour = &#39;grey90&#39;, linetype = &#39;solid&#39;), panel.grid.minor = element_line(colour = &#39;grey90&#39;, linetype = &#39;solid&#39;), plot.caption = element_text(color = &#39;grey50&#39;, size = 8.5, face = &#39;plain&#39;)) hist_eco_n_en #Pie chart (in French) pie_eco_fr = ggplot(data_eco_hist, aes(x = &quot;&quot;, y = freq, fill = ecosyst_fr)) %&gt;% + geom_bar(width = 1, stat = &quot;identity&quot;,color=&quot;white&quot;) %&gt;% + geom_label(aes(x=1.3, label = paste0(freq, &quot;%&quot;)), color = &quot;black&quot;, position = position_stack(vjust = 0.55), size=2.5, show.legend = FALSE) %&gt;% + coord_polar(&quot;y&quot;, start=0) %&gt;% + labs(title = paste(&quot;Proportion d&#39;aires protégées par type d&#39;écosystème,&quot;, roi, &quot;\\n(hors AP non-référencées)&quot;), subtitle = paste(&quot;Echantillon :&quot;, sum(data_eco_hist$n), &quot;sur&quot;, nrow(subset(data_stat_nodupl, region == roi)), &quot;aires protégées&quot;), x = &quot;Type d&#39;écosystème&quot;, y = &quot;Proportion d&#39;aires protégées&quot;) %&gt;% + scale_fill_brewer(name = &quot;Ecosystème&quot;, palette=&quot;Paired&quot;) %&gt;% + theme_void() pie_eco_fr #Histogram in number (in English) pie_eco_en = ggplot(data_eco_hist, aes(x = &quot;&quot;, y = n, fill = ecosyst_en)) %&gt;% + geom_bar(width = 1, stat = &quot;identity&quot;,color=&quot;white&quot;) %&gt;% + geom_label(aes(x=1.3, label = paste0(freq, &quot;%&quot;)), color = &quot;black&quot;, position = position_stack(vjust = 0.55), size=2.5, show.legend = FALSE) %&gt;% + coord_polar(&quot;y&quot;, start=0) %&gt;% + labs(title = paste(&quot;Proportion of protected areas by ecosystem type,&quot;, roi, &quot;\\n(excluding not referenced PAs)&quot;), subtitle = paste(&quot;Sample :&quot;, sum(data_eco_hist$n), &quot;out of&quot;, nrow(subset(data_stat_nodupl, region == roi)), &quot;protected areas&quot;), x = &quot;Ecosystem type&quot;, y = &quot;Proportion of protected areas&quot;) %&gt;% + scale_fill_brewer(name = &quot;Ecosystem&quot;, palette=&quot;Paired&quot;) %&gt;% + theme_void() pie_eco_en #Saving figures tmp = paste(tempdir(), &quot;fig&quot;, sep = &quot;/&quot;) ggsave(paste(tmp, paste0(&quot;hist_eco_shr_&quot;, roi, &quot;_fr.png&quot;), sep = &quot;/&quot;), plot = hist_eco_shr_fr, device = &quot;png&quot;, height = 6, width = 9) ggsave(paste(tmp, paste0(&quot;hist_eco_shr_&quot;, roi, &quot;_en.png&quot;), sep = &quot;/&quot;), plot = hist_eco_shr_en, device = &quot;png&quot;, height = 6, width = 9) ggsave(paste(tmp, paste0(&quot;hist_eco_n_&quot;, roi, &quot;_fr.png&quot;), sep = &quot;/&quot;), plot = hist_eco_n_fr, device = &quot;png&quot;, height = 6, width = 9) ggsave(paste(tmp, paste0(&quot;hist_eco_n_&quot;, roi, &quot;_en.png&quot;), sep = &quot;/&quot;), plot = hist_eco_n_en, device = &quot;png&quot;, height = 6, width = 9) ggsave(paste(tmp, paste0(&quot;pie_eco_&quot;, roi, &quot;_fr.png&quot;), sep = &quot;/&quot;), plot = pie_eco_fr, device = &quot;png&quot;, height = 6, width = 9) ggsave(paste(tmp, paste0(&quot;pie_eco_&quot;, roi, &quot;_en.png&quot;), sep = &quot;/&quot;), plot = pie_eco_en, device = &quot;png&quot;, height = 6, width = 9) print(xtable(tbl_eco_fr, type = &quot;latex&quot;), file = paste(tmp, paste0(&quot;tbl_ecosyst_&quot;, roi, &quot;_fr.tex&quot;), sep = &quot;/&quot;)) print(xtable(tbl_eco_en, type = &quot;latex&quot;), file = paste(tmp, paste0(&quot;tbl_ecosyst_&quot;, roi, &quot;_en.tex&quot;), sep = &quot;/&quot;)) #Export to S3 storage ##List of files to save in the temp folder files &lt;- list.files(tmp, full.names = TRUE) ##Add each file in the bucket (same foler for every file in the temp) count = 0 for(f in files) { count = count+1 cat(&quot;Uploading file&quot;, paste0(count, &quot;/&quot;, length(files), &quot; &#39;&quot;, f, &quot;&#39;&quot;), &quot;\\n&quot;) aws.s3::put_object(file = f, bucket = paste(&quot;projet-afd-eva-ap/descriptive_stats/ecosysteme&quot;, roi, sep = &quot;/&quot;), region = &quot;&quot;, show_progress = TRUE) } #Erase the files in the temp directory do.call(file.remove, list(list.files(tmp, full.names = TRUE))) 2.3.3 Distribution (# and surface) of PAs across countries and regions Number/share of PAs in the different countries/regions. 2.3.3.1 Statistics at country level (all) For all PAs in the world. #Surface and number of PAs by country data_distrib_ctry = data_stat_nodupl %&gt;% group_by(iso3, country_en, country_fr) %&gt;% summarize(n = n(), area_km2 = sum(area_km2, na.rm = TRUE)) %&gt;% ungroup() %&gt;% mutate(n_tot = sum(n, na.rm = TRUE), area_tot_km2 = sum(area_km2, na.rm = TRUE), freq_n = round(n/n_tot*100, 2), freq_area = round(area_km2/area_tot_km2*100, 2)) %&gt;% pivot_longer(cols = c(&quot;n&quot;, &quot;freq_n&quot;, &quot;area_km2&quot;, &quot;freq_area&quot;), names_to = &quot;metric&quot;) #Top targeted countries in terms of number/surface of PAs data_distrib_ctry_top_n = data_distrib_ctry %&gt;% filter(metric == &quot;freq_n&quot;) %&gt;% arrange(-value) %&gt;% slice(1:5) data_distrib_ctry_top_area = data_distrib_ctry %&gt;% filter(metric == &quot;freq_area&quot;) %&gt;% arrange(-value) %&gt;% slice(1:5) #Histogram in share (in French) for top countries ##Number of PAs hist_distrib_ctry_top_n_shr = ggplot(data_distrib_ctry_top_n, aes(x = reorder(country_en, -value), y = value, fill = value)) %&gt;% + geom_bar(width = 0.50, fill= &quot;#3182BD&quot;, stat=&quot;identity&quot;) %&gt;% # + geom_text(aes(label = paste(value, &quot;PAs&quot;), y = value), # vjust = -0.1, color=&quot;black&quot;, # size=3.5) %&gt;% + labs(title = &quot;Countries most targeted by AFD funded protected areas (#)&quot;, subtitle = paste(&quot;Sample :&quot;, sum(filter(data_distrib_ctry, metric == &quot;n&quot;)$value), &quot;protected areas covering&quot;, format(sum(filter(data_distrib_ctry, metric == &quot;area_km2&quot;)$value), digits = 2, scientific = TRUE), &quot;km²&quot;), x = &quot;&quot;, y = &quot;Share of protected areas (%)&quot;) %&gt;% + theme(legend.position = &quot;bottom&quot;, legend.key = element_rect(fill = &quot;white&quot;), plot.title = element_text(size = 14, face = &quot;bold&quot;), axis.text.x = element_text(angle = 0,size=10, hjust = .5, vjust = .6), axis.title.x = element_text(margin = margin(t = 10)), panel.background = element_rect(fill = &#39;white&#39;, colour = &#39;white&#39;, linewidth = 0.5, linetype = &#39;solid&#39;), panel.grid.major = element_line(colour = &#39;grey90&#39;, linetype = &#39;solid&#39;), panel.grid.minor = element_line(colour = &#39;grey90&#39;, linetype = &#39;solid&#39;), plot.caption = element_text(color = &#39;grey50&#39;, size = 8.5, face = &#39;plain&#39;)) hist_distrib_ctry_top_n_shr ##Area of PAs hist_distrib_ctry_top_area_shr = ggplot(data_distrib_ctry_top_area, aes(x = reorder(country_en, -value), y = value, fill = value)) %&gt;% + geom_bar(width = 0.50, fill= &quot;#3182BD&quot;, stat=&quot;identity&quot;) %&gt;% # + geom_text(aes(label = paste(value, &quot;PAs&quot;), y = value), # vjust = -0.1, color=&quot;black&quot;, # size=3.5) %&gt;% + labs(title = &quot;Countries most targeted by AFD funded protected areas (area)&quot;, subtitle = paste(&quot;Sample :&quot;, sum(filter(data_distrib_ctry, metric == &quot;n&quot;)$value), &quot;protected areas covering&quot;, format(sum(filter(data_distrib_ctry, metric == &quot;area_km2&quot;)$value), digits = 2, scientific = TRUE), &quot;km²&quot;), x = &quot;&quot;, y = &quot;Share of area funded (%)&quot;) %&gt;% + theme(legend.position = &quot;bottom&quot;, legend.key = element_rect(fill = &quot;white&quot;), plot.title = element_text(size = 14, face = &quot;bold&quot;), axis.text.x = element_text(angle = 0,size=10, hjust = .5, vjust = .6), axis.title.x = element_text(margin = margin(t = 10)), panel.background = element_rect(fill = &#39;white&#39;, colour = &#39;white&#39;, linewidth = 0.5, linetype = &#39;solid&#39;), panel.grid.major = element_line(colour = &#39;grey90&#39;, linetype = &#39;solid&#39;), panel.grid.minor = element_line(colour = &#39;grey90&#39;, linetype = &#39;solid&#39;), plot.caption = element_text(color = &#39;grey50&#39;, size = 8.5, face = &#39;plain&#39;)) hist_distrib_ctry_top_area_shr #Histogram for all countries #Histogram in number hist_distrib_ctry_n_shr = ggplot(filter(data_distrib_ctry, metric == &quot;freq_n&quot;), aes(x = reorder(iso3, -value), y = value, fill = iso3)) %&gt;% + geom_bar(width = 0.50, fill= &quot;#3182BD&quot;, stat=&quot;identity&quot;) %&gt;% # + geom_text(aes(label = n, y = n), # vjust = -0.1, color=&quot;black&quot;, # size=3) %&gt;% + labs(title = &quot;Distribution of protected areas by country (#)&quot;, subtitle = paste(&quot;Sample :&quot;, sum(filter(data_distrib_ctry, metric == &quot;n&quot;)$value), &quot;protected areas covering&quot;, format(sum(filter(data_distrib_ctry, metric == &quot;area_km2&quot;)$value), digits = 2, scientific = TRUE), &quot;km²&quot;), x = &quot;&quot;, y = &quot;Share of protected areas (%)&quot;) %&gt;% + theme(legend.position = &quot;bottom&quot;, legend.key = element_rect(fill = &quot;white&quot;), plot.title = element_text(size = 14, face = &quot;bold&quot;), axis.text.x = element_text(angle = 45,size=10, hjust = .5, vjust = .6), axis.title.x = element_text(margin = margin(t = 10)), panel.background = element_rect(fill = &#39;white&#39;, colour = &#39;white&#39;, linewidth = 0.5, linetype = &#39;solid&#39;), panel.grid.major = element_line(colour = &#39;grey90&#39;, linetype = &#39;solid&#39;), panel.grid.minor = element_line(colour = &#39;grey90&#39;, linetype = &#39;solid&#39;), plot.caption = element_text(color = &#39;grey50&#39;, size = 8.5, face = &#39;plain&#39;)) hist_distrib_ctry_n_shr # Histogram in surfaces hist_distrib_ctry_area_shr = ggplot(filter(data_distrib_ctry, metric == &quot;freq_area&quot;), aes(x = reorder(iso3, -value), y = value, fill = iso3)) %&gt;% + geom_bar(width = 0.50, fill= &quot;#3182BD&quot;, stat=&quot;identity&quot;) %&gt;% # + geom_text(aes(label = n, y = n), # vjust = -0.1, color=&quot;black&quot;, # size=3) %&gt;% + labs(title = &quot;Distribution of protected areas by country (area)&quot;, subtitle = paste(&quot;Sample :&quot;, sum(filter(data_distrib_ctry, metric == &quot;n&quot;)$value), &quot;protected areas covering&quot;, format(sum(filter(data_distrib_ctry, metric == &quot;area_km2&quot;)$value), digits = 2, scientific = TRUE), &quot;km²&quot;), x = &quot;&quot;, y = &quot;Share of area funded (%)&quot;) %&gt;% + theme(legend.position = &quot;bottom&quot;, legend.key = element_rect(fill = &quot;white&quot;), plot.title = element_text(size = 14, face = &quot;bold&quot;), axis.text.x = element_text(angle = 45,size=10, hjust = .5, vjust = .6), axis.title.x = element_text(margin = margin(t = 10)), panel.background = element_rect(fill = &#39;white&#39;, colour = &#39;white&#39;, linewidth = 0.5, linetype = &#39;solid&#39;), panel.grid.major = element_line(colour = &#39;grey90&#39;, linetype = &#39;solid&#39;), panel.grid.minor = element_line(colour = &#39;grey90&#39;, linetype = &#39;solid&#39;), plot.caption = element_text(color = &#39;grey50&#39;, size = 8.5, face = &#39;plain&#39;)) hist_distrib_ctry_area_shr ## Both hist_distrib_ctry_top_both_shr = ggplot(filter(data_distrib_ctry, metric %in% c(&quot;freq_n&quot;, &quot;freq_area&quot;)), aes(x = reorder(iso3, -value), y = value, fill = metric)) %&gt;% + geom_bar(position=&quot;dodge&quot;, stat=&quot;identity&quot;) %&gt;% # + geom_text(aes(label = paste(value, &quot;PAs&quot;), y = value), # vjust = -0.1, color=&quot;black&quot;, # size=3.5) %&gt;% + labs(title = &quot;Distribution of AFD funded protected areas by country&quot;, subtitle = paste(&quot;Sample :&quot;, sum(filter(data_distrib_ctry, metric == &quot;n&quot;)$value), &quot;protected areas covering&quot;, format(sum(filter(data_distrib_ctry, metric == &quot;area_km2&quot;)$value), digits = 2, scientific = TRUE), &quot;km²&quot;), x = &quot;&quot;, y = &quot;Share of protected areas (%)&quot;) %&gt;% + scale_fill_brewer(name = &quot;&quot;, labels = c(&quot;Area&quot;, &quot;Number&quot;), type = &quot;seq&quot;, palette = &quot;Blues&quot;) %&gt;% + theme(legend.position = &quot;bottom&quot;, legend.key = element_rect(fill = &quot;white&quot;), plot.title = element_text(size = 14, face = &quot;bold&quot;), axis.text.x = element_text(angle = 45,size=10, hjust = .5, vjust = .6), axis.title.x = element_text(margin = margin(t = 10)), panel.background = element_rect(fill = &#39;white&#39;, colour = &#39;white&#39;, linewidth = 0.5, linetype = &#39;solid&#39;), panel.grid.major = element_line(colour = &#39;grey90&#39;, linetype = &#39;solid&#39;), panel.grid.minor = element_line(colour = &#39;grey90&#39;, linetype = &#39;solid&#39;), plot.caption = element_text(color = &#39;grey50&#39;, size = 8.5, face = &#39;plain&#39;)) hist_distrib_ctry_top_both_shr #Saving figures tmp = paste(tempdir(), &quot;fig&quot;, sep = &quot;/&quot;) ggsave(paste(tmp, &quot;hist_distrib_ctry_top_n_shr.png&quot;, sep = &quot;/&quot;), plot = hist_distrib_ctry_top_n_shr, device = &quot;png&quot;, height = 6, width = 9) ggsave(paste(tmp, &quot;hist_distrib_ctry_top_area_shr.png&quot;, sep = &quot;/&quot;), plot = hist_distrib_ctry_top_area_shr, device = &quot;png&quot;, height = 6, width = 9) ggsave(paste(tmp, &quot;hist_distrib_ctry_n_shr.png&quot;, sep = &quot;/&quot;), plot = hist_distrib_ctry_n_shr, device = &quot;png&quot;, height = 6, width = 9) ggsave(paste(tmp, &quot;hist_distrib_ctry_area_shr.png&quot;, sep = &quot;/&quot;), plot = hist_distrib_ctry_area_shr, device = &quot;png&quot;, height = 6, width = 9) ggsave(paste(tmp, &quot;hist_distrib_ctry_top_both_shr.png&quot;, sep = &quot;/&quot;), plot = hist_distrib_ctry_top_both_shr, device = &quot;png&quot;, height = 6, width = 9) #Export to S3 storage ##List of files to save in the temp folder files &lt;- list.files(tmp, full.names = TRUE) ##Add each file in the bucket (same foler for every file in the temp) count = 0 for(f in files) { count = count+1 cat(&quot;Uploading file&quot;, paste0(count, &quot;/&quot;, length(files), &quot; &#39;&quot;, f, &quot;&#39;&quot;), &quot;\\n&quot;) aws.s3::put_object(file = f, bucket = &quot;projet-afd-eva-ap/descriptive_stats/distribution/world/all&quot;, region = &quot;&quot;, show_progress = TRUE) } #Erase the files in the temp directory do.call(file.remove, list(list.files(tmp, full.names = TRUE))) 2.3.3.2 Statistics at country level (non-marine) Non-marine PAs across the world. #Surface and number of PAs by country data_distrib_ctry = data_stat_nodupl %&gt;% filter(marine %in% c(0,1)) %&gt;% group_by(iso3, country_en, country_fr) %&gt;% summarize(n = n(), area_km2 = sum(area_km2, na.rm = TRUE)) %&gt;% ungroup() %&gt;% mutate(n_tot = sum(n, na.rm = TRUE), area_tot_km2 = sum(area_km2, na.rm = TRUE), freq_n = round(n/n_tot*100, 2), freq_area = round(area_km2/area_tot_km2*100, 2)) %&gt;% pivot_longer(cols = c(&quot;n&quot;, &quot;freq_n&quot;, &quot;area_km2&quot;, &quot;freq_area&quot;), names_to = &quot;metric&quot;) #Top targeted countries in terms of number/surface of PAs data_distrib_ctry_top_n = data_distrib_ctry %&gt;% filter(metric == &quot;freq_n&quot;) %&gt;% arrange(-value) %&gt;% slice(1:5) data_distrib_ctry_top_area = data_distrib_ctry %&gt;% filter(metric == &quot;freq_area&quot;) %&gt;% arrange(-value) %&gt;% slice(1:5) #Histogram in share (in French) for top countries ##Number of PAs hist_distrib_ctry_top_n_shr = ggplot(data_distrib_ctry_top_n, aes(x = reorder(country_en, -value), y = value, fill = value)) %&gt;% + geom_bar(width = 0.50, fill= &quot;#3182BD&quot;, stat=&quot;identity&quot;) %&gt;% # + geom_text(aes(label = paste(value, &quot;PAs&quot;), y = value), # vjust = -0.1, color=&quot;black&quot;, # size=3.5) %&gt;% + labs(title = &quot;Countries most targeted by AFD funded, non-marine protected areas (#)&quot;, subtitle = paste(&quot;Sample :&quot;, sum(filter(data_distrib_ctry, metric == &quot;n&quot;)$value), &quot;non-marine protected areas covering&quot;, format(sum(filter(data_distrib_ctry, metric == &quot;area_km2&quot;)$value), digits = 2, scientific = TRUE), &quot;km²&quot;), x = &quot;&quot;, y = &quot;Share of protected areas (%)&quot;) %&gt;% + theme(legend.position = &quot;bottom&quot;, legend.key = element_rect(fill = &quot;white&quot;), plot.title = element_text(size = 14, face = &quot;bold&quot;), axis.text.x = element_text(angle = 0,size=10, hjust = .5, vjust = .6), axis.title.x = element_text(margin = margin(t = 10)), panel.background = element_rect(fill = &#39;white&#39;, colour = &#39;white&#39;, linewidth = 0.5, linetype = &#39;solid&#39;), panel.grid.major = element_line(colour = &#39;grey90&#39;, linetype = &#39;solid&#39;), panel.grid.minor = element_line(colour = &#39;grey90&#39;, linetype = &#39;solid&#39;), plot.caption = element_text(color = &#39;grey50&#39;, size = 8.5, face = &#39;plain&#39;)) hist_distrib_ctry_top_n_shr ##Area of PAs hist_distrib_ctry_top_area_shr = ggplot(data_distrib_ctry_top_area, aes(x = reorder(country_en, -value), y = value, fill = value)) %&gt;% + geom_bar(width = 0.50, fill= &quot;#3182BD&quot;, stat=&quot;identity&quot;) %&gt;% # + geom_text(aes(label = paste(value, &quot;PAs&quot;), y = value), # vjust = -0.1, color=&quot;black&quot;, # size=3.5) %&gt;% + labs(title = &quot;Countries most targeted by AFD funded, non-marine protected areas (area)&quot;, subtitle = paste(&quot;Sample :&quot;, sum(filter(data_distrib_ctry, metric == &quot;n&quot;)$value), &quot;non-marine protected areas covering&quot;, format(sum(filter(data_distrib_ctry, metric == &quot;area_km2&quot;)$value), digits = 2, scientific = TRUE), &quot;km²&quot;), x = &quot;&quot;, y = &quot;Share of area funded (%)&quot;) %&gt;% + theme(legend.position = &quot;bottom&quot;, legend.key = element_rect(fill = &quot;white&quot;), plot.title = element_text(size = 14, face = &quot;bold&quot;), axis.text.x = element_text(angle = 0,size=10, hjust = .5, vjust = .6), axis.title.x = element_text(margin = margin(t = 10)), panel.background = element_rect(fill = &#39;white&#39;, colour = &#39;white&#39;, linewidth = 0.5, linetype = &#39;solid&#39;), panel.grid.major = element_line(colour = &#39;grey90&#39;, linetype = &#39;solid&#39;), panel.grid.minor = element_line(colour = &#39;grey90&#39;, linetype = &#39;solid&#39;), plot.caption = element_text(color = &#39;grey50&#39;, size = 8.5, face = &#39;plain&#39;)) hist_distrib_ctry_top_area_shr #Histogram for all countries #Histogram in number hist_distrib_ctry_n_shr = ggplot(filter(data_distrib_ctry, metric == &quot;freq_n&quot;), aes(x = reorder(iso3, -value), y = value, fill = iso3)) %&gt;% + geom_bar(width = 0.50, fill= &quot;#3182BD&quot;, stat=&quot;identity&quot;) %&gt;% # + geom_text(aes(label = n, y = n), # vjust = -0.1, color=&quot;black&quot;, # size=3) %&gt;% + labs(title = &quot;Distribution of AFD funded, non-marine protected areas by country (#)&quot;, subtitle = paste(&quot;Sample :&quot;, sum(filter(data_distrib_ctry, metric == &quot;n&quot;)$value), &quot;non-marine protected areas covering&quot;, format(sum(filter(data_distrib_ctry, metric == &quot;area_km2&quot;)$value), digits = 2, scientific = TRUE), &quot;km²&quot;), x = &quot;&quot;, y = &quot;Share of protected areas (%)&quot;) %&gt;% + theme(legend.position = &quot;bottom&quot;, legend.key = element_rect(fill = &quot;white&quot;), plot.title = element_text(size = 14, face = &quot;bold&quot;), axis.text.x = element_text(angle = 45,size=10, hjust = .5, vjust = .6), axis.title.x = element_text(margin = margin(t = 10)), panel.background = element_rect(fill = &#39;white&#39;, colour = &#39;white&#39;, linewidth = 0.5, linetype = &#39;solid&#39;), panel.grid.major = element_line(colour = &#39;grey90&#39;, linetype = &#39;solid&#39;), panel.grid.minor = element_line(colour = &#39;grey90&#39;, linetype = &#39;solid&#39;), plot.caption = element_text(color = &#39;grey50&#39;, size = 8.5, face = &#39;plain&#39;)) hist_distrib_ctry_n_shr # Histogram in surfaces hist_distrib_ctry_area_shr = ggplot(filter(data_distrib_ctry, metric == &quot;freq_area&quot;), aes(x = reorder(iso3, -value), y = value, fill = iso3)) %&gt;% + geom_bar(width = 0.50, fill= &quot;#3182BD&quot;, stat=&quot;identity&quot;) %&gt;% # + geom_text(aes(label = n, y = n), # vjust = -0.1, color=&quot;black&quot;, # size=3) %&gt;% + labs(title = &quot;Distribution of AFD funded, non-marine protected areas by country (area)&quot;, subtitle = paste(&quot;Sample :&quot;, sum(filter(data_distrib_ctry, metric == &quot;n&quot;)$value), &quot;non-marine protected areas covering&quot;, format(sum(filter(data_distrib_ctry, metric == &quot;area_km2&quot;)$value), digits = 2, scientific = TRUE), &quot;km²&quot;), x = &quot;Countries&quot;, y = &quot;Share of area funded (%)&quot;) %&gt;% + theme(legend.position = &quot;bottom&quot;, legend.key = element_rect(fill = &quot;white&quot;), plot.title = element_text(size = 14, face = &quot;bold&quot;), axis.text.x = element_text(angle = 45,size=10, hjust = .5, vjust = .6), axis.title.x = element_text(margin = margin(t = 10)), panel.background = element_rect(fill = &#39;white&#39;, colour = &#39;white&#39;, linewidth = 0.5, linetype = &#39;solid&#39;), panel.grid.major = element_line(colour = &#39;grey90&#39;, linetype = &#39;solid&#39;), panel.grid.minor = element_line(colour = &#39;grey90&#39;, linetype = &#39;solid&#39;), plot.caption = element_text(color = &#39;grey50&#39;, size = 8.5, face = &#39;plain&#39;)) hist_distrib_ctry_area_shr ## Both hist_distrib_ctry_top_both_shr = ggplot(filter(data_distrib_ctry, metric %in% c(&quot;freq_area&quot;, &quot;freq_n&quot;)), aes(x = reorder(iso3, -value), y = value, fill = metric)) %&gt;% + geom_bar(position=&quot;dodge&quot;, stat=&quot;identity&quot;) %&gt;% # + geom_text(aes(label = paste(value, &quot;PAs&quot;), y = value), # vjust = -0.1, color=&quot;black&quot;, # size=3.5) %&gt;% + labs(title = &quot;Distribution of AFD funded, non-marine protected areas by country&quot;, subtitle = paste(&quot;Sample :&quot;, sum(filter(data_distrib_ctry, metric == &quot;n&quot;)$value), &quot;non-marine protected areas covering&quot;, format(sum(filter(data_distrib_ctry, metric == &quot;area_km2&quot;)$value), digits = 2, scientific = TRUE), &quot;km²&quot;), x = &quot;&quot;, y = &quot;Share of protected areas (%)&quot;) %&gt;% + scale_fill_brewer(name = &quot;&quot;, labels = c(&quot;Area&quot;, &quot;Number&quot;), type = &quot;seq&quot;, palette = &quot;Blues&quot;) %&gt;% + theme(legend.position = &quot;bottom&quot;, legend.key = element_rect(fill = &quot;white&quot;), plot.title = element_text(size = 14, face = &quot;bold&quot;), axis.text.x = element_text(angle = 45,size=10, hjust = .5, vjust = .6), axis.title.x = element_text(margin = margin(t = 10)), panel.background = element_rect(fill = &#39;white&#39;, colour = &#39;white&#39;, linewidth = 0.5, linetype = &#39;solid&#39;), panel.grid.major = element_line(colour = &#39;grey90&#39;, linetype = &#39;solid&#39;), panel.grid.minor = element_line(colour = &#39;grey90&#39;, linetype = &#39;solid&#39;), plot.caption = element_text(color = &#39;grey50&#39;, size = 8.5, face = &#39;plain&#39;)) hist_distrib_ctry_top_both_shr #Saving figures tmp = paste(tempdir(), &quot;fig&quot;, sep = &quot;/&quot;) ggsave(paste(tmp, &quot;hist_distrib_ctry_top_n_shr.png&quot;, sep = &quot;/&quot;), plot = hist_distrib_ctry_top_n_shr, device = &quot;png&quot;, height = 6, width = 9) ggsave(paste(tmp, &quot;hist_distrib_ctry_top_area_shr.png&quot;, sep = &quot;/&quot;), plot = hist_distrib_ctry_top_area_shr, device = &quot;png&quot;, height = 6, width = 9) ggsave(paste(tmp, &quot;hist_distrib_ctry_n_shr.png&quot;, sep = &quot;/&quot;), plot = hist_distrib_ctry_top_n_shr, device = &quot;png&quot;, height = 6, width = 9) ggsave(paste(tmp, &quot;hist_distrib_ctry_area_shr.png&quot;, sep = &quot;/&quot;), plot = hist_distrib_ctry_top_area_shr, device = &quot;png&quot;, height = 6, width = 9) ggsave(paste(tmp, &quot;hist_distrib_ctry_top_both_shr.png&quot;, sep = &quot;/&quot;), plot = hist_distrib_ctry_top_both_shr, device = &quot;png&quot;, height = 6, width = 9) #Export to S3 storage ##List of files to save in the temp folder files &lt;- list.files(tmp, full.names = TRUE) ##Add each file in the bucket (same foler for every file in the temp) count = 0 for(f in files) { count = count+1 cat(&quot;Uploading file&quot;, paste0(count, &quot;/&quot;, length(files), &quot; &#39;&quot;, f, &quot;&#39;&quot;), &quot;\\n&quot;) aws.s3::put_object(file = f, bucket = &quot;projet-afd-eva-ap/descriptive_stats/distribution/world/no_marine&quot;, region = &quot;&quot;, show_progress = TRUE) } #Erase the files in the temp directory do.call(file.remove, list(list.files(tmp, full.names = TRUE))) 2.3.3.3 Statistics at country level (region, non-marine) Non-marine PAs in a given region. roi = &quot;Africa&quot; #Surface and number of PAs by country data_distrib_ctry = data_stat_nodupl %&gt;% filter(region == roi &amp; marine %in% c(0,1)) %&gt;% group_by(iso3, country_en, country_fr) %&gt;% summarize(n = n(), area_km2 = sum(area_km2, na.rm = TRUE)) %&gt;% ungroup() %&gt;% mutate(n_tot = sum(n, na.rm = TRUE), area_tot_km2 = sum(area_km2, na.rm = TRUE), freq_n = round(n/n_tot*100, 2), freq_area = round(area_km2/area_tot_km2*100, 2)) %&gt;% pivot_longer(cols = c(&quot;n&quot;, &quot;freq_n&quot;, &quot;area_km2&quot;, &quot;freq_area&quot;), names_to = &quot;metric&quot;) #Top targeted countries in terms of number/surface of PAs data_distrib_ctry_top_n = data_distrib_ctry %&gt;% filter(metric == &quot;freq_n&quot;) %&gt;% arrange(-value) %&gt;% slice(1:5) data_distrib_ctry_top_area = data_distrib_ctry %&gt;% filter(metric == &quot;freq_area&quot;) %&gt;% arrange(-value) %&gt;% slice(1:5) #Histogram in share (in French) for top countries ##Number of PAs hist_distrib_ctry_top_n_shr = ggplot(data_distrib_ctry_top_n, aes(x = reorder(country_en, -value), y = value, fill = value)) %&gt;% + geom_bar(width = 0.50, fill= &quot;#3182BD&quot;, stat=&quot;identity&quot;) %&gt;% # + geom_text(aes(label = paste(value, &quot;PAs&quot;), y = value), # vjust = -0.1, color=&quot;black&quot;, # size=3.5) %&gt;% + labs(title = paste0(&quot;Countries most targeted by AFD funded, non-marine protected areas (#) \\n&quot;, roi), subtitle = paste(&quot;Sample :&quot;, sum(filter(data_distrib_ctry, metric == &quot;n&quot;)$value), &quot;non-marine protected areas covering&quot;, format(sum(filter(data_distrib_ctry, metric == &quot;area_km2&quot;)$value), digits = 2, scientific = TRUE), &quot;km²&quot;), x = &quot;&quot;, y = &quot;Share of protected areas (%)&quot;) %&gt;% + theme(legend.position = &quot;bottom&quot;, legend.key = element_rect(fill = &quot;white&quot;), plot.title = element_text(size = 14, face = &quot;bold&quot;), axis.text.x = element_text(angle = 0,size=10, hjust = .5, vjust = .6), axis.title.x = element_text(margin = margin(t = 10)), panel.background = element_rect(fill = &#39;white&#39;, colour = &#39;white&#39;, linewidth = 0.5, linetype = &#39;solid&#39;), panel.grid.major = element_line(colour = &#39;grey90&#39;, linetype = &#39;solid&#39;), panel.grid.minor = element_line(colour = &#39;grey90&#39;, linetype = &#39;solid&#39;), plot.caption = element_text(color = &#39;grey50&#39;, size = 8.5, face = &#39;plain&#39;)) hist_distrib_ctry_top_n_shr ##Area of PAs hist_distrib_ctry_top_area_shr = ggplot(data_distrib_ctry_top_area, aes(x = reorder(country_en, -value), y = value, fill = value)) %&gt;% + geom_bar(width = 0.50, fill= &quot;#3182BD&quot;, stat=&quot;identity&quot;) %&gt;% # + geom_text(aes(label = paste(value, &quot;PAs&quot;), y = value), # vjust = -0.1, color=&quot;black&quot;, # size=3.5) %&gt;% + labs(title = paste0(&quot;Countries most targeted by AFD funded, non-marine protected areas (area)\\n&quot;, roi), subtitle = paste(&quot;Sample :&quot;, sum(filter(data_distrib_ctry, metric == &quot;n&quot;)$value), &quot;non-marine protected areas covering&quot;, format(sum(filter(data_distrib_ctry, metric == &quot;area_km2&quot;)$value), digits = 2, scientific = TRUE), &quot;km²&quot;), x = &quot;&quot;, y = &quot;Share of area funded (%)&quot;) %&gt;% + theme(legend.position = &quot;bottom&quot;, legend.key = element_rect(fill = &quot;white&quot;), plot.title = element_text(size = 14, face = &quot;bold&quot;), axis.text.x = element_text(angle = 0,size=10, hjust = .5, vjust = .6), axis.title.x = element_text(margin = margin(t = 10)), panel.background = element_rect(fill = &#39;white&#39;, colour = &#39;white&#39;, linewidth = 0.5, linetype = &#39;solid&#39;), panel.grid.major = element_line(colour = &#39;grey90&#39;, linetype = &#39;solid&#39;), panel.grid.minor = element_line(colour = &#39;grey90&#39;, linetype = &#39;solid&#39;), plot.caption = element_text(color = &#39;grey50&#39;, size = 8.5, face = &#39;plain&#39;)) hist_distrib_ctry_top_area_shr #Histogram for all countries #Histogram in number hist_distrib_ctry_n_shr = ggplot(filter(data_distrib_ctry, metric == &quot;freq_n&quot;), aes(x = reorder(iso3, -value), y = value, fill = iso3)) %&gt;% + geom_bar(width = 0.50, fill= &quot;#3182BD&quot;, stat=&quot;identity&quot;) %&gt;% # + geom_text(aes(label = n, y = n), # vjust = -0.1, color=&quot;black&quot;, # size=3) %&gt;% + labs(title = paste0(&quot;Distribution of AFD funded, non-marine protected areas by country (#)\\n&quot;, roi), subtitle = paste(&quot;Sample :&quot;, sum(filter(data_distrib_ctry, metric == &quot;n&quot;)$value), &quot;non-marine protected areas covering&quot;, format(sum(filter(data_distrib_ctry, metric == &quot;area_km2&quot;)$value), digits = 2, scientific = TRUE), &quot;km²&quot;), x = &quot;&quot;, y = &quot;Share of protected areas (%)&quot;) %&gt;% + theme(legend.position = &quot;bottom&quot;, legend.key = element_rect(fill = &quot;white&quot;), plot.title = element_text(size = 14, face = &quot;bold&quot;), axis.text.x = element_text(angle = 45,size=10, hjust = .5, vjust = .6), axis.title.x = element_text(margin = margin(t = 10)), panel.background = element_rect(fill = &#39;white&#39;, colour = &#39;white&#39;, linewidth = 0.5, linetype = &#39;solid&#39;), panel.grid.major = element_line(colour = &#39;grey90&#39;, linetype = &#39;solid&#39;), panel.grid.minor = element_line(colour = &#39;grey90&#39;, linetype = &#39;solid&#39;), plot.caption = element_text(color = &#39;grey50&#39;, size = 8.5, face = &#39;plain&#39;)) hist_distrib_ctry_n_shr # Histogram in surfaces hist_distrib_ctry_area_shr = ggplot(filter(data_distrib_ctry, metric == &quot;freq_area&quot;), aes(x = reorder(iso3, -value), y = value, fill = iso3)) %&gt;% + geom_bar(width = 0.50, fill= &quot;#3182BD&quot;, stat=&quot;identity&quot;) %&gt;% # + geom_text(aes(label = n, y = n), # vjust = -0.1, color=&quot;black&quot;, # size=3) %&gt;% + labs(title = paste0(&quot;Distribution of AFD funded, non-marine protected areas by country (area)\\n&quot;, roi), subtitle = paste(&quot;Sample :&quot;, sum(filter(data_distrib_ctry, metric == &quot;n&quot;)$value), &quot;non-marine protected areas covering&quot;, format(sum(filter(data_distrib_ctry, metric == &quot;area_km2&quot;)$value), digits = 2, scientific = TRUE), &quot;km²&quot;), x = &quot;&quot;, y = &quot;Share of area funded (%)&quot;) %&gt;% + theme(legend.position = &quot;bottom&quot;, legend.key = element_rect(fill = &quot;white&quot;), plot.title = element_text(size = 14, face = &quot;bold&quot;), axis.text.x = element_text(angle = 45,size=10, hjust = .5, vjust = .6), axis.title.x = element_text(margin = margin(t = 10)), panel.background = element_rect(fill = &#39;white&#39;, colour = &#39;white&#39;, linewidth = 0.5, linetype = &#39;solid&#39;), panel.grid.major = element_line(colour = &#39;grey90&#39;, linetype = &#39;solid&#39;), panel.grid.minor = element_line(colour = &#39;grey90&#39;, linetype = &#39;solid&#39;), plot.caption = element_text(color = &#39;grey50&#39;, size = 8.5, face = &#39;plain&#39;)) hist_distrib_ctry_area_shr ## Both hist_distrib_ctry_both_shr = ggplot(filter(data_distrib_ctry, metric %in% c(&quot;freq_area&quot;, &quot;freq_n&quot;)), aes(x = reorder(iso3, -value), y = value, fill = metric)) %&gt;% + geom_bar(position=&quot;dodge&quot;, stat=&quot;identity&quot;) %&gt;% # + geom_text(aes(label = paste(value, &quot;PAs&quot;), y = value), # vjust = -0.1, color=&quot;black&quot;, # size=3.5) %&gt;% + labs(title = paste0(&quot;Distribution of AFD funded, non-marine protected areas by country\\n&quot;, roi), subtitle = paste(&quot;Sample :&quot;, sum(filter(data_distrib_ctry, metric == &quot;n&quot;)$value), &quot;non-marine protected areas covering&quot;, format(sum(filter(data_distrib_ctry, metric == &quot;area_km2&quot;)$value), digits = 2, scientific = TRUE), &quot;km²&quot;), x = &quot;&quot;, y = &quot;Share of protected areas (%)&quot;) %&gt;% + scale_fill_brewer(name = &quot;&quot;, labels = c(&quot;Area&quot;, &quot;Number&quot;), type = &quot;seq&quot;, palette = &quot;Blues&quot;) %&gt;% + theme(legend.position = &quot;bottom&quot;, legend.key = element_rect(fill = &quot;white&quot;), plot.title = element_text(size = 14, face = &quot;bold&quot;), axis.text.x = element_text(angle = 45,size=10, hjust = .5, vjust = .6), axis.title.x = element_text(margin = margin(t = 10)), panel.background = element_rect(fill = &#39;white&#39;, colour = &#39;white&#39;, linewidth = 0.5, linetype = &#39;solid&#39;), panel.grid.major = element_line(colour = &#39;grey90&#39;, linetype = &#39;solid&#39;), panel.grid.minor = element_line(colour = &#39;grey90&#39;, linetype = &#39;solid&#39;), plot.caption = element_text(color = &#39;grey50&#39;, size = 8.5, face = &#39;plain&#39;)) hist_distrib_ctry_both_shr #Saving figures tmp = paste(tempdir(), &quot;fig&quot;, sep = &quot;/&quot;) ggsave(paste(tmp, &quot;hist_distrib_ctry_top_n_shr.png&quot;, sep = &quot;/&quot;), plot = hist_distrib_ctry_top_n_shr, device = &quot;png&quot;, height = 6, width = 9) ggsave(paste(tmp, &quot;hist_distrib_ctry_top_area_shr.png&quot;, sep = &quot;/&quot;), plot = hist_distrib_ctry_top_area_shr, device = &quot;png&quot;, height = 6, width = 9) ggsave(paste(tmp, &quot;hist_distrib_ctry_n_shr.png&quot;, sep = &quot;/&quot;), plot = hist_distrib_ctry_top_n_shr, device = &quot;png&quot;, height = 6, width = 9) ggsave(paste(tmp, &quot;hist_distrib_ctry_area_shr.png&quot;, sep = &quot;/&quot;), plot = hist_distrib_ctry_top_area_shr, device = &quot;png&quot;, height = 6, width = 9) ggsave(paste(tmp, &quot;hist_distrib_ctry_both_shr.png&quot;, sep = &quot;/&quot;), plot = hist_distrib_ctry_both_shr, device = &quot;png&quot;, height = 6, width = 9) #Export to S3 storage ##List of files to save in the temp folder files &lt;- list.files(tmp, full.names = TRUE) ##Add each file in the bucket (same foler for every file in the temp) count = 0 for(f in files) { count = count+1 cat(&quot;Uploading file&quot;, paste0(count, &quot;/&quot;, length(files), &quot; &#39;&quot;, f, &quot;&#39;&quot;), &quot;\\n&quot;) aws.s3::put_object(file = f, bucket = paste(&quot;projet-afd-eva-ap/descriptive_stats/distribution&quot;, roi, &quot;no_marine&quot;, sep = &quot;/&quot;), region = &quot;&quot;, show_progress = TRUE) } #Erase the files in the temp directory do.call(file.remove, list(list.files(tmp, full.names = TRUE))) 2.3.3.4 Statistics at country level (non-marine, WDPA vs AFD) #For AFD funded PAs ##Distribution across countries (all) data_distrib_ctry_afd = data_stat_nodupl %&gt;% filter(marine %in% c(0,1)) %&gt;% group_by(iso3, country_en) %&gt;% summarize(n_afd = n(), area_km2_afd = sum(area_km2, na.rm = TRUE)) %&gt;% ungroup() %&gt;% mutate(n_tot_afd = sum(n_afd), area_km2_afd_tot = sum(area_km2_afd, na.rm = TRUE), freq_n_afd = round(n_afd/n_tot_afd*100, 2), freq_area_afd = round(area_km2_afd/area_km2_afd_tot*100, 2)) ##Top 10 funded countries ###Number data_distrib_ctry_afd_top_n = data_distrib_ctry_afd %&gt;% arrange(-freq_n_afd) %&gt;% slice(1:10) ###Surface data_distrib_ctry_afd_top_area = data_distrib_ctry_afd %&gt;% arrange(-freq_area_afd) %&gt;% slice(1:10) #For WDPA PAs ## All countries in the list of interest data_distrib_ctry_wdpa = data_wdpa %&gt;% #Non-marine areas only filter(marine %in% c(0,1)) %&gt;% #Countries of interest only filter(iso3 %in% lst_ctry_stat_wdpa) %&gt;% group_by(iso3, country_en) %&gt;% summarize(n_wdpa = n(), area_km2_wdpa = sum(rep_area, na.rm = TRUE)) %&gt;% ungroup() %&gt;% mutate(n_tot_wdpa = sum(n_wdpa), area_km2_wdpa_tot = sum(area_km2_wdpa, na.rm = TRUE), freq_n_wdpa = round(n_wdpa/n_tot_wdpa*100, 2), freq_area_wdpa = round(area_km2_wdpa/area_km2_wdpa_tot*100, 2)) ## Top 10 targeted countries data_distrib_ctry_wdpa_top_n = data_distrib_ctry_wdpa %&gt;% arrange(-freq_n_wdpa) %&gt;% slice(1:10) data_distrib_ctry_wdpa_top_area = data_distrib_ctry_wdpa %&gt;% arrange(-freq_area_wdpa) %&gt;% slice(1:10) #Then create a plotting dataset with WDPA vs AFD distribution ##the distribution for top targeted countries by AFD ### in terms of numbers data_distrib_ctry_vs_n = data_distrib_ctry_afd_top_n %&gt;% left_join(data_distrib_ctry_wdpa, c(&quot;iso3&quot;, &quot;country_en&quot;)) %&gt;% select(-contains(&quot;area&quot;)) %&gt;% pivot_longer(cols = c(&quot;n_afd&quot;, &quot;freq_n_afd&quot;, &quot;n_wdpa&quot;, &quot;freq_n_wdpa&quot;), names_to = &quot;metric&quot;) ###in terms of areas data_distrib_ctry_vs_area = data_distrib_ctry_afd_top_area %&gt;% left_join(data_distrib_ctry_wdpa, c(&quot;iso3&quot;, &quot;country_en&quot;)) %&gt;% select(-contains(&quot;n_&quot;)) %&gt;% pivot_longer(cols = c(&quot;area_km2_afd&quot;, &quot;freq_area_afd&quot;, &quot;area_km2_wdpa&quot;, &quot;freq_area_wdpa&quot;), names_to = &quot;metric&quot;) #Histogram in share for top countries ##For WDPA PAs ### number hist_distrib_ctry_wdpa_top_n = ggplot(data_distrib_ctry_wdpa_top_n, aes(x = reorder(iso3, -freq_n_wdpa), y = freq_n_wdpa, fill = freq_n_wdpa)) %&gt;% + geom_bar(width = 0.50, fill= &quot;#3182BD&quot;, stat=&quot;identity&quot;) %&gt;% + labs(title = &quot;Top countries of non-marine protected areas (#)&quot;, subtitle = paste(&quot;Sample :&quot;, min(data_distrib_ctry_wdpa$n_tot_wdpa), &quot;non-marine protected areas reported by the WDPA, covering&quot;, format(min(data_distrib_ctry_wdpa$area_km2_wdpa_tot), scientific = TRUE, digits = 2), &quot;km²&quot;), caption = &quot;Note : we consider non-marine PAs reported by the WDPA on the full period covered by the data, in countries that are potential AFD partners.\\nThese are low-, lower-middle, upper-middle countries according to the World Bank 2022 classification, \\nexcluding Russia and including Uruguay, Panama, Chile, New Caledonia.\\nA subset of these PAs is AFD funded, though some PAs funded by the AFD are not reported by the WDPA.&quot;, x = &quot;&quot;, y = &quot;Share of protected areas (%)&quot;) %&gt;% + scale_fill_brewer(name = &quot;&quot;, labels = c(&quot;AFD funded&quot;, &quot;Low- to upper-middle income*&quot;), type = &quot;seq&quot;, palette = &quot;Blues&quot;) %&gt;% + theme(legend.position = &quot;bottom&quot;, legend.key = element_rect(fill = &quot;white&quot;), plot.title = element_text(size = 14, face = &quot;bold&quot;), axis.text.x = element_text(angle = 0,size=10, hjust = .5, vjust = .6), axis.title.x = element_text(margin = margin(t = 10)), panel.background = element_rect(fill = &#39;white&#39;, colour = &#39;white&#39;, linewidth = 0.5, linetype = &#39;solid&#39;), panel.grid.major = element_line(colour = &#39;grey90&#39;, linetype = &#39;solid&#39;), panel.grid.minor = element_line(colour = &#39;grey90&#39;, linetype = &#39;solid&#39;), plot.caption = element_text(color = &#39;grey50&#39;, size = 8.5, face = &#39;plain&#39;, hjust = 0)) hist_distrib_ctry_wdpa_top_n ### Area hist_distrib_ctry_wdpa_top_area = ggplot(data_distrib_ctry_wdpa_top_area, aes(x = reorder(iso3, -freq_area_wdpa), y = freq_area_wdpa, fill = freq_area_wdpa)) %&gt;% + geom_bar(width = 0.50, fill= &quot;#3182BD&quot;, stat=&quot;identity&quot;) %&gt;% + labs(title = &quot;Top countries of non-marine protected areas (area)&quot;, subtitle = paste(&quot;Sample :&quot;, min(data_distrib_ctry_wdpa$n_tot_wdpa), &quot;non-marine protected areas reported by the WDPA, covering&quot;, format(min(data_distrib_ctry_wdpa$area_km2_wdpa_tot), scientific = TRUE, digits = 2), &quot;km²&quot;), caption = &quot;Note : we consider non-marine PAs reported by the WDPA on the full period covered by the data, in countries that are potential AFD partners.\\nThese are low-, lower-middle, upper-middle countries according to the World Bank 2022 classification, \\nexcluding Russia and including Uruguay, Panama, Chile, New Caledonia.&quot;, x = &quot;&quot;, y = &quot;Share of protected areas (%)&quot;) %&gt;% + scale_fill_brewer(name = &quot;&quot;, labels = c(&quot;AFD funded&quot;, &quot;Low- to upper-middle income*&quot;), type = &quot;seq&quot;, palette = &quot;Blues&quot;) %&gt;% + theme(legend.position = &quot;bottom&quot;, legend.key = element_rect(fill = &quot;white&quot;), plot.title = element_text(size = 14, face = &quot;bold&quot;), axis.text.x = element_text(angle = 0,size=10, hjust = .5, vjust = .6), axis.title.x = element_text(margin = margin(t = 10)), panel.background = element_rect(fill = &#39;white&#39;, colour = &#39;white&#39;, linewidth = 0.5, linetype = &#39;solid&#39;), panel.grid.major = element_line(colour = &#39;grey90&#39;, linetype = &#39;solid&#39;), panel.grid.minor = element_line(colour = &#39;grey90&#39;, linetype = &#39;solid&#39;), plot.caption = element_text(color = &#39;grey50&#39;, size = 8.5, face = &#39;plain&#39;, hjust = 0)) hist_distrib_ctry_wdpa_top_area ##For AFD funded PAs ### number hist_distrib_ctry_afd_top_n = ggplot(data_distrib_ctry_afd_top_n, aes(x = reorder(iso3, -freq_n_afd), y = freq_n_afd, fill = freq_n_afd)) %&gt;% + geom_bar(width = 0.50, fill= &quot;#3182BD&quot;, stat=&quot;identity&quot;) %&gt;% + labs(title = &quot;Top countries of AFD funded, non-marine protected areas (#)&quot;, subtitle = paste(&quot;Sample :&quot;, min(data_distrib_ctry_afd$n_tot_afd), &quot;non-marine protected areas reported by the WDPA, covering&quot;, format(min(data_distrib_ctry_afd$area_km2_afd_tot), scientific = TRUE, digits = 2), &quot;km²&quot;), caption = &quot;Note : we consider non-marine PAs reported by the WDPA on the full period covered by the data, in countries that are potential AFD partners.\\nThese are low-, lower-middle, upper-middle countries according to the World Bank 2022 classification, \\nexcluding Russia and including Uruguay, Panama, Chile, New Caledonia.\\nA subset of these PAs is AFD funded, though some PAs funded by the AFD are not reported by the WDPA.&quot;, x = &quot;&quot;, y = &quot;Share of protected areas (%)&quot;) %&gt;% + scale_fill_brewer(name = &quot;&quot;, labels = c(&quot;AFD funded&quot;, &quot;Low- to upper-middle income*&quot;), type = &quot;seq&quot;, palette = &quot;Blues&quot;) %&gt;% + theme(legend.position = &quot;bottom&quot;, legend.key = element_rect(fill = &quot;white&quot;), plot.title = element_text(size = 14, face = &quot;bold&quot;), axis.text.x = element_text(angle = 0,size=10, hjust = .5, vjust = .6), axis.title.x = element_text(margin = margin(t = 10)), panel.background = element_rect(fill = &#39;white&#39;, colour = &#39;white&#39;, linewidth = 0.5, linetype = &#39;solid&#39;), panel.grid.major = element_line(colour = &#39;grey90&#39;, linetype = &#39;solid&#39;), panel.grid.minor = element_line(colour = &#39;grey90&#39;, linetype = &#39;solid&#39;), plot.caption = element_text(color = &#39;grey50&#39;, size = 8.5, face = &#39;plain&#39;, hjust = 0)) hist_distrib_ctry_afd_top_n ### Area hist_distrib_ctry_afd_top_area = ggplot(data_distrib_ctry_afd_top_area, aes(x = reorder(iso3, -freq_area_afd), y = freq_area_afd, fill = freq_area_afd)) %&gt;% + geom_bar(width = 0.50, fill= &quot;#3182BD&quot;, stat=&quot;identity&quot;) %&gt;% + labs(title = &quot;Top countries of AFD funded, non-marine protected areas (area)&quot;, subtitle = paste(&quot;Sample :&quot;, min(data_distrib_ctry_afd$n_tot_afd), &quot;non-marine protected areas reported by the WDPA, covering&quot;, format(min(data_distrib_ctry_afd$area_km2_afd_tot), scientific = TRUE, digits = 2), &quot;km²&quot;), caption = &quot;Note : we consider non-marine PAs reported by the WDPA on the full period covered by the data, in countries that are potential AFD partners.\\nThese are low-, lower-middle, upper-middle countries according to the World Bank 2022 classification, \\nexcluding Russia and including Uruguay, Panama, Chile, New Caledonia.\\nA subset of these PAs is AFD funded, though some PAs funded by the AFD are not reported by the WDPA.&quot;, x = &quot;&quot;, y = &quot;Share of protected areas (%)&quot;) %&gt;% + scale_fill_brewer(name = &quot;&quot;, labels = c(&quot;AFD funded&quot;, &quot;Low- to upper-middle income*&quot;), type = &quot;seq&quot;, palette = &quot;Blues&quot;) %&gt;% + theme(legend.position = &quot;bottom&quot;, legend.key = element_rect(fill = &quot;white&quot;), plot.title = element_text(size = 14, face = &quot;bold&quot;), axis.text.x = element_text(angle = 0,size=10, hjust = .5, vjust = .6), axis.title.x = element_text(margin = margin(t = 10)), panel.background = element_rect(fill = &#39;white&#39;, colour = &#39;white&#39;, linewidth = 0.5, linetype = &#39;solid&#39;), panel.grid.major = element_line(colour = &#39;grey90&#39;, linetype = &#39;solid&#39;), panel.grid.minor = element_line(colour = &#39;grey90&#39;, linetype = &#39;solid&#39;), plot.caption = element_text(color = &#39;grey50&#39;, size = 8.5, face = &#39;plain&#39;, hjust = 0)) hist_distrib_ctry_afd_top_area ## For top AFD, comparison with WDPA in terms of numbers hist_distrib_ctry_vs_n = ggplot(filter(data_distrib_ctry_vs_n, grepl(&quot;freq&quot;, metric)), aes(x = reorder(iso3, value), y = value, fill = metric)) %&gt;% + geom_bar(position=&quot;dodge&quot;, stat=&quot;identity&quot;, na.rm = TRUE) %&gt;% + labs(title = &quot;Top countries targeted by AFD funded non-marine protected areas (#)&quot;, subtitle = paste(&quot;Sample :&quot;, min(data_distrib_ctry_wdpa$n_tot_wdpa), &quot;non-marine protected areas reported by the WDPA,&quot;, min(data_distrib_ctry_afd$n_tot_afd), &quot;funded by AFD&quot;), caption = &quot;Note : we consider non-marine PAs reported by the WDPA on the full period covered by the data, in countries that are potential AFD partners.\\n*These are low-, lower-middle, upper-middle countries according to the World Bank 2022 classification, \\nexcluding Russia and including Uruguay, Panama, Chile, New Caledonia.\\nA subset of these PAs is AFD funded, though some PAs funded by the AFD are not reported by the WDPA.&quot;, x = &quot;&quot;, y = &quot;Share of protected areas (%)&quot;) %&gt;% + scale_fill_brewer(name = &quot;&quot;, labels = c(&quot;AFD funded&quot;, &quot;Low- to upper-middle income*&quot;), type = &quot;seq&quot;, palette = &quot;Blues&quot;) %&gt;% + theme(legend.position = &quot;bottom&quot;, legend.key = element_rect(fill = &quot;white&quot;), plot.title = element_text(size = 14, face = &quot;bold&quot;), axis.text.x = element_text(angle = 0,size=10, hjust = .5, vjust = .6), axis.title.x = element_text(margin = margin(t = 10)), panel.background = element_rect(fill = &#39;white&#39;, colour = &#39;white&#39;, linewidth = 0.5, linetype = &#39;solid&#39;), panel.grid.major = element_line(colour = &#39;grey90&#39;, linetype = &#39;solid&#39;), panel.grid.minor = element_line(colour = &#39;grey90&#39;, linetype = &#39;solid&#39;), plot.caption = element_text(color = &#39;grey50&#39;, size = 8.5, face = &#39;plain&#39;, hjust = 0)) hist_distrib_ctry_vs_n ## For top AFD, comparison with WDPA in terms of area hist_distrib_ctry_vs_area = ggplot(filter(data_distrib_ctry_vs_area, grepl(&quot;freq&quot;, metric)), aes(x = reorder(iso3, value), y = value, fill = metric)) %&gt;% + geom_bar(position=&quot;dodge&quot;, stat=&quot;identity&quot;, na.rm = TRUE) %&gt;% + labs(title = &quot;Top countries targeted by AFD funded non-marine protected areas (area)&quot;, subtitle = paste(&quot;Sample :&quot;, min(data_distrib_ctry_wdpa$n_tot_wdpa), &quot;non-marine protected areas reported by the the WDPA,&quot;, min(data_distrib_ctry_afd$n_tot_afd), &quot;funded by AFD&quot;), caption = &quot;Note : we consider non-marine PAs reported by the WDPA on the full period covered by the data, in countries that are potential AFD partners.\\n*These are low-, lower-middle, upper-middle countries according to the World Bank 2022 classification, \\nexcluding Russia and including Uruguay, Panama, Chile, New Caledonia.\\nA subset of these PAs is AFD funded, though some PAs funded by the AFD are not reported by the WDPA.&quot;, x = &quot;&quot;, y = &quot;Share of funded areas (%)&quot;) %&gt;% + scale_fill_brewer(name = &quot;&quot;, labels = c(&quot;AFD funded&quot;, &quot;Low- to upper-middle income*&quot;), type = &quot;seq&quot;, palette = &quot;Blues&quot;) %&gt;% + theme(legend.position = &quot;bottom&quot;, legend.key = element_rect(fill = &quot;white&quot;), plot.title = element_text(size = 14, face = &quot;bold&quot;), axis.text.x = element_text(angle = 0,size=10, hjust = .5, vjust = .6), axis.title.x = element_text(margin = margin(t = 10)), panel.background = element_rect(fill = &#39;white&#39;, colour = &#39;white&#39;, linewidth = 0.5, linetype = &#39;solid&#39;), panel.grid.major = element_line(colour = &#39;grey90&#39;, linetype = &#39;solid&#39;), panel.grid.minor = element_line(colour = &#39;grey90&#39;, linetype = &#39;solid&#39;), plot.caption = element_text(color = &#39;grey50&#39;, size = 8.5, face = &#39;plain&#39;, hjust = 0)) hist_distrib_ctry_vs_area #Saving figures tmp = paste(tempdir(), &quot;fig&quot;, sep = &quot;/&quot;) ggsave(paste(tmp, &quot;hist_distrib_ctry_wdpa_top_n.png&quot;, sep = &quot;/&quot;), plot = hist_distrib_ctry_wdpa_top_n, device = &quot;png&quot;, height = 6, width = 9) ggsave(paste(tmp, &quot;hist_distrib_ctry_wdpa_top_area.png&quot;, sep = &quot;/&quot;), plot = hist_distrib_ctry_wdpa_top_area, device = &quot;png&quot;, height = 6, width = 9) ggsave(paste(tmp, &quot;hist_distrib_ctry_afd_top_n.png&quot;, sep = &quot;/&quot;), plot = hist_distrib_ctry_afd_top_n, device = &quot;png&quot;, height = 6, width = 9) ggsave(paste(tmp, &quot;hist_distrib_ctry_afd_top_area.png&quot;, sep = &quot;/&quot;), plot = hist_distrib_ctry_afd_top_area, device = &quot;png&quot;, height = 6, width = 9) ggsave(paste(tmp, &quot;hist_distrib_ctry_vs_n.png&quot;, sep = &quot;/&quot;), plot = hist_distrib_ctry_vs_n, device = &quot;png&quot;, height = 6, width = 9) ggsave(paste(tmp, &quot;hist_distrib_ctry_vs_area.png&quot;, sep = &quot;/&quot;), plot = hist_distrib_ctry_vs_area, device = &quot;png&quot;, height = 6, width = 9) #Export to S3 storage ##List of files to save in the temp folder files &lt;- list.files(tmp, full.names = TRUE) ##Add each file in the bucket (same foler for every file in the temp) count = 0 for(f in files) { count = count+1 cat(&quot;Uploading file&quot;, paste0(count, &quot;/&quot;, length(files), &quot; &#39;&quot;, f, &quot;&#39;&quot;), &quot;\\n&quot;) aws.s3::put_object(file = f, bucket = &quot;projet-afd-eva-ap/descriptive_stats/distribution/wdpa_vs_afd/no_marine&quot;, region = &quot;&quot;, show_progress = TRUE) } #Erase the files in the temp directory do.call(file.remove, list(list.files(tmp, full.names = TRUE))) 2.3.3.5 Statistics at region level (all) All PAs across the world. #Surface and number of PAs by country data_distrib_reg = data_stat_nodupl %&gt;% group_by(region) %&gt;% summarize(n = n(), area_km2 = sum(area_km2, na.rm = TRUE)) %&gt;% ungroup() %&gt;% mutate(n_tot = sum(n, na.rm = TRUE), area_tot_km2 = sum(area_km2, na.rm = TRUE), freq_n = round(n/n_tot*100, 2), freq_area = round(area_km2/area_tot_km2*100, 2)) %&gt;% pivot_longer(cols = c(&quot;n&quot;, &quot;freq_n&quot;, &quot;area_km2&quot;, &quot;freq_area&quot;), names_to = &quot;metric&quot;) %&gt;% filter(is.na(region) == FALSE) #Histogram for all countries #Histogram in number hist_distrib_reg_n_shr = ggplot(filter(data_distrib_reg, metric == &quot;freq_n&quot;), aes(x = reorder(region, -value), y = value, fill = region)) %&gt;% + geom_bar(width = 0.50, fill= &quot;#3182BD&quot;, stat=&quot;identity&quot;) %&gt;% # + geom_text(aes(label = n, y = n), # vjust = -0.1, color=&quot;black&quot;, # size=3) %&gt;% + labs(title = &quot;Distribution of protected areas by region (#)&quot;, subtitle = paste(&quot;Sample :&quot;, sum(filter(data_distrib_reg, metric == &quot;n&quot;)$value), &quot;protected areas covering&quot;, format(sum(filter(data_distrib_reg, metric == &quot;area_km2&quot;)$value), digits = 2, scientific = TRUE), &quot;km²&quot;), x = &quot;&quot;, y = &quot;Share of protected areas (%)&quot;) %&gt;% + theme(legend.position = &quot;bottom&quot;, legend.key = element_rect(fill = &quot;white&quot;), plot.title = element_text(size = 14, face = &quot;bold&quot;), axis.text.x = element_text(angle = 45,size=10, hjust = .5, vjust = .6), axis.title.x = element_text(margin = margin(t = 10)), panel.background = element_rect(fill = &#39;white&#39;, colour = &#39;white&#39;, linewidth = 0.5, linetype = &#39;solid&#39;), panel.grid.major = element_line(colour = &#39;grey90&#39;, linetype = &#39;solid&#39;), panel.grid.minor = element_line(colour = &#39;grey90&#39;, linetype = &#39;solid&#39;), plot.caption = element_text(color = &#39;grey50&#39;, size = 8.5, face = &#39;plain&#39;)) hist_distrib_reg_n_shr # Histogram in surfaces hist_distrib_reg_area_shr = ggplot(filter(data_distrib_reg, metric == &quot;freq_area&quot;), aes(x = reorder(region, -value), y = value, fill = region)) %&gt;% + geom_bar(width = 0.50, fill= &quot;#3182BD&quot;, stat=&quot;identity&quot;) %&gt;% # + geom_text(aes(label = n, y = n), # vjust = -0.1, color=&quot;black&quot;, # size=3) %&gt;% + labs(title = &quot;Distribution of protected areas by region (area)&quot;, subtitle = paste(&quot;Sample :&quot;, sum(filter(data_distrib_reg, metric == &quot;n&quot;)$value), &quot;protected areas covering&quot;, format(sum(filter(data_distrib_reg, metric == &quot;area_km2&quot;)$value), digits = 2, scientific = TRUE), &quot;km²&quot;), x = &quot;&quot;, y = &quot;Share of areas funded (%)&quot;) %&gt;% + theme(legend.position = &quot;bottom&quot;, legend.key = element_rect(fill = &quot;white&quot;), plot.title = element_text(size = 14, face = &quot;bold&quot;), axis.text.x = element_text(angle = 45,size=10, hjust = .5, vjust = .6), axis.title.x = element_text(margin = margin(t = 10)), panel.background = element_rect(fill = &#39;white&#39;, colour = &#39;white&#39;, linewidth = 0.5, linetype = &#39;solid&#39;), panel.grid.major = element_line(colour = &#39;grey90&#39;, linetype = &#39;solid&#39;), panel.grid.minor = element_line(colour = &#39;grey90&#39;, linetype = &#39;solid&#39;), plot.caption = element_text(color = &#39;grey50&#39;, size = 8.5, face = &#39;plain&#39;)) hist_distrib_reg_area_shr ## Both hist_distrib_reg_top_both_shr = ggplot(filter(data_distrib_reg, metric %in% c(&quot;freq_area&quot;, &quot;freq_n&quot;)), aes(x = reorder(region, -value), y = value, fill = metric)) %&gt;% + geom_bar(position=&quot;dodge&quot;, stat=&quot;identity&quot;) %&gt;% # + geom_text(aes(label = paste(value, &quot;PAs&quot;), y = value), # vjust = -0.1, color=&quot;black&quot;, # size=3.5) %&gt;% + labs(title = &quot;Distribution of AFD funded protected areas by region&quot;, subtitle = paste(&quot;Sample :&quot;, sum(filter(data_distrib_reg, metric == &quot;n&quot;)$value), &quot;protected areas covering&quot;, format(sum(filter(data_distrib_reg, metric == &quot;area_km2&quot;)$value), digits = 2, scientific = TRUE), &quot;km²&quot;), x = &quot;&quot;, y = &quot;Share of protected areas (%)&quot;) %&gt;% + scale_fill_brewer(name = &quot;&quot;, labels = c(&quot;Area&quot;, &quot;Number&quot;), type = &quot;seq&quot;, palette = &quot;Blues&quot;) %&gt;% + theme(legend.position = &quot;bottom&quot;, legend.key = element_rect(fill = &quot;white&quot;), plot.title = element_text(size = 14, face = &quot;bold&quot;), axis.text.x = element_text(angle = 45,size=10, hjust = .5, vjust = .6), axis.title.x = element_text(margin = margin(t = 10)), panel.background = element_rect(fill = &#39;white&#39;, colour = &#39;white&#39;, linewidth = 0.5, linetype = &#39;solid&#39;), panel.grid.major = element_line(colour = &#39;grey90&#39;, linetype = &#39;solid&#39;), panel.grid.minor = element_line(colour = &#39;grey90&#39;, linetype = &#39;solid&#39;), plot.caption = element_text(color = &#39;grey50&#39;, size = 8.5, face = &#39;plain&#39;)) hist_distrib_reg_top_both_shr #Saving figures tmp = paste(tempdir(), &quot;fig&quot;, sep = &quot;/&quot;) ggsave(paste(tmp, &quot;hist_distrib_reg_n_shr.png&quot;, sep = &quot;/&quot;), plot = hist_distrib_reg_n_shr, device = &quot;png&quot;, height = 6, width = 9) ggsave(paste(tmp, &quot;hist_distrib_reg_area_shr.png&quot;, sep = &quot;/&quot;), plot = hist_distrib_reg_area_shr, device = &quot;png&quot;, height = 6, width = 9) ggsave(paste(tmp, &quot;hist_distrib_reg_top_both_shr.png&quot;, sep = &quot;/&quot;), plot = hist_distrib_reg_top_both_shr, device = &quot;png&quot;, height = 6, width = 9) #Export to S3 storage ##List of files to save in the temp folder files &lt;- list.files(tmp, full.names = TRUE) ##Add each file in the bucket (same foler for every file in the temp) count = 0 for(f in files) { count = count+1 cat(&quot;Uploading file&quot;, paste0(count, &quot;/&quot;, length(files), &quot; &#39;&quot;, f, &quot;&#39;&quot;), &quot;\\n&quot;) aws.s3::put_object(file = f, bucket = &quot;projet-afd-eva-ap/descriptive_stats/distribution/world/all&quot;, region = &quot;&quot;, show_progress = TRUE) } #Erase the files in the temp directory do.call(file.remove, list(list.files(tmp, full.names = TRUE))) 2.3.3.6 Statistics at region level (non-marine) #Surface and number of PAs by country data_distrib_reg = data_stat_nodupl %&gt;% filter(marine %in% c(0,1)) %&gt;% group_by(region) %&gt;% summarize(n = n(), area_km2 = sum(area_km2, na.rm = TRUE)) %&gt;% ungroup() %&gt;% mutate(n_tot = sum(n, na.rm = TRUE), area_tot_km2 = sum(area_km2, na.rm = TRUE), freq_n = round(n/n_tot*100, 2), freq_area = round(area_km2/area_tot_km2*100, 2)) %&gt;% pivot_longer(cols = c(&quot;n&quot;, &quot;freq_n&quot;, &quot;area_km2&quot;, &quot;freq_area&quot;), names_to = &quot;metric&quot;) %&gt;% filter(is.na(region) == FALSE) #Histogram for all countries #Histogram in number hist_distrib_reg_n_shr = ggplot(filter(data_distrib_reg, metric == &quot;freq_n&quot;), aes(x = reorder(region, -value), y = value, fill = region)) %&gt;% + geom_bar(width = 0.50, fill= &quot;#3182BD&quot;, stat=&quot;identity&quot;) %&gt;% # + geom_text(aes(label = n, y = n), # vjust = -0.1, color=&quot;black&quot;, # size=3) %&gt;% + labs(title = &quot;Distribution of AFD funded, non-marine protected areas by region (#)&quot;, subtitle = paste(&quot;Sample :&quot;, sum(filter(data_distrib_reg, metric == &quot;n&quot;)$value), &quot;non-marine protected areas covering&quot;, format(sum(filter(data_distrib_reg, metric == &quot;area_km2&quot;)$value), digits = 2, scientific = TRUE), &quot;km²&quot;), x = &quot;&quot;, y = &quot;Share of protected areas (%)&quot;) %&gt;% + theme(legend.position = &quot;bottom&quot;, legend.key = element_rect(fill = &quot;white&quot;), plot.title = element_text(size = 14, face = &quot;bold&quot;), axis.text.x = element_text(angle = 45,size=10, hjust = .5, vjust = .6), axis.title.x = element_text(margin = margin(t = 10)), panel.background = element_rect(fill = &#39;white&#39;, colour = &#39;white&#39;, linewidth = 0.5, linetype = &#39;solid&#39;), panel.grid.major = element_line(colour = &#39;grey90&#39;, linetype = &#39;solid&#39;), panel.grid.minor = element_line(colour = &#39;grey90&#39;, linetype = &#39;solid&#39;), plot.caption = element_text(color = &#39;grey50&#39;, size = 8.5, face = &#39;plain&#39;)) hist_distrib_reg_n_shr # Histogram in surfaces hist_distrib_reg_area_shr = ggplot(filter(data_distrib_reg, metric == &quot;freq_area&quot;), aes(x = reorder(region, -value), y = value, fill = region)) %&gt;% + geom_bar(width = 0.50, fill= &quot;#3182BD&quot;, stat=&quot;identity&quot;) %&gt;% # + geom_text(aes(label = n, y = n), # vjust = -0.1, color=&quot;black&quot;, # size=3) %&gt;% + labs(title = &quot;Distribution of AFD funded, non-marine protected areas by region (area)&quot;, subtitle = paste(&quot;Sample :&quot;, sum(filter(data_distrib_reg, metric == &quot;n&quot;)$value), &quot;non-marine protected areas covering&quot;, format(sum(filter(data_distrib_reg, metric == &quot;area_km2&quot;)$value), digits = 2, scientific = TRUE), &quot;km²&quot;), x = &quot;&quot;, y = &quot;Share of areas funded (%)&quot;) %&gt;% + theme(legend.position = &quot;bottom&quot;, legend.key = element_rect(fill = &quot;white&quot;), plot.title = element_text(size = 14, face = &quot;bold&quot;), axis.text.x = element_text(angle = 45,size=10, hjust = .5, vjust = .6), axis.title.x = element_text(margin = margin(t = 10)), panel.background = element_rect(fill = &#39;white&#39;, colour = &#39;white&#39;, linewidth = 0.5, linetype = &#39;solid&#39;), panel.grid.major = element_line(colour = &#39;grey90&#39;, linetype = &#39;solid&#39;), panel.grid.minor = element_line(colour = &#39;grey90&#39;, linetype = &#39;solid&#39;), plot.caption = element_text(color = &#39;grey50&#39;, size = 8.5, face = &#39;plain&#39;)) hist_distrib_reg_area_shr ## Both hist_distrib_reg_top_both_shr = ggplot(filter(data_distrib_reg, metric %in% c(&quot;freq_area&quot;, &quot;freq_n&quot;)), aes(x = reorder(region, -value), y = value, fill = metric)) %&gt;% + geom_bar(position=&quot;dodge&quot;, stat=&quot;identity&quot;) %&gt;% # + geom_text(aes(label = paste(value, &quot;PAs&quot;), y = value), # vjust = -0.1, color=&quot;black&quot;, # size=3.5) %&gt;% + labs(title = &quot;Distribution of AFD funded, non-marine protected areas by region&quot;, subtitle = paste(&quot;Sample :&quot;, sum(filter(data_distrib_reg, metric == &quot;n&quot;)$value), &quot;non-marine protected areas covering&quot;, format(sum(filter(data_distrib_reg, metric == &quot;area_km2&quot;)$value), digits = 2, scientific = TRUE), &quot;km²&quot;), x = &quot;&quot;, y = &quot;Share of protected areas (%)&quot;) %&gt;% + scale_fill_brewer(name = &quot;&quot;, labels = c(&quot;Area&quot;, &quot;Number&quot;), type = &quot;seq&quot;, palette = &quot;Blues&quot;) %&gt;% + theme(legend.position = &quot;bottom&quot;, legend.key = element_rect(fill = &quot;white&quot;), plot.title = element_text(size = 14, face = &quot;bold&quot;), axis.text.x = element_text(angle = 45,size=10, hjust = .5, vjust = .6), axis.title.x = element_text(margin = margin(t = 10)), panel.background = element_rect(fill = &#39;white&#39;, colour = &#39;white&#39;, linewidth = 0.5, linetype = &#39;solid&#39;), panel.grid.major = element_line(colour = &#39;grey90&#39;, linetype = &#39;solid&#39;), panel.grid.minor = element_line(colour = &#39;grey90&#39;, linetype = &#39;solid&#39;), plot.caption = element_text(color = &#39;grey50&#39;, size = 8.5, face = &#39;plain&#39;)) hist_distrib_reg_top_both_shr #Saving figures tmp = paste(tempdir(), &quot;fig&quot;, sep = &quot;/&quot;) ggsave(paste(tmp, &quot;hist_distrib_reg_n_shr.png&quot;, sep = &quot;/&quot;), plot = hist_distrib_reg_n_shr, device = &quot;png&quot;, height = 6, width = 9) ggsave(paste(tmp, &quot;hist_distrib_reg_area_shr.png&quot;, sep = &quot;/&quot;), plot = hist_distrib_reg_area_shr, device = &quot;png&quot;, height = 6, width = 9) ggsave(paste(tmp, &quot;hist_distrib_reg_top_both_shr.png&quot;, sep = &quot;/&quot;), plot = hist_distrib_reg_top_both_shr, device = &quot;png&quot;, height = 6, width = 9) #Export to S3 storage ##List of files to save in the temp folder files &lt;- list.files(tmp, full.names = TRUE) ##Add each file in the bucket (same foler for every file in the temp) count = 0 for(f in files) { count = count+1 cat(&quot;Uploading file&quot;, paste0(count, &quot;/&quot;, length(files), &quot; &#39;&quot;, f, &quot;&#39;&quot;), &quot;\\n&quot;) aws.s3::put_object(file = f, bucket = &quot;projet-afd-eva-ap/descriptive_stats/distribution/world/no_marine&quot;, region = &quot;&quot;, show_progress = TRUE) } #Erase the files in the temp directory do.call(file.remove, list(list.files(tmp, full.names = TRUE))) 2.3.3.7 Statistics at region level (non-marine, WDPA vs AFD) Distribution of PAs funded by the AFD across regions, is compared to the distribution of the full WDPA database. Note the comparison in terms of number instead of percentage is irrelevant. Indeed WDPA reports around 3e5 PAs, and about 100 are AFD funded. #For AFD funded PAs ##Distribution across countries (all) data_distrib_reg_afd = data_stat_nodupl %&gt;% filter(marine %in% c(0,1)) %&gt;% group_by(region) %&gt;% summarize(n_afd = n(), area_km2_afd = sum(area_km2, na.rm = TRUE)) %&gt;% ungroup() %&gt;% mutate(n_tot_afd = sum(n_afd), area_km2_afd_tot = sum(area_km2_afd, na.rm = TRUE), freq_n_afd = round(n_afd/n_tot_afd*100, 2), freq_area_afd = round(area_km2_afd/area_km2_afd_tot*100, 2)) #For WDPA PAs ## All countries data_distrib_reg_wdpa = data_wdpa %&gt;% #Non-marine areas only filter(marine %in% c(0,1)) %&gt;% #Countries of interest only filter(iso3 %in% lst_ctry_stat_wdpa) %&gt;% group_by(region) %&gt;% summarize(n_wdpa = n(), area_km2_wdpa = sum(rep_area, na.rm = TRUE)) %&gt;% ungroup() %&gt;% mutate(n_tot_wdpa = sum(n_wdpa), area_km2_wdpa_tot = sum(area_km2_wdpa, na.rm = TRUE), freq_n_wdpa = round(n_wdpa/n_tot_wdpa*100, 2), freq_area_wdpa = round(area_km2_wdpa/area_km2_wdpa_tot*100, 2)) #Then create a plotting dataset with WDPA vs AFD distribution ##the distribution for top targeted countries by AFD ### in terms of numbers data_distrib_reg_vs_n = data_distrib_reg_wdpa %&gt;% left_join(data_distrib_reg_afd, by = &quot;region&quot;) %&gt;% select(-contains(&quot;area&quot;)) %&gt;% pivot_longer(cols = c(&quot;n_afd&quot;, &quot;freq_n_afd&quot;, &quot;n_wdpa&quot;, &quot;freq_n_wdpa&quot;), names_to = &quot;metric&quot;) %&gt;% filter(is.na(region) == FALSE) ###in terms of areas data_distrib_reg_vs_area = data_distrib_reg_wdpa %&gt;% left_join(data_distrib_reg_afd, by = &quot;region&quot;) %&gt;% select(-contains(&quot;n_&quot;)) %&gt;% pivot_longer(cols = c(&quot;area_km2_afd&quot;, &quot;freq_area_afd&quot;, &quot;area_km2_wdpa&quot;, &quot;freq_area_wdpa&quot;), names_to = &quot;metric&quot;) %&gt;% filter(is.na(region) == FALSE) ## For top AFD, comparison with WDPA in terms of numbers hist_distrib_reg_vs_n = ggplot(filter(data_distrib_reg_vs_n, grepl(&quot;freq&quot;, metric)), aes(x = reorder(region, value), y = value, fill = metric)) %&gt;% + geom_bar(position=&quot;dodge&quot;, stat=&quot;identity&quot;, na.rm = TRUE) %&gt;% + labs(title = &quot;Distribution of non-marine protected areas across regions (#)&quot;, subtitle = paste(&quot;Sample :&quot;, min(data_distrib_reg_wdpa$n_tot_wdpa), &quot;non-marine protected areas reported by the WDPA,&quot;, min(data_distrib_reg_afd$n_tot_afd), &quot;funded by AFD&quot;), caption = &quot;Note : we consider non-marine PAs reported by the WDPA on the full period covered by the data, in countries that are potential AFD partners.\\n*These are low-, lower-middle, upper-middle countries according to the World Bank 2022 classification, \\nexcluding Russia and including Uruguay, Panama, Chile, New Caledonia.\\nA subset of these PAs is AFD funded, though some PAs funded by the AFD are not reported by the WDPA.&quot;, x = &quot;&quot;, y = &quot;Share of protected areas (%)&quot;) %&gt;% + scale_fill_brewer(name = &quot;&quot;, labels = c(&quot;AFD funded&quot;, &quot;Low- to upper-middle income*&quot;), type = &quot;seq&quot;, palette = &quot;Blues&quot;) %&gt;% + theme(legend.position = &quot;bottom&quot;, legend.key = element_rect(fill = &quot;white&quot;), plot.title = element_text(size = 14, face = &quot;bold&quot;), axis.text.x = element_text(angle = 0,size=10, hjust = .5, vjust = .6), axis.title.x = element_text(margin = margin(t = 10)), panel.background = element_rect(fill = &#39;white&#39;, colour = &#39;white&#39;, linewidth = 0.5, linetype = &#39;solid&#39;), panel.grid.major = element_line(colour = &#39;grey90&#39;, linetype = &#39;solid&#39;), panel.grid.minor = element_line(colour = &#39;grey90&#39;, linetype = &#39;solid&#39;), plot.caption = element_text(color = &#39;grey50&#39;, size = 8.5, face = &#39;plain&#39;, hjust = 0)) hist_distrib_reg_vs_n ## For top AFD, comparison with WDPA in terms of area hist_distrib_reg_vs_area = ggplot(filter(data_distrib_reg_vs_area, grepl(&quot;freq&quot;, metric)), aes(x = reorder(region, value), y = value, fill = metric)) %&gt;% + geom_bar(position=&quot;dodge&quot;, stat=&quot;identity&quot;, na.rm = TRUE) %&gt;% + labs(title = &quot;Distribution of non-marine protected areas across regions (area)&quot;, subtitle = paste(&quot;Sample :&quot;, min(data_distrib_reg_wdpa$n_tot_wdpa), &quot;non-marine protected areas reported by the WDPA -&quot;, format(min(data_distrib_reg_wdpa$area_km2_wdpa_tot), scientific = TRUE, digits = 2), &quot;km² - \\nand&quot;, min(data_distrib_reg_afd$n_tot_afd), &quot;funded by AFD -&quot;, format(min(data_distrib_reg_afd$area_km2_afd_tot) , scientific = TRUE, digits = 2), &quot;km² -&quot;), caption = &quot;Note : we consider non-marine PAs reported by the WDPA on the full period covered by the data, in countries that are potential AFD partners.\\n*These are low-, lower-middle, upper-middle countries according to the World Bank 2022 classification, \\nexcluding Russia and including Uruguay, Panama, Chile, New Caledonia.\\nA subset of these PAs is AFD funded, though some PAs funded by the AFD are not reported by the WDPA.&quot;, x = &quot;&quot;, y = &quot;Share of areas (%)&quot;) %&gt;% + scale_fill_brewer(name = &quot;&quot;, labels = c(&quot;AFD funded&quot;, &quot;Low- to upper-middle income*&quot;), type = &quot;seq&quot;, palette = &quot;Blues&quot;) %&gt;% + theme(legend.position = &quot;bottom&quot;, legend.key = element_rect(fill = &quot;white&quot;), plot.title = element_text(size = 14, face = &quot;bold&quot;), axis.text.x = element_text(angle = 0,size=10, hjust = .5, vjust = .6), axis.title.x = element_text(margin = margin(t = 10)), panel.background = element_rect(fill = &#39;white&#39;, colour = &#39;white&#39;, linewidth = 0.5, linetype = &#39;solid&#39;), panel.grid.major = element_line(colour = &#39;grey90&#39;, linetype = &#39;solid&#39;), panel.grid.minor = element_line(colour = &#39;grey90&#39;, linetype = &#39;solid&#39;), plot.caption = element_text(color = &#39;grey50&#39;, size = 8.5, face = &#39;plain&#39;, hjust = 0)) hist_distrib_reg_vs_area #Saving figures tmp = paste(tempdir(), &quot;fig&quot;, sep = &quot;/&quot;) ggsave(paste(tmp, &quot;hist_distrib_reg_vs_area.png&quot;, sep = &quot;/&quot;), plot = hist_distrib_reg_vs_area, device = &quot;png&quot;, height = 6, width = 9) ggsave(paste(tmp, &quot;hist_distrib_reg_vs_n.png&quot;, sep = &quot;/&quot;), plot = hist_distrib_reg_vs_n, device = &quot;png&quot;, height = 6, width = 9) #Export to S3 storage ##List of files to save in the temp folder files &lt;- list.files(tmp, full.names = TRUE) ##Add each file in the bucket (same foler for every file in the temp) count = 0 for(f in files) { count = count+1 cat(&quot;Uploading file&quot;, paste0(count, &quot;/&quot;, length(files), &quot; &#39;&quot;, f, &quot;&#39;&quot;), &quot;\\n&quot;) aws.s3::put_object(file = f, bucket = &quot;projet-afd-eva-ap/descriptive_stats/distribution/wdpa_vs_afd/no_marine&quot;, region = &quot;&quot;, show_progress = TRUE) } #Erase the files in the temp directory do.call(file.remove, list(list.files(tmp, full.names = TRUE))) 2.3.4 Surface of PAs Statistics on PAs surfaces in the different regions and countries. 2.3.4.1 Distribution of surfaces tbl_distrib_area_no0 = summary( filter(data_stat_nodupl, area_km2 != 0)$area_km2) %&gt;% format(scientific = FALSE, big.mark = &quot; &quot;) %&gt;% as.array() %&gt;% t() %&gt;% as.data.frame() %&gt;% select(-c(&quot;1st Qu.&quot;,&quot;3rd Qu.&quot;)) 2.3.4.2 Average surface in countries and regions #Distribution of PA WITH SURFACE &gt;0 across countries and regions ##Country data_distrib_no0_ctry = data_stat_nodupl %&gt;% filter(area_km2 != 0) %&gt;% group_by(iso3, country_en, country_fr) %&gt;% summarize(n = n(), freq = round(n/nrow(data_stat_nodupl), 1)*100) %&gt;% ungroup() ##Region data_distrib_no0_region = data_stat_nodupl %&gt;% filter(area_km2 != 0) %&gt;% group_by(region) %&gt;% summarize(n = n(), freq = round(n/nrow(data_stat_nodupl), 1)*100) %&gt;% ungroup() #By country.. ##French tbl_area_avg_ctry_fr = data_distrib_no0_ctry %&gt;% select(-freq) %&gt;% left_join(pa_area_ctry, by = &quot;iso3&quot;) %&gt;% select(-c(iso3, area_tot_km2, tot_area_int)) %&gt;% mutate(area_avg_noint_km2 = format(area_tot_noint_km2/n, big.mark = &quot; &quot;, scientific = FALSE, digits = 1), area_tot_noint_km2 = format(area_tot_noint_km2, big.mark = &quot; &quot;, scientific = FALSE, digits = 1), ) names(tbl_area_avg_ctry_fr) = c(&quot;Pays&quot;, &quot;Nombre d&#39;AP&quot;, &quot;Superficie totale (km2)&quot;, &quot;Superficie moyenne (km2)&quot;) ##English tbl_area_avg_ctry_en = data_distrib_no0_ctry %&gt;% select(-freq) %&gt;% left_join(pa_area_ctry, by = &quot;iso3&quot;) %&gt;% select(-c(iso3, area_tot_km2, tot_area_int)) %&gt;% mutate(area_avg_noint_km2 = format(area_tot_noint_km2/n, big.mark = &quot; &quot;, scientific = FALSE, digits = 1), area_tot_noint_km2 = format(area_tot_noint_km2, big.mark = &quot; &quot;, scientific = FALSE, digits = 1), ) names(tbl_area_avg_ctry_en) = c(&quot;Country&quot;, &quot;Number of PAs&quot;, &quot;Total area (km2)&quot;, &quot;Average area (km2)&quot;) #By region ##French tbl_area_avg_region_fr = data_distrib_no0_region %&gt;% select(-freq) %&gt;% left_join(pa_area_region, by = &quot;region&quot;) %&gt;% select(-c(area_tot_km2, tot_area_int, region)) %&gt;% mutate(area_avg_noint_km2 = format(area_tot_noint_km2/n, big.mark = &quot; &quot;, scientific = FALSE, digits = 1), area_tot_noint_km2 = format(area_tot_noint_km2, big.mark = &quot; &quot;, scientific = FALSE, digits = 1), ) names(tbl_area_avg_region_fr) = c(&quot;Région&quot;, &quot;Nombre d&#39;AP&quot;, &quot;Superficie totale (km2)&quot;, &quot;Superficie moyenne (km2)&quot;) ##English tbl_area_avg_region_en = data_distrib_no0_region %&gt;% select(-freq) %&gt;% left_join(pa_area_region, by = &quot;region&quot;) %&gt;% select(-c(area_tot_km2, tot_area_int, region)) %&gt;% mutate(area_avg_noint_km2 = format(area_tot_noint_km2/n, big.mark = &quot; &quot;, scientific = FALSE, digits = 1), area_tot_noint_km2 = format(area_tot_noint_km2, big.mark = &quot; &quot;, scientific = FALSE, digits = 1), ) names(tbl_area_avg_region_en) = c(&quot;Rgion&quot;, &quot;Number of PAs&quot;, &quot;Total area (km2)&quot;, &quot;Average area (km2)&quot;) #Saving figures tmp = paste(tempdir(), &quot;fig&quot;, sep = &quot;/&quot;) print(xtable(tbl_distrib_area_no0, type = &quot;latex&quot;), file = paste(tmp, &quot;tbl_distrib_area_no0.tex&quot;, sep = &quot;/&quot;)) print(xtable(tbl_area_avg_ctry_fr, type = &quot;latex&quot;), file = paste(tmp, &quot;tbl_area_avg_ctry_fr.tex&quot;, sep = &quot;/&quot;)) print(xtable(tbl_area_avg_ctry_en, type = &quot;latex&quot;), file = paste(tmp, &quot;tbl_area_avg_ctry_en.tex&quot;, sep = &quot;/&quot;)) print(xtable(tbl_area_avg_region_fr, type = &quot;latex&quot;), file = paste(tmp, &quot;tbl_area_avg_region_fr.tex&quot;, sep = &quot;/&quot;)) print(xtable(tbl_area_avg_region_en, type = &quot;latex&quot;), file = paste(tmp, &quot;tbl_area_avg_region_en.tex&quot;, sep = &quot;/&quot;)) #Export to S3 storage ##List of files to save in the temp folder files &lt;- list.files(tmp, full.names = TRUE) ##Add each file in the bucket (same foler for every file in the temp) count = 0 for(f in files) { count = count+1 cat(&quot;Uploading file&quot;, paste0(count, &quot;/&quot;, length(files), &quot; &#39;&quot;, f, &quot;&#39;&quot;), &quot;\\n&quot;) aws.s3::put_object(file = f, bucket = &quot;projet-afd-eva-ap/descriptive_stats/surface/world&quot;, region = &quot;&quot;, show_progress = TRUE) } #Erase the files in the temp directory do.call(file.remove, list(list.files(tmp, full.names = TRUE))) 2.3.5 Temporal evolution 2.3.5.1 Number of PAs (world, all) data_time_range = data.frame(year = c(min(data_stat_nodupl$year_funding_first, na.rm = TRUE):max(data_stat_nodupl$year_funding_first, na.rm = TRUE)) ) data_time_n = data_stat_nodupl %&gt;% #filter(is.na(year_funding_first) == FALSE) %&gt;% group_by(year_funding_first) %&gt;% summarize(n = n()) %&gt;% full_join(data_time_range, by = c(&quot;year_funding_first&quot; = &quot;year&quot;)) %&gt;% mutate(n = case_when(is.na(n)~0, TRUE~n)) %&gt;% arrange(year_funding_first) %&gt;% mutate(n_cum = cumsum(n)) #Number of PAs funded by year #French fig_n_pa_fr = ggplot(subset(data_time_n, is.na(year_funding_first) == FALSE), aes(x = factor(year_funding_first), y = n)) %&gt;% + geom_bar(stat = &#39;identity&#39;, fill = &quot;#3182BD&quot;) %&gt;% # + geom_text(aes(y = n, label = ifelse(n == 0, NA, n)), # color = &quot;black&quot;, size=4, vjust = -0.3) %&gt;% + labs(title = &quot;Nombre d&#39;aires protégées appuyées par année par l&#39;AFD&quot;, subtitle = paste(&quot;Echantillon :&quot;, sum(subset(data_time_n, is.na(year_funding_first) == FALSE)$n), &quot;aires protégées&quot;), caption = paste(&quot;Sur les&quot;, sum(data_time_n$n), &quot;aires protégées financées recensées,&quot;, sum(subset(data_time_n, is.na(year_funding_first) == TRUE)$n, na.rm = TRUE), &quot;ont une date de financement inconnue.&quot;), x = &quot;Année&quot;, y = &quot;Nombre d&#39;aires protégées&quot;) %&gt;% + theme(legend.position = &quot;bottom&quot;, legend.key = element_rect(fill = &quot;white&quot;), plot.title = element_text(size = 14, face = &quot;bold&quot;), axis.text.x = element_text(angle = 45,size=10, hjust = .5, vjust = .6), axis.title.x = element_text(margin = margin(t = 10)), panel.background = element_rect(fill = &#39;white&#39;, colour = &#39;white&#39;, linewidth = 0.5, linetype = &#39;solid&#39;), panel.grid.major = element_line(colour = &#39;grey90&#39;, linetype = &#39;solid&#39;), panel.grid.minor = element_line(colour = &#39;grey90&#39;, linetype = &#39;solid&#39;), plot.caption = element_text(color = &#39;grey50&#39;, size = 8.5, face = &#39;plain&#39;, hjust = 0)) fig_n_pa_fr #English fig_n_pa_en = ggplot(subset(data_time_n, is.na(year_funding_first) == FALSE), aes(x = factor(year_funding_first), y = n)) %&gt;% + geom_bar(stat = &#39;identity&#39;, fill = &quot;#3182BD&quot;) %&gt;% # + geom_text(aes(y = n, label = ifelse(n == 0, NA, n)), # color = &quot;black&quot;, size=4, vjust = -0.3) %&gt;% + labs(title = &quot;Number of protected areas funded each year by AFD&quot;, subtitle = paste(&quot;Sample :&quot;, sum(subset(data_time_n, is.na(year_funding_first) == FALSE)$n), &quot;protected areas&quot;), caption = paste(&quot;Out of&quot;, sum(data_time_n$n), &quot;known funded protected areas,&quot;, sum(subset(data_time_n, is.na(year_funding_first) == TRUE)$n, na.rm = TRUE), &quot;have unknown funding year.&quot;), x = &quot;Year&quot;, y = &quot;Number of protected areas&quot;) %&gt;% + theme(legend.position = &quot;bottom&quot;, legend.key = element_rect(fill = &quot;white&quot;), plot.title = element_text(size = 14, face = &quot;bold&quot;), axis.text.x = element_text(angle = 45,size=10, hjust = .5, vjust = .6), axis.title.x = element_text(margin = margin(t = 10)), panel.background = element_rect(fill = &#39;white&#39;, colour = &#39;white&#39;, linewidth = 0.5, linetype = &#39;solid&#39;), panel.grid.major = element_line(colour = &#39;grey90&#39;, linetype = &#39;solid&#39;), panel.grid.minor = element_line(colour = &#39;grey90&#39;, linetype = &#39;solid&#39;), plot.caption = element_text(color = &#39;grey50&#39;, size = 8.5, face = &#39;plain&#39;, hjust = 0)) fig_n_pa_en #Cumulative number over time #French fig_ncum_pa_fr = ggplot(subset(data_time_n, is.na(year_funding_first) == FALSE), aes(x = factor(year_funding_first), y = n_cum)) %&gt;% # + geom_point(color = &quot;#3182BD&quot;, size = 1.5) %&gt;% # + geom_line(color = &quot;#3182BD&quot;, size = 1) %&gt;% + geom_bar(stat = &#39;identity&#39;, fill = &quot;#3182BD&quot;) %&gt;% + geom_text(aes(y = n_cum, label = n_cum), color = &quot;black&quot;, size=3, vjust = -0.3) %&gt;% + labs(title = &quot;Evolution cumulée du nombre d&#39;aires protégées appuyées par l&#39;AFD&quot;, subtitle = paste(&quot;Echantillon :&quot;, sum(subset(data_time_n, is.na(year_funding_first) == FALSE)$n), &quot;aires protégées&quot;), caption = paste(&quot;Sur les&quot;, sum(data_time_n$n), &quot;aires protégées financées recensées,&quot;, sum(subset(data_time_n, is.na(year_funding_first) == TRUE)$n, na.rm = TRUE), &quot;ont une date de financement inconnue.&quot;), x = &quot;Année&quot;, y = &quot;Nombre d&#39;aires protégées&quot;) %&gt;% + theme(legend.position = &quot;bottom&quot;, legend.key = element_rect(fill = &quot;white&quot;), plot.title = element_text(size = 14, face = &quot;bold&quot;), axis.text.x = element_text(angle = 45,size=10, hjust = .5, vjust = .6), axis.title.x = element_text(margin = margin(t = 10)), panel.background = element_rect(fill = &#39;white&#39;, colour = &#39;white&#39;, linewidth = 0.5, linetype = &#39;solid&#39;), panel.grid.major = element_line(colour = &#39;grey90&#39;, linetype = &#39;solid&#39;), panel.grid.minor = element_line(colour = &#39;grey90&#39;, linetype = &#39;solid&#39;), plot.caption = element_text(color = &#39;grey50&#39;, size = 8.5, face = &#39;plain&#39;, hjust = 0)) fig_ncum_pa_fr #English fig_ncum_pa_en = ggplot(subset(data_time_n, is.na(year_funding_first) == FALSE), aes(x = factor(year_funding_first), y = n_cum)) %&gt;% # + geom_point(color = &quot;#3182BD&quot;, size = 1.5) %&gt;% # + geom_line(color = &quot;#3182BD&quot;, size = 1) %&gt;% + geom_bar(stat = &#39;identity&#39;, fill = &quot;#3182BD&quot;) %&gt;% + geom_text(aes(y = n_cum, label = n_cum), color = &quot;black&quot;, size=3, vjust = -0.3) %&gt;% + labs(title = &quot;Cumulative number of protected areas funded by AFD&quot;, subtitle = paste(&quot;Sample :&quot;, sum(subset(data_time_n, is.na(year_funding_first) == FALSE)$n), &quot;protected areas&quot;), caption = paste(&quot;Out of&quot;, sum(data_time_n$n), &quot;known funded protected areas,&quot;, sum(subset(data_time_n, is.na(year_funding_first) == TRUE)$n, na.rm = TRUE), &quot;have unknown funding year.&quot;), x = &quot;Year&quot;, y = &quot;Number of protected areas&quot;) %&gt;% + theme(legend.position = &quot;bottom&quot;, legend.key = element_rect(fill = &quot;white&quot;), plot.title = element_text(size = 14, face = &quot;bold&quot;), axis.text.x = element_text(angle = 45,size=10, hjust = .5, vjust = .6), axis.title.x = element_text(margin = margin(t = 10)), panel.background = element_rect(fill = &#39;white&#39;, colour = &#39;white&#39;, linewidth = 0.5, linetype = &#39;solid&#39;), panel.grid.major = element_line(colour = &#39;grey90&#39;, linetype = &#39;solid&#39;), panel.grid.minor = element_line(colour = &#39;grey90&#39;, linetype = &#39;solid&#39;), plot.caption = element_text(color = &#39;grey50&#39;, size = 8.5, face = &#39;plain&#39;, hjust = 0)) fig_ncum_pa_en #Saving figures tmp = paste(tempdir(), &quot;fig&quot;, sep = &quot;/&quot;) ggsave(paste(tmp, &quot;fig_n_pa_fr.png&quot;, sep = &quot;/&quot;), fig_n_pa_fr, device = &quot;png&quot;, height = 6, width = 9) ggsave(paste(tmp, &quot;fig_n_pa_en.png&quot;, sep = &quot;/&quot;), fig_n_pa_en, device = &quot;png&quot;, height = 6, width = 9) ggsave(paste(tmp, &quot;fig_ncum_pa_fr.png&quot;, sep = &quot;/&quot;), fig_ncum_pa_fr, device = &quot;png&quot;, height = 6, width = 9) ggsave(paste(tmp, &quot;fig_ncum_pa_en.png&quot;, sep = &quot;/&quot;), fig_ncum_pa_en, device = &quot;png&quot;, height = 6, width = 9) #Export to S3 storage ##List of files to save in the temp folder files &lt;- list.files(tmp, full.names = TRUE) ##Add each file in the bucket (same foler for every file in the temp) count = 0 for(f in files) { count = count+1 cat(&quot;Uploading file&quot;, paste0(count, &quot;/&quot;, length(files), &quot; &#39;&quot;, f, &quot;&#39;&quot;), &quot;\\n&quot;) aws.s3::put_object(file = f, bucket = &quot;projet-afd-eva-ap/descriptive_stats/time_evolution/world/all&quot;, region = &quot;&quot;, show_progress = TRUE) } #Erase the files in the temp directory do.call(file.remove, list(list.files(tmp, full.names = TRUE))) 2.3.5.2 Number of PAs (world, non-marine) data_time_range = data.frame(year = c(min(data_stat_nodupl$year_funding_first, na.rm = TRUE):max(data_stat_nodupl$year_funding_first, na.rm = TRUE)) ) data_time_n = data_stat_nodupl %&gt;% filter(marine %in% c(0,1)) %&gt;% #filter(is.na(year_funding_first) == FALSE) %&gt;% group_by(year_funding_first) %&gt;% summarize(n = n()) %&gt;% full_join(data_time_range, by = c(&quot;year_funding_first&quot; = &quot;year&quot;)) %&gt;% mutate(n = case_when(is.na(n)~0, TRUE~n)) %&gt;% arrange(year_funding_first) %&gt;% mutate(n_cum = cumsum(n)) #Number of PAs funded by year #French fig_n_pa_fr = ggplot(subset(data_time_n, is.na(year_funding_first) == FALSE), aes(x = factor(year_funding_first), y = n)) %&gt;% + geom_bar(stat = &#39;identity&#39;, fill = &quot;#3182BD&quot;) %&gt;% # + geom_text(aes(y = n, label = ifelse(n == 0, NA, n)), # color = &quot;black&quot;, size=4, vjust = -0.3) %&gt;% + labs(title = &quot;Nombre d&#39;aires protégées non-marines appuyées par année par l&#39;AFD&quot;, subtitle = paste(&quot;Echantillon :&quot;, sum(subset(data_time_n, is.na(year_funding_first) == FALSE)$n), &quot;aires protégées&quot;), caption = paste(&quot;Sur les&quot;, sum(data_time_n$n), &quot;aires protégées non-marines financées recensées,&quot;, sum(subset(data_time_n, is.na(year_funding_first) == TRUE)$n, na.rm = TRUE), &quot;ont une date de financement inconnue.&quot;), x = &quot;Année&quot;, y = &quot;Nombre d&#39;aires protégées&quot;) %&gt;% + theme(legend.position = &quot;bottom&quot;, legend.key = element_rect(fill = &quot;white&quot;), plot.title = element_text(size = 14, face = &quot;bold&quot;), axis.text.x = element_text(angle = 45,size=10, hjust = .5, vjust = .6), axis.title.x = element_text(margin = margin(t = 10)), panel.background = element_rect(fill = &#39;white&#39;, colour = &#39;white&#39;, linewidth = 0.5, linetype = &#39;solid&#39;), panel.grid.major = element_line(colour = &#39;grey90&#39;, linetype = &#39;solid&#39;), panel.grid.minor = element_line(colour = &#39;grey90&#39;, linetype = &#39;solid&#39;), plot.caption = element_text(color = &#39;grey50&#39;, size = 8.5, face = &#39;plain&#39;, hjust = 0)) fig_n_pa_fr #English fig_n_pa_en = ggplot(subset(data_time_n, is.na(year_funding_first) == FALSE), aes(x = factor(year_funding_first), y = n)) %&gt;% + geom_bar(stat = &#39;identity&#39;, fill = &quot;#3182BD&quot;) %&gt;% # + geom_text(aes(y = n, label = ifelse(n == 0, NA, n)), # color = &quot;black&quot;, size=4, vjust = -0.3) %&gt;% + labs(title = &quot;Number of non-marine protected areas funded each year by AFD&quot;, subtitle = paste(&quot;Sample :&quot;, sum(subset(data_time_n, is.na(year_funding_first) == FALSE)$n), &quot;protected areas&quot;), caption = paste(&quot;Out of&quot;, sum(data_time_n$n), &quot;known, non-marine funded protected areas,&quot;, sum(subset(data_time_n, is.na(year_funding_first) == TRUE)$n, na.rm = TRUE), &quot;have unknown funding year.&quot;), x = &quot;Year&quot;, y = &quot;Number of protected areas&quot;) %&gt;% + theme(legend.position = &quot;bottom&quot;, legend.key = element_rect(fill = &quot;white&quot;), plot.title = element_text(size = 14, face = &quot;bold&quot;), axis.text.x = element_text(angle = 45,size=10, hjust = .5, vjust = .6), axis.title.x = element_text(margin = margin(t = 10)), panel.background = element_rect(fill = &#39;white&#39;, colour = &#39;white&#39;, linewidth = 0.5, linetype = &#39;solid&#39;), panel.grid.major = element_line(colour = &#39;grey90&#39;, linetype = &#39;solid&#39;), panel.grid.minor = element_line(colour = &#39;grey90&#39;, linetype = &#39;solid&#39;), plot.caption = element_text(color = &#39;grey50&#39;, size = 8.5, face = &#39;plain&#39;, hjust = 0)) fig_n_pa_en #Cumulative number over time #French fig_ncum_pa_fr = ggplot(subset(data_time_n, is.na(year_funding_first) == FALSE), aes(x = factor(year_funding_first), y = n_cum)) %&gt;% # + geom_point(color = &quot;#3182BD&quot;, size = 1.5) %&gt;% # + geom_line(color = &quot;#3182BD&quot;, size = 1) %&gt;% + geom_bar(stat = &#39;identity&#39;, fill = &quot;#3182BD&quot;) %&gt;% + geom_text(aes(y = n_cum, label = n_cum), color = &quot;black&quot;, size=3, vjust = -0.3) %&gt;% + labs(title = &quot;Evolution cumulée du nombre d&#39;aires protégées non-marines appuyées par l&#39;AFD&quot;, subtitle = paste(&quot;Echantillon :&quot;, sum(subset(data_time_n, is.na(year_funding_first) == FALSE)$n), &quot;aires protégées&quot;), caption = paste(&quot;Sur les&quot;, sum(data_time_n$n), &quot;aires protégées non-marines financées recensées,&quot;, sum(subset(data_time_n, is.na(year_funding_first) == TRUE)$n, na.rm = TRUE), &quot;ont une date de financement inconnue.&quot;), x = &quot;Année&quot;, y = &quot;Nombre d&#39;aires protégées&quot;) %&gt;% + theme(legend.position = &quot;bottom&quot;, legend.key = element_rect(fill = &quot;white&quot;), plot.title = element_text(size = 14, face = &quot;bold&quot;), axis.text.x = element_text(angle = 45,size=10, hjust = .5, vjust = .6), axis.title.x = element_text(margin = margin(t = 10)), panel.background = element_rect(fill = &#39;white&#39;, colour = &#39;white&#39;, linewidth = 0.5, linetype = &#39;solid&#39;), panel.grid.major = element_line(colour = &#39;grey90&#39;, linetype = &#39;solid&#39;), panel.grid.minor = element_line(colour = &#39;grey90&#39;, linetype = &#39;solid&#39;), plot.caption = element_text(color = &#39;grey50&#39;, size = 8.5, face = &#39;plain&#39;, hjust = 0)) fig_ncum_pa_fr #English fig_ncum_pa_en = ggplot(subset(data_time_n, is.na(year_funding_first) == FALSE), aes(x = factor(year_funding_first), y = n_cum)) %&gt;% # + geom_point(color = &quot;#3182BD&quot;, size = 1.5) %&gt;% # + geom_line(color = &quot;#3182BD&quot;, size = 1) %&gt;% + geom_bar(stat = &#39;identity&#39;, fill = &quot;#3182BD&quot;) %&gt;% + geom_text(aes(y = n_cum, label = n_cum), color = &quot;black&quot;, size=3, vjust = -0.3) %&gt;% + labs(title = &quot;Cumulative number of non-marine protected areas funded by AFD&quot;, subtitle = paste(&quot;Sample :&quot;, sum(subset(data_time_n, is.na(year_funding_first) == FALSE)$n), &quot;protected areas&quot;), caption = paste(&quot;Out of&quot;, sum(data_time_n$n), &quot;known, non-marine funded protected areas,&quot;, sum(subset(data_time_n, is.na(year_funding_first) == TRUE)$n, na.rm = TRUE), &quot;have unknown funding year.&quot;), x = &quot;Year&quot;, y = &quot;Number of protected areas&quot;) %&gt;% + theme(legend.position = &quot;bottom&quot;, legend.key = element_rect(fill = &quot;white&quot;), plot.title = element_text(size = 14, face = &quot;bold&quot;), axis.text.x = element_text(angle = 45,size=10, hjust = .5, vjust = .6), axis.title.x = element_text(margin = margin(t = 10)), panel.background = element_rect(fill = &#39;white&#39;, colour = &#39;white&#39;, linewidth = 0.5, linetype = &#39;solid&#39;), panel.grid.major = element_line(colour = &#39;grey90&#39;, linetype = &#39;solid&#39;), panel.grid.minor = element_line(colour = &#39;grey90&#39;, linetype = &#39;solid&#39;), plot.caption = element_text(color = &#39;grey50&#39;, size = 8.5, face = &#39;plain&#39;, hjust = 0)) fig_ncum_pa_en #Saving figures tmp = paste(tempdir(), &quot;fig&quot;, sep = &quot;/&quot;) ggsave(paste(tmp, &quot;fig_n_pa_fr.png&quot;, sep = &quot;/&quot;), fig_n_pa_fr, device = &quot;png&quot;, height = 6, width = 9) ggsave(paste(tmp, &quot;fig_n_pa_en.png&quot;, sep = &quot;/&quot;), fig_n_pa_en, device = &quot;png&quot;, height = 6, width = 9) ggsave(paste(tmp, &quot;fig_ncum_pa_fr.png&quot;, sep = &quot;/&quot;), fig_ncum_pa_fr, device = &quot;png&quot;, height = 6, width = 9) ggsave(paste(tmp, &quot;fig_ncum_pa_en.png&quot;, sep = &quot;/&quot;), fig_ncum_pa_en, device = &quot;png&quot;, height = 6, width = 9) #Export to S3 storage ##List of files to save in the temp folder files &lt;- list.files(tmp, full.names = TRUE) ##Add each file in the bucket (same foler for every file in the temp) count = 0 for(f in files) { count = count+1 cat(&quot;Uploading file&quot;, paste0(count, &quot;/&quot;, length(files), &quot; &#39;&quot;, f, &quot;&#39;&quot;), &quot;\\n&quot;) aws.s3::put_object(file = f, bucket = &quot;projet-afd-eva-ap/descriptive_stats/time_evolution/world/no_marine&quot;, region = &quot;&quot;, show_progress = TRUE) } #Erase the files in the temp directory do.call(file.remove, list(list.files(tmp, full.names = TRUE))) 2.3.5.3 Number of PAs (region, non-marine) roi = &quot;Africa&quot; data_time_range = data.frame(year = c(min(data_stat_nodupl$year_funding_first, na.rm = TRUE):max(data_stat_nodupl$year_funding_first, na.rm = TRUE)) ) data_time_n = data_stat_nodupl %&gt;% filter(region == roi &amp; marine %in% c(0,1)) %&gt;% #filter(is.na(year_funding_first) == FALSE) %&gt;% group_by(year_funding_first) %&gt;% summarize(n = n()) %&gt;% full_join(data_time_range, by = c(&quot;year_funding_first&quot; = &quot;year&quot;)) %&gt;% mutate(n = case_when(is.na(n)~0, TRUE~n)) %&gt;% arrange(year_funding_first) %&gt;% mutate(n_cum = cumsum(n)) #Number of PAs funded by year #French fig_n_pa_fr = ggplot(subset(data_time_n, is.na(year_funding_first) == FALSE), aes(x = factor(year_funding_first), y = n)) %&gt;% + geom_bar(stat = &#39;identity&#39;, fill = &quot;#3182BD&quot;) %&gt;% # + geom_text(aes(y = n, label = ifelse(n == 0, NA, n)), # color = &quot;black&quot;, size=4, vjust = -0.3) %&gt;% + labs(title = paste(&quot;Nombre d&#39;aires protégées non-marines appuyées par année par l&#39;AFD,&quot;, roi), subtitle = paste(&quot;Echantillon :&quot;, sum(subset(data_time_n, is.na(year_funding_first) == FALSE)$n), &quot;aires protégées&quot;), caption = paste(&quot;Sur les&quot;, sum(data_time_n$n), &quot;aires protégées non-marines financées recensées,&quot;, sum(subset(data_time_n, is.na(year_funding_first) == TRUE)$n, na.rm = TRUE), &quot;ont une date de financement inconnue.&quot;), x = &quot;Année&quot;, y = &quot;Nombre d&#39;aires protégées&quot;) %&gt;% + theme(legend.position = &quot;bottom&quot;, legend.key = element_rect(fill = &quot;white&quot;), plot.title = element_text(size = 14, face = &quot;bold&quot;), axis.text.x = element_text(angle = 45,size=10, hjust = .5, vjust = .6), axis.title.x = element_text(margin = margin(t = 10)), panel.background = element_rect(fill = &#39;white&#39;, colour = &#39;white&#39;, linewidth = 0.5, linetype = &#39;solid&#39;), panel.grid.major = element_line(colour = &#39;grey90&#39;, linetype = &#39;solid&#39;), panel.grid.minor = element_line(colour = &#39;grey90&#39;, linetype = &#39;solid&#39;), plot.caption = element_text(color = &#39;grey50&#39;, size = 8.5, face = &#39;plain&#39;, hjust = 0)) fig_n_pa_fr #English fig_n_pa_en = ggplot(subset(data_time_n, is.na(year_funding_first) == FALSE), aes(x = factor(year_funding_first), y = n)) %&gt;% + geom_bar(stat = &#39;identity&#39;, fill = &quot;#3182BD&quot;) %&gt;% # + geom_text(aes(y = n, label = ifelse(n == 0, NA, n)), # color = &quot;black&quot;, size=4, vjust = -0.3) %&gt;% + labs(title = paste(&quot;Number of non-marine protected areas funded each year by AFD,&quot;, roi), subtitle = paste(&quot;Sample :&quot;, sum(subset(data_time_n, is.na(year_funding_first) == FALSE)$n), &quot;protected areas&quot;), caption = paste(&quot;Out of&quot;, sum(data_time_n$n), &quot;known non-marine, funded protected areas,&quot;, sum(subset(data_time_n, is.na(year_funding_first) == TRUE)$n, na.rm = TRUE), &quot;have unknown funding year.&quot;), x = &quot;Year&quot;, y = &quot;Number of protected areas&quot;) %&gt;% + theme(legend.position = &quot;bottom&quot;, legend.key = element_rect(fill = &quot;white&quot;), plot.title = element_text(size = 14, face = &quot;bold&quot;), axis.text.x = element_text(angle = 45,size=10, hjust = .5, vjust = .6), axis.title.x = element_text(margin = margin(t = 10)), panel.background = element_rect(fill = &#39;white&#39;, colour = &#39;white&#39;, linewidth = 0.5, linetype = &#39;solid&#39;), panel.grid.major = element_line(colour = &#39;grey90&#39;, linetype = &#39;solid&#39;), panel.grid.minor = element_line(colour = &#39;grey90&#39;, linetype = &#39;solid&#39;), plot.caption = element_text(color = &#39;grey50&#39;, size = 8.5, face = &#39;plain&#39;, hjust = 0)) fig_n_pa_en #Cumulative number over time #French fig_ncum_pa_fr = ggplot(subset(data_time_n, is.na(year_funding_first) == FALSE), aes(x = factor(year_funding_first), y = n_cum)) %&gt;% # + geom_point(color = &quot;#3182BD&quot;, size = 1.5) %&gt;% # + geom_line(color = &quot;#3182BD&quot;, size = 1) %&gt;% + geom_bar(stat = &#39;identity&#39;, fill = &quot;#3182BD&quot;) %&gt;% + geom_text(aes(y = n_cum, label = n_cum), color = &quot;black&quot;, size=3, vjust = -0.3) %&gt;% + labs(title = paste(&quot;Evolution cumulée du nombre d&#39;aires protégées non-marines,&quot;, roi), subtitle = paste(&quot;Echantillon :&quot;, sum(subset(data_time_n, is.na(year_funding_first) == FALSE)$n), &quot;aires protégées&quot;), caption = paste(&quot;Sur les&quot;, sum(data_time_n$n), &quot;aires protégées non-marines financées recensées,&quot;, sum(subset(data_time_n, is.na(year_funding_first) == TRUE)$n, na.rm = TRUE), &quot;ont une date de financement inconnue.&quot;), x = &quot;Année&quot;, y = &quot;Nombre d&#39;aires protégées&quot;) %&gt;% + theme(legend.position = &quot;bottom&quot;, legend.key = element_rect(fill = &quot;white&quot;), plot.title = element_text(size = 14, face = &quot;bold&quot;), axis.text.x = element_text(angle = 45,size=10, hjust = .5, vjust = .6), axis.title.x = element_text(margin = margin(t = 10)), panel.background = element_rect(fill = &#39;white&#39;, colour = &#39;white&#39;, linewidth = 0.5, linetype = &#39;solid&#39;), panel.grid.major = element_line(colour = &#39;grey90&#39;, linetype = &#39;solid&#39;), panel.grid.minor = element_line(colour = &#39;grey90&#39;, linetype = &#39;solid&#39;), plot.caption = element_text(color = &#39;grey50&#39;, size = 8.5, face = &#39;plain&#39;, hjust = 0)) fig_ncum_pa_fr #English fig_ncum_pa_en = ggplot(subset(data_time_n, is.na(year_funding_first) == FALSE), aes(x = factor(year_funding_first), y = n_cum)) %&gt;% # + geom_point(color = &quot;#3182BD&quot;, size = 1.5) %&gt;% # + geom_line(color = &quot;#3182BD&quot;, size = 1) %&gt;% + geom_bar(stat = &#39;identity&#39;, fill = &quot;#3182BD&quot;) %&gt;% + geom_text(aes(y = n_cum, label = n_cum), color = &quot;black&quot;, size=3, vjust = -0.3) %&gt;% + labs(title = paste(&quot;Cumulated number of non-marine protected areas funded by AFD,&quot;, roi), subtitle = paste(&quot;Sample :&quot;, sum(subset(data_time_n, is.na(year_funding_first) == FALSE)$n), &quot;protected areas&quot;), caption = paste(&quot;Out of&quot;, sum(data_time_n$n), &quot;known non-marine, funded protected areas,&quot;, sum(subset(data_time_n, is.na(year_funding_first) == TRUE)$n, na.rm = TRUE), &quot;have unknown funding year.&quot;), x = &quot;Year&quot;, y = &quot;Number of protected areas&quot;) %&gt;% + theme(legend.position = &quot;bottom&quot;, legend.key = element_rect(fill = &quot;white&quot;), plot.title = element_text(size = 14, face = &quot;bold&quot;), axis.text.x = element_text(angle = 45,size=10, hjust = .5, vjust = .6), axis.title.x = element_text(margin = margin(t = 10)), panel.background = element_rect(fill = &#39;white&#39;, colour = &#39;white&#39;, linewidth = 0.5, linetype = &#39;solid&#39;), panel.grid.major = element_line(colour = &#39;grey90&#39;, linetype = &#39;solid&#39;), panel.grid.minor = element_line(colour = &#39;grey90&#39;, linetype = &#39;solid&#39;), plot.caption = element_text(color = &#39;grey50&#39;, size = 8.5, face = &#39;plain&#39;, hjust = 0)) fig_ncum_pa_en #Saving figures tmp = paste(tempdir(), &quot;fig&quot;, sep = &quot;/&quot;) ggsave(paste(tmp, &quot;fig_n_pa_fr.png&quot;, sep = &quot;/&quot;), fig_n_pa_fr, device = &quot;png&quot;, height = 6, width = 9) ggsave(paste(tmp, &quot;fig_n_pa_en.png&quot;, sep = &quot;/&quot;), fig_n_pa_en, device = &quot;png&quot;, height = 6, width = 9) ggsave(paste(tmp, &quot;fig_ncum_pa_fr.png&quot;, sep = &quot;/&quot;), fig_ncum_pa_fr, device = &quot;png&quot;, height = 6, width = 9) ggsave(paste(tmp, &quot;fig_ncum_pa_en.png&quot;, sep = &quot;/&quot;), fig_ncum_pa_en, device = &quot;png&quot;, height = 6, width = 9) #Export to S3 storage ##List of files to save in the temp folder files &lt;- list.files(tmp, full.names = TRUE) ##Add each file in the bucket (same foler for every file in the temp) count = 0 for(f in files) { count = count+1 cat(&quot;Uploading file&quot;, paste0(count, &quot;/&quot;, length(files), &quot; &#39;&quot;, f, &quot;&#39;&quot;), &quot;\\n&quot;) aws.s3::put_object(file = f, bucket = paste(&quot;projet-afd-eva-ap/descriptive_stats/time_evolution&quot;, roi, &quot;no_marine&quot;, sep = &quot;/&quot;), region = &quot;&quot;, show_progress = TRUE) } #Erase the files in the temp directory do.call(file.remove, list(list.files(tmp, full.names = TRUE))) 2.3.5.4 Surface of PAs (world, all) data_time_range = data.frame(year = c(min(data_stat_nodupl$year_funding_first, na.rm = TRUE):max(data_stat_nodupl$year_funding_first, na.rm = TRUE)) ) data_time_area = data_stat_nodupl %&gt;% #filter(is.na(year_funding_first) == FALSE) %&gt;% group_by(year_funding_first) %&gt;% summarize(tot_area_km2 = sum(area_km2), n = n()) %&gt;% left_join(pa_int_yr, by = c(&quot;year_funding_first&quot; = &quot;annee_int&quot;)) %&gt;% full_join(data_time_range, by = c(&quot;year_funding_first&quot; = &quot;year&quot;)) %&gt;% mutate(tot_area_km2 = case_when(is.na(tot_area_km2)~0, TRUE~tot_area_km2), tot_int_km2 = case_when(is.na(tot_int_km2)~0, TRUE~tot_int_km2), tot_area_noint_km2 = tot_area_km2 - tot_int_km2) %&gt;% arrange(year_funding_first) #Evolution of area over time ##French fig_area_pa_fr = ggplot(subset(data_time_area, is.na(year_funding_first) == FALSE), aes(x = factor(year_funding_first), y = tot_area_noint_km2)) %&gt;% + geom_bar(stat = &#39;identity&#39;, fill = &quot;#3182BD&quot;) %&gt;% + geom_text(aes(y = tot_area_noint_km2, label = ifelse(tot_area_noint_km2 != 0, format(tot_area_noint_km2, digits = 2, scientific = TRUE), NA)), color = &quot;black&quot;, size=2, vjust = -0.3) %&gt;% + scale_y_log10(breaks = scales::trans_breaks(&quot;log10&quot;, function(x) 10^x), labels = scales::trans_format(&quot;log10&quot;, scales::math_format(10^.x))) %&gt;% + annotation_logticks(base = 10, sides = &quot;l&quot;, color = &quot;grey20&quot;, outside = &quot;TRUE&quot;, short = unit(.5,&quot;mm&quot;), mid = unit(1,&quot;mm&quot;), long = unit(2,&quot;mm&quot;)) %&gt;% + coord_cartesian(clip = &quot;off&quot;) %&gt;% + labs(title = &quot;Evolution de la superficie financée par l&#39;AFD&quot;, subtitle = paste(&quot;Echantillon :&quot;, sum(subset(data_time_area, is.na(year_funding_first) == FALSE)$n, na.rm = TRUE), &quot;aires protégées couvrant&quot;, format(sum(subset(data_time_area, is.na(year_funding_first) == FALSE)$tot_area_noint_km2), digits = 1, scientific = FALSE, big.mark = &quot; &quot;), &quot;km²&quot;), caption = paste0(&quot;Sur les &quot;, sum(data_time_area$n, na.rm = TRUE), &quot; aires protégées financées recensées, &quot;, sum(subset(data_time_area, is.na(year_funding_first) == FALSE)$n, na.rm = TRUE), &quot; ont une date de financement connue.\\nSoit &quot;, format(sum(subset(data_time_area, is.na(year_funding_first) == FALSE)$tot_area_noint_km2), digits = 1, scientific = FALSE, big.mark = &quot; &quot;), &quot; km² sur &quot;, format(sum(data_time_area$tot_area_noint_km2), digits = 1, scientific = FALSE, big.mark = &quot; &quot;), &quot; km².&quot;), x = &quot;Année&quot;, y = &quot;Superficie (km²)&quot;) %&gt;% + theme(legend.position = &quot;bottom&quot;, legend.key = element_rect(fill = &quot;white&quot;), plot.title = element_text(size = 14, face = &quot;bold&quot;), axis.text.x = element_text(angle = 45,size=10, hjust = .5, vjust = .6), axis.title.x = element_text(margin = margin(t = 10)), panel.background = element_rect(fill = &#39;white&#39;, colour = &#39;white&#39;, linewidth = 0.5, linetype = &#39;solid&#39;), panel.grid.major = element_line(colour = &#39;grey90&#39;, linetype = &#39;solid&#39;), panel.grid.minor = element_line(colour = &#39;grey90&#39;, linetype = &#39;solid&#39;), plot.caption = element_text(color = &#39;grey50&#39;, size = 8.5, face = &#39;plain&#39;, hjust = 0)) fig_area_pa_fr ##English fig_area_pa_en = ggplot(subset(data_time_area, is.na(year_funding_first) == FALSE), aes(x = factor(year_funding_first), y = tot_area_noint_km2)) %&gt;% + geom_bar(stat = &#39;identity&#39;, fill = &quot;#3182BD&quot;) %&gt;% + geom_text(aes(y = tot_area_noint_km2, label = ifelse(tot_area_noint_km2 != 0, format(tot_area_noint_km2, digits = 2, scientific = TRUE), NA)), color = &quot;black&quot;, size=2, vjust = -0.3) %&gt;% + scale_y_log10(breaks = scales::trans_breaks(&quot;log10&quot;, function(x) 10^x), labels = scales::trans_format(&quot;log10&quot;, scales::math_format(10^.x))) %&gt;% + annotation_logticks(base = 10, sides = &quot;l&quot;, color = &quot;grey20&quot;, outside = &quot;TRUE&quot;, short = unit(.5,&quot;mm&quot;), mid = unit(1,&quot;mm&quot;), long = unit(2,&quot;mm&quot;)) %&gt;% + coord_cartesian(clip = &quot;off&quot;) %&gt;% + labs(title = &quot;Evolution of AFD funded area&quot;, subtitle = paste(&quot;Sample :&quot;, sum(subset(data_time_area, is.na(year_funding_first) == FALSE)$n, na.rm = TRUE), &quot;protected areas covering&quot;, format(sum(subset(data_time_area, is.na(year_funding_first) == FALSE)$tot_area_noint_km2), digits = 1, scientific = FALSE, big.mark = &quot; &quot;), &quot;km²&quot;), caption = paste0(&quot;Out of &quot;, sum(data_time_area$n, na.rm = TRUE), &quot; known funded protected areas, &quot;, sum(subset(data_time_area, is.na(year_funding_first) == FALSE)$n, na.rm = TRUE), &quot; have a known funding year.\\nIn terms of area, &quot;, format(sum(subset(data_time_area, is.na(year_funding_first) == FALSE)$tot_area_noint_km2), digits = 1, scientific = FALSE, big.mark = &quot; &quot;), &quot; km² out of &quot;, format(sum(data_time_area$tot_area_noint_km2), digits = 1, scientific = FALSE, big.mark = &quot; &quot;), &quot; km².&quot;), x = &quot;Year&quot;, y = &quot;Area (km²)&quot;) %&gt;% + theme(legend.position = &quot;bottom&quot;, legend.key = element_rect(fill = &quot;white&quot;), plot.title = element_text(size = 14, face = &quot;bold&quot;), axis.text.x = element_text(angle = 45,size=10, hjust = .5, vjust = .6), axis.title.x = element_text(margin = margin(t = 10)), panel.background = element_rect(fill = &#39;white&#39;, colour = &#39;white&#39;, linewidth = 0.5, linetype = &#39;solid&#39;), panel.grid.major = element_line(colour = &#39;grey90&#39;, linetype = &#39;solid&#39;), panel.grid.minor = element_line(colour = &#39;grey90&#39;, linetype = &#39;solid&#39;), plot.caption = element_text(color = &#39;grey50&#39;, size = 8.5, face = &#39;plain&#39;, hjust = 0)) fig_area_pa_en #Cumulative area over time ##French fig_area_cum_pa_fr = ggplot(subset(data_time_area, is.na(year_funding_first) == FALSE), aes(x = factor(year_funding_first), y = cumsum(tot_area_noint_km2))) %&gt;% # + geom_point(color = &quot;#3182BD&quot;, size = 1.5) %&gt;% # + geom_line(color = &quot;#3182BD&quot;, size = 1) %&gt;% + geom_bar(stat = &#39;identity&#39;, fill = &quot;#3182BD&quot;) %&gt;% + geom_text(aes(y = cumsum(tot_area_noint_km2), label = format(cumsum(tot_area_noint_km2), digits = 2, scientific = TRUE)), color = &quot;black&quot;, size=2, vjust = -0.3) %&gt;% + labs(title = &quot;Evolution cumulée de la superficie des aires protégées, financées par l&#39;AFD&quot;, subtitle = paste(&quot;Echantillon :&quot;, sum(subset(data_time_area, is.na(year_funding_first) == FALSE)$n, na.rm = TRUE), &quot;aires protégées couvrant&quot;, format(sum(subset(data_time_area, is.na(year_funding_first) == FALSE)$tot_area_noint_km2), digits = 1, scientific = FALSE, big.mark = &quot; &quot;), &quot;km²&quot;), caption = paste0(&quot;Sur les &quot;, sum(data_time_area$n), &quot; aires protégées financées recensées, &quot;, sum(subset(data_time_area, is.na(year_funding_first) == FALSE)$n, na.rm = TRUE), &quot; ont une date de financement connue.\\nSoit &quot;, format(sum(subset(data_time_area, is.na(year_funding_first) == FALSE)$tot_area_noint_km2), digits = 1, scientific = FALSE, big.mark = &quot; &quot;), &quot; km² sur &quot;, format(sum(data_time_area$tot_area_noint_km2), digits = 1, scientific = FALSE, big.mark = &quot; &quot;), &quot; km².&quot;), x = &quot;Année&quot;, y = &quot;Superficie (km²)&quot;) %&gt;% + theme(legend.position = &quot;bottom&quot;, legend.key = element_rect(fill = &quot;white&quot;), plot.title = element_text(size = 14, face = &quot;bold&quot;), axis.text.x = element_text(angle = 45,size=10, hjust = .5, vjust = .6), axis.title.x = element_text(margin = margin(t = 10)), panel.background = element_rect(fill = &#39;white&#39;, colour = &#39;white&#39;, linewidth = 0.5, linetype = &#39;solid&#39;), panel.grid.major = element_line(colour = &#39;grey90&#39;, linetype = &#39;solid&#39;), panel.grid.minor = element_line(colour = &#39;grey90&#39;, linetype = &#39;solid&#39;), plot.caption = element_text(color = &#39;grey50&#39;, size = 8.5, face = &#39;plain&#39;, hjust = 0)) fig_area_cum_pa_fr #English fig_area_cum_pa_en = ggplot(subset(data_time_area, is.na(year_funding_first) == FALSE), aes(x = factor(year_funding_first), y = cumsum(tot_area_noint_km2))) %&gt;% # + geom_point(color = &quot;#3182BD&quot;, size = 1.5) %&gt;% # + geom_line(color = &quot;#3182BD&quot;, size = 1) %&gt;% + geom_bar(stat = &#39;identity&#39;, fill = &quot;#3182BD&quot;) %&gt;% + geom_text(aes(y = cumsum(tot_area_noint_km2), label = format(cumsum(tot_area_noint_km2), digits = 2, scientific = TRUE)), color = &quot;black&quot;, size=2, vjust = -0.3) %&gt;% + labs(title = &quot;Cumulative evolution of area funded by AFD&quot;, subtitle = paste(&quot;Sample :&quot;, sum(subset(data_time_area, is.na(year_funding_first) == FALSE)$n, na.rm = TRUE), &quot;protected areas covering&quot;, format(sum(subset(data_time_area, is.na(year_funding_first) == FALSE)$tot_area_noint_km2), digits = 1, scientific = FALSE, big.mark = &quot; &quot;), &quot;km²&quot;), caption = paste0(&quot;Out of &quot;, sum(data_time_area$n), &quot; known funded protected areas, &quot;, sum(subset(data_time_area, is.na(year_funding_first) == FALSE)$n, na.rm = TRUE), &quot; have a known funding year.\\nIn terms of area, &quot;, format(sum(subset(data_time_area, is.na(year_funding_first) == FALSE)$tot_area_noint_km2), digits = 1, scientific = FALSE, big.mark = &quot; &quot;), &quot; km² out of &quot;, format(sum(data_time_area$tot_area_noint_km2), digits = 1, scientific = FALSE, big.mark = &quot; &quot;), &quot; km².&quot;), y = &quot;Area (km²)&quot;) %&gt;% + theme(legend.position = &quot;bottom&quot;, legend.key = element_rect(fill = &quot;white&quot;), plot.title = element_text(size = 14, face = &quot;bold&quot;), axis.text.x = element_text(angle = 45,size=10, hjust = .5, vjust = .6), axis.title.x = element_text(margin = margin(t = 10)), panel.background = element_rect(fill = &#39;white&#39;, colour = &#39;white&#39;, linewidth = 0.5, linetype = &#39;solid&#39;), panel.grid.major = element_line(colour = &#39;grey90&#39;, linetype = &#39;solid&#39;), panel.grid.minor = element_line(colour = &#39;grey90&#39;, linetype = &#39;solid&#39;), plot.caption = element_text(color = &#39;grey50&#39;, size = 8.5, face = &#39;plain&#39;, hjust = 0)) fig_area_cum_pa_en #Saving figures tmp = paste(tempdir(), &quot;fig&quot;, sep = &quot;/&quot;) ggsave(paste(tmp, &quot;fig_area_pa_fr.png&quot;, sep = &quot;/&quot;), fig_area_pa_fr, device = &quot;png&quot;, height = 6, width = 9) ggsave(paste(tmp, &quot;fig_area_pa_en.png&quot;, sep = &quot;/&quot;), fig_area_pa_en, device = &quot;png&quot;, height = 6, width = 9) ggsave(paste(tmp, &quot;fig_area_cum_pa_fr.png&quot;, sep = &quot;/&quot;), fig_area_cum_pa_fr, device = &quot;png&quot;, height = 6, width = 9) ggsave(paste(tmp, &quot;fig_area_cum_pa_en.png&quot;, sep = &quot;/&quot;), fig_area_cum_pa_en, device = &quot;png&quot;, height = 6, width = 9) #Export to S3 storage ##List of files to save in the temp folder files &lt;- list.files(tmp, full.names = TRUE) ##Add each file in the bucket (same foler for every file in the temp) count = 0 for(f in files) { count = count+1 cat(&quot;Uploading file&quot;, paste0(count, &quot;/&quot;, length(files), &quot; &#39;&quot;, f, &quot;&#39;&quot;), &quot;\\n&quot;) aws.s3::put_object(file = f, bucket = &quot;projet-afd-eva-ap/descriptive_stats/time_evolution/world/all&quot;, region = &quot;&quot;, show_progress = TRUE) } #Erase the files in the temp directory do.call(file.remove, list(list.files(tmp, full.names = TRUE))) 2.3.5.5 Surface of PAs (world, non-marine) data_time_range = data.frame(year = c(min(data_stat_nodupl$year_funding_first, na.rm = TRUE):max(data_stat_nodupl$year_funding_first, na.rm = TRUE)) ) data_time_area = data_stat_nodupl %&gt;% filter(marine %in% c(0,1)) %&gt;% #filter(is.na(year_funding_first) == FALSE) %&gt;% group_by(year_funding_first) %&gt;% summarize(tot_area_km2 = sum(area_km2), n = n()) %&gt;% left_join(pa_int_yr, by = c(&quot;year_funding_first&quot; = &quot;annee_int&quot;)) %&gt;% full_join(data_time_range, by = c(&quot;year_funding_first&quot; = &quot;year&quot;)) %&gt;% mutate(tot_area_km2 = case_when(is.na(tot_area_km2)~0, TRUE~tot_area_km2), tot_int_km2 = case_when(is.na(tot_int_km2)~0, TRUE~tot_int_km2), tot_area_noint_km2 = tot_area_km2 - tot_int_km2) %&gt;% arrange(year_funding_first) #Evolution of area over time ##French fig_area_pa_fr = ggplot(subset(data_time_area, is.na(year_funding_first) == FALSE), aes(x = factor(year_funding_first), y = tot_area_noint_km2)) %&gt;% + geom_bar(stat = &#39;identity&#39;, fill = &quot;#3182BD&quot;) %&gt;% + geom_text(aes(y = tot_area_noint_km2, label = ifelse(tot_area_noint_km2 != 0, format(tot_area_noint_km2, digits = 2, scientific = TRUE), NA)), color = &quot;black&quot;, size=2, vjust = -0.3) %&gt;% + scale_y_log10(breaks = scales::trans_breaks(&quot;log10&quot;, function(x) 10^x), labels = scales::trans_format(&quot;log10&quot;, scales::math_format(10^.x))) %&gt;% + annotation_logticks(base = 10, sides = &quot;l&quot;, color = &quot;grey20&quot;, outside = &quot;TRUE&quot;, short = unit(.5,&quot;mm&quot;), mid = unit(1,&quot;mm&quot;), long = unit(2,&quot;mm&quot;)) %&gt;% + coord_cartesian(clip = &quot;off&quot;) %&gt;% + labs(title = &quot;Evolution de la superficie non-marine financée par l&#39;AFD&quot;, subtitle = paste(&quot;Echantillon :&quot;, sum(subset(data_time_area, is.na(year_funding_first) == FALSE)$n, na.rm = TRUE), &quot;aires protégées couvrant&quot;, format(sum(subset(data_time_area, is.na(year_funding_first) == FALSE)$tot_area_noint_km2), digits = 1, scientific = FALSE, big.mark = &quot; &quot;), &quot;km²&quot;), caption = paste0(&quot;Sur les &quot;, sum(data_time_area$n, na.rm = TRUE), &quot; aires protégées financées recensées, &quot;, sum(subset(data_time_area, is.na(year_funding_first) == FALSE)$n, na.rm = TRUE), &quot; ont une date de financement connue.\\nSoit &quot;, format(sum(subset(data_time_area, is.na(year_funding_first) == FALSE)$tot_area_noint_km2), digits = 1, scientific = FALSE, big.mark = &quot; &quot;), &quot; km² sur &quot;, format(sum(data_time_area$tot_area_noint_km2), digits = 1, scientific = FALSE, big.mark = &quot; &quot;), &quot; km².&quot;), x = &quot;Année&quot;, y = &quot;Superficie (km²)&quot;) %&gt;% + theme(legend.position = &quot;bottom&quot;, legend.key = element_rect(fill = &quot;white&quot;), plot.title = element_text(size = 14, face = &quot;bold&quot;), axis.text.x = element_text(angle = 45,size=10, hjust = .5, vjust = .6), axis.title.x = element_text(margin = margin(t = 10)), panel.background = element_rect(fill = &#39;white&#39;, colour = &#39;white&#39;, linewidth = 0.5, linetype = &#39;solid&#39;), panel.grid.major = element_line(colour = &#39;grey90&#39;, linetype = &#39;solid&#39;), panel.grid.minor = element_line(colour = &#39;grey90&#39;, linetype = &#39;solid&#39;), plot.caption = element_text(color = &#39;grey50&#39;, size = 8.5, face = &#39;plain&#39;, hjust = 0)) fig_area_pa_fr ##English fig_area_pa_en = ggplot(subset(data_time_area, is.na(year_funding_first) == FALSE), aes(x = factor(year_funding_first), y = tot_area_noint_km2)) %&gt;% + geom_bar(stat = &#39;identity&#39;, fill = &quot;#3182BD&quot;) %&gt;% + geom_text(aes(y = tot_area_noint_km2, label = ifelse(tot_area_noint_km2 != 0, format(tot_area_noint_km2, digits = 2, scientific = TRUE), NA)), color = &quot;black&quot;, size=2, vjust = -0.3) %&gt;% + scale_y_log10(breaks = scales::trans_breaks(&quot;log10&quot;, function(x) 10^x), labels = scales::trans_format(&quot;log10&quot;, scales::math_format(10^.x))) %&gt;% + annotation_logticks(base = 10, sides = &quot;l&quot;, color = &quot;grey20&quot;, outside = &quot;TRUE&quot;, short = unit(.5,&quot;mm&quot;), mid = unit(1,&quot;mm&quot;), long = unit(2,&quot;mm&quot;)) %&gt;% + coord_cartesian(clip = &quot;off&quot;) %&gt;% + labs(title = &quot;Evolution of AFD funded non-marine protected areas&quot;, subtitle = paste(&quot;Sample :&quot;, sum(subset(data_time_area, is.na(year_funding_first) == FALSE)$n, na.rm = TRUE), &quot;protected areas covering&quot;, format(sum(subset(data_time_area, is.na(year_funding_first) == FALSE)$tot_area_noint_km2), digits = 1, scientific = FALSE, big.mark = &quot; &quot;), &quot;km²&quot;), caption = paste0(&quot;Out of &quot;, sum(data_time_area$n, na.rm = TRUE), &quot; known funded protected areas, &quot;, sum(subset(data_time_area, is.na(year_funding_first) == FALSE)$n, na.rm = TRUE), &quot; have a known funding year.\\nIn terms of area, &quot;, format(sum(subset(data_time_area, is.na(year_funding_first) == FALSE)$tot_area_noint_km2), digits = 1, scientific = FALSE, big.mark = &quot; &quot;), &quot; km² out of &quot;, format(sum(data_time_area$tot_area_noint_km2), digits = 1, scientific = FALSE, big.mark = &quot; &quot;), &quot; km².&quot;), x = &quot;Year&quot;, y = &quot;Area (km²)&quot;) %&gt;% + theme(legend.position = &quot;bottom&quot;, legend.key = element_rect(fill = &quot;white&quot;), plot.title = element_text(size = 14, face = &quot;bold&quot;), axis.text.x = element_text(angle = 45,size=10, hjust = .5, vjust = .6), axis.title.x = element_text(margin = margin(t = 10)), panel.background = element_rect(fill = &#39;white&#39;, colour = &#39;white&#39;, linewidth = 0.5, linetype = &#39;solid&#39;), panel.grid.major = element_line(colour = &#39;grey90&#39;, linetype = &#39;solid&#39;), panel.grid.minor = element_line(colour = &#39;grey90&#39;, linetype = &#39;solid&#39;), plot.caption = element_text(color = &#39;grey50&#39;, size = 8.5, face = &#39;plain&#39;, hjust = 0)) fig_area_pa_en #Cumulative area over time ##French fig_area_cum_pa_fr = ggplot(subset(data_time_area, is.na(year_funding_first) == FALSE), aes(x = factor(year_funding_first), y = cumsum(tot_area_noint_km2))) %&gt;% # + geom_point(color = &quot;#3182BD&quot;, size = 1.5) %&gt;% # + geom_line(color = &quot;#3182BD&quot;, size = 1) %&gt;% + geom_bar(stat = &#39;identity&#39;, fill = &quot;#3182BD&quot;) %&gt;% + geom_text(aes(y = cumsum(tot_area_noint_km2), label = format(cumsum(tot_area_noint_km2), digits = 2, scientific = TRUE)), color = &quot;black&quot;, size=2, vjust = -0.3) %&gt;% + labs(title = &quot;Evolution cumulée de la superficie des aires protégées non-marines, financées par l&#39;AFD&quot;, subtitle = paste(&quot;Echantillon :&quot;, sum(subset(data_time_area, is.na(year_funding_first) == FALSE)$n, na.rm = TRUE), &quot;aires protégées couvrant&quot;, format(sum(subset(data_time_area, is.na(year_funding_first) == FALSE)$tot_area_noint_km2), digits = 1, scientific = FALSE, big.mark = &quot; &quot;), &quot;km²&quot;), caption = paste0(&quot;Sur les &quot;, sum(data_time_area$n, na.rm = TRUE), &quot; aires protégées financées recensées, &quot;, sum(subset(data_time_area, is.na(year_funding_first) == FALSE)$n, na.rm = TRUE), &quot; ont une date de financement connue.\\nSoit &quot;, format(sum(subset(data_time_area, is.na(year_funding_first) == FALSE)$tot_area_noint_km2), digits = 1, scientific = FALSE, big.mark = &quot; &quot;), &quot; km² sur &quot;, format(sum(data_time_area$tot_area_noint_km2), digits = 1, scientific = FALSE, big.mark = &quot; &quot;), &quot; km².&quot;), x = &quot;Année&quot;, y = &quot;Superficie (km²)&quot;) %&gt;% + theme(legend.position = &quot;bottom&quot;, legend.key = element_rect(fill = &quot;white&quot;), plot.title = element_text(size = 14, face = &quot;bold&quot;), axis.text.x = element_text(angle = 45,size=10, hjust = .5, vjust = .6), axis.title.x = element_text(margin = margin(t = 10)), panel.background = element_rect(fill = &#39;white&#39;, colour = &#39;white&#39;, linewidth = 0.5, linetype = &#39;solid&#39;), panel.grid.major = element_line(colour = &#39;grey90&#39;, linetype = &#39;solid&#39;), panel.grid.minor = element_line(colour = &#39;grey90&#39;, linetype = &#39;solid&#39;), plot.caption = element_text(color = &#39;grey50&#39;, size = 8.5, face = &#39;plain&#39;, hjust = 0)) fig_area_cum_pa_fr #English fig_area_cum_pa_en = ggplot(subset(data_time_area, is.na(year_funding_first) == FALSE), aes(x = factor(year_funding_first), y = cumsum(tot_area_noint_km2))) %&gt;% # + geom_point(color = &quot;#3182BD&quot;, size = 1.5) %&gt;% # + geom_line(color = &quot;#3182BD&quot;, size = 1) %&gt;% + geom_bar(stat = &#39;identity&#39;, fill = &quot;#3182BD&quot;) %&gt;% + geom_text(aes(y = cumsum(tot_area_noint_km2), label = format(cumsum(tot_area_noint_km2), digits = 2, scientific = TRUE)), color = &quot;black&quot;, size=2, vjust = -0.3) %&gt;% + labs(title = &quot;Cumulated evolution of non-marine protected areas funded by AFD&quot;, subtitle = paste(&quot;Sample :&quot;, sum(subset(data_time_area, is.na(year_funding_first) == FALSE)$n, na.rm = TRUE), &quot;protected areas covering&quot;, format(sum(subset(data_time_area, is.na(year_funding_first) == FALSE)$tot_area_noint_km2), digits = 1, scientific = FALSE, big.mark = &quot; &quot;), &quot;km²&quot;), caption = paste0(&quot;Out of &quot;, sum(data_time_area$n, na.rm = TRUE), &quot; known funded protected areas, &quot;, sum(subset(data_time_area, is.na(year_funding_first) == FALSE)$n, na.rm = TRUE), &quot; have a known funding year.\\nIn terms of area, &quot;, format(sum(subset(data_time_area, is.na(year_funding_first) == FALSE)$tot_area_noint_km2), digits = 1, scientific = FALSE, big.mark = &quot; &quot;), &quot; km² out of &quot;, format(sum(data_time_area$tot_area_noint_km2), digits = 1, scientific = FALSE, big.mark = &quot; &quot;), &quot; km².&quot;), x = &quot;Year&quot;, y = &quot;Area (km²)&quot;) %&gt;% + theme(legend.position = &quot;bottom&quot;, legend.key = element_rect(fill = &quot;white&quot;), plot.title = element_text(size = 14, face = &quot;bold&quot;), axis.text.x = element_text(angle = 45,size=10, hjust = .5, vjust = .6), axis.title.x = element_text(margin = margin(t = 10)), panel.background = element_rect(fill = &#39;white&#39;, colour = &#39;white&#39;, linewidth = 0.5, linetype = &#39;solid&#39;), panel.grid.major = element_line(colour = &#39;grey90&#39;, linetype = &#39;solid&#39;), panel.grid.minor = element_line(colour = &#39;grey90&#39;, linetype = &#39;solid&#39;), plot.caption = element_text(color = &#39;grey50&#39;, size = 8.5, face = &#39;plain&#39;, hjust = 0)) fig_area_cum_pa_en #Saving figures tmp = paste(tempdir(), &quot;fig&quot;, sep = &quot;/&quot;) ggsave(paste(tmp, &quot;fig_area_pa_fr.png&quot;, sep = &quot;/&quot;), fig_area_pa_fr, device = &quot;png&quot;, height = 6, width = 9) ggsave(paste(tmp, &quot;fig_area_pa_en.png&quot;, sep = &quot;/&quot;), fig_area_pa_en, device = &quot;png&quot;, height = 6, width = 9) ggsave(paste(tmp, &quot;fig_area_cum_pa_fr.png&quot;, sep = &quot;/&quot;), fig_area_cum_pa_fr, device = &quot;png&quot;, height = 6, width = 9) ggsave(paste(tmp, &quot;fig_area_cum_pa_en.png&quot;, sep = &quot;/&quot;), fig_area_cum_pa_en, device = &quot;png&quot;, height = 6, width = 9) #Export to S3 storage ##List of files to save in the temp folder files &lt;- list.files(tmp, full.names = TRUE) ##Add each file in the bucket (same foler for every file in the temp) count = 0 for(f in files) { count = count+1 cat(&quot;Uploading file&quot;, paste0(count, &quot;/&quot;, length(files), &quot; &#39;&quot;, f, &quot;&#39;&quot;), &quot;\\n&quot;) aws.s3::put_object(file = f, bucket = &quot;projet-afd-eva-ap/descriptive_stats/time_evolution/world/no_marine&quot;, region = &quot;&quot;, show_progress = TRUE) } #Erase the files in the temp directory do.call(file.remove, list(list.files(tmp, full.names = TRUE))) 2.3.5.6 Surface of PAs (region, non-marine) roi = &quot;Africa&quot; data_time_range = data.frame(year = c(min(data_stat_nodupl$year_funding_first, na.rm = TRUE):max(data_stat_nodupl$year_funding_first, na.rm = TRUE)) ) data_time_area = data_stat_nodupl %&gt;% filter(region == roi &amp; marine %in% c(0,1)) %&gt;% #filter(is.na(year_funding_first) == FALSE) %&gt;% group_by(year_funding_first) %&gt;% summarize(tot_area_km2 = sum(area_km2), n = n()) %&gt;% left_join(pa_int_yr, by = c(&quot;year_funding_first&quot; = &quot;annee_int&quot;)) %&gt;% full_join(data_time_range, by = c(&quot;year_funding_first&quot; = &quot;year&quot;)) %&gt;% mutate(tot_area_km2 = case_when(is.na(tot_area_km2)~0, TRUE~tot_area_km2), tot_int_km2 = case_when(is.na(tot_int_km2)~0, TRUE~tot_int_km2), tot_area_noint_km2 = tot_area_km2 - tot_int_km2) %&gt;% arrange(year_funding_first) #Evolution of area over time ##French fig_area_pa_fr = ggplot(subset(data_time_area, is.na(year_funding_first) == FALSE), aes(x = factor(year_funding_first), y = tot_area_noint_km2)) %&gt;% + geom_bar(stat = &#39;identity&#39;, fill = &quot;#3182BD&quot;) %&gt;% + geom_text(aes(y = tot_area_noint_km2, label = ifelse(tot_area_noint_km2 != 0, format(tot_area_noint_km2, digits = 2, scientific = TRUE), NA)), color = &quot;black&quot;, size=2, vjust = -0.3) %&gt;% + scale_y_log10(breaks = scales::trans_breaks(&quot;log10&quot;, function(x) 10^x), labels = scales::trans_format(&quot;log10&quot;, scales::math_format(10^.x))) %&gt;% + annotation_logticks(base = 10, sides = &quot;l&quot;, color = &quot;grey20&quot;, outside = &quot;TRUE&quot;, short = unit(.5,&quot;mm&quot;), mid = unit(1,&quot;mm&quot;), long = unit(2,&quot;mm&quot;)) %&gt;% + coord_cartesian(clip = &quot;off&quot;) %&gt;% + labs(title = paste(&quot;Evolution de la superficie non-marine financée par l&#39;AFD,&quot;, roi), subtitle = paste(&quot;Echantillon :&quot;, sum(subset(data_time_area, is.na(year_funding_first) == FALSE)$n, na.rm = TRUE), &quot;aires protégées couvrant&quot;, format(sum(subset(data_time_area, is.na(year_funding_first) == FALSE)$tot_area_noint_km2), digits = 1, scientific = FALSE, big.mark = &quot; &quot;), &quot;km²&quot;), caption = paste0(&quot;Sur les &quot;, sum(data_time_area$n, na.rm = TRUE), &quot; aires protégées financées recensées, &quot;, sum(subset(data_time_area, is.na(year_funding_first) == FALSE)$n, na.rm = TRUE), &quot; ont une date de financement connue.\\nSoit &quot;, format(sum(subset(data_time_area, is.na(year_funding_first) == FALSE)$tot_area_noint_km2), digits = 1, scientific = FALSE, big.mark = &quot; &quot;), &quot; km² sur &quot;, format(sum(data_time_area$tot_area_noint_km2), digits = 1, scientific = FALSE, big.mark = &quot; &quot;), &quot; km².&quot;), x = &quot;Année&quot;, y = &quot;Superficie (km²)&quot;) %&gt;% + theme(legend.position = &quot;bottom&quot;, legend.key = element_rect(fill = &quot;white&quot;), plot.title = element_text(size = 14, face = &quot;bold&quot;), axis.text.x = element_text(angle = 45,size=10, hjust = .5, vjust = .6), axis.title.x = element_text(margin = margin(t = 10)), panel.background = element_rect(fill = &#39;white&#39;, colour = &#39;white&#39;, linewidth = 0.5, linetype = &#39;solid&#39;), panel.grid.major = element_line(colour = &#39;grey90&#39;, linetype = &#39;solid&#39;), panel.grid.minor = element_line(colour = &#39;grey90&#39;, linetype = &#39;solid&#39;), plot.caption = element_text(color = &#39;grey50&#39;, size = 8.5, face = &#39;plain&#39;, hjust = 0)) fig_area_pa_fr ##English fig_area_pa_en = ggplot(subset(data_time_area, is.na(year_funding_first) == FALSE), aes(x = factor(year_funding_first), y = tot_area_noint_km2)) %&gt;% + geom_bar(stat = &#39;identity&#39;, fill = &quot;#3182BD&quot;) %&gt;% + geom_text(aes(y = tot_area_noint_km2, label = ifelse(tot_area_noint_km2 != 0, format(tot_area_noint_km2, digits = 2, scientific = TRUE), NA)), color = &quot;black&quot;, size=2, vjust = -0.3) %&gt;% + scale_y_log10(breaks = scales::trans_breaks(&quot;log10&quot;, function(x) 10^x), labels = scales::trans_format(&quot;log10&quot;, scales::math_format(10^.x))) %&gt;% + annotation_logticks(base = 10, sides = &quot;l&quot;, color = &quot;grey20&quot;, outside = &quot;TRUE&quot;, short = unit(.5,&quot;mm&quot;), mid = unit(1,&quot;mm&quot;), long = unit(2,&quot;mm&quot;)) %&gt;% + coord_cartesian(clip = &quot;off&quot;) %&gt;% + labs(title = paste(&quot;Evolution of AFD funded non-marine protected areas,&quot;, roi), subtitle = paste(&quot;Sample :&quot;, sum(subset(data_time_area, is.na(year_funding_first) == FALSE)$n, na.rm = TRUE), &quot;protected areas covering&quot;, format(sum(subset(data_time_area, is.na(year_funding_first) == FALSE)$tot_area_noint_km2), digits = 1, scientific = FALSE, big.mark = &quot; &quot;), &quot;km²&quot;), caption = paste0(&quot;Out of &quot;, sum(data_time_area$n, na.rm = TRUE), &quot; known funded protected areas, &quot;, sum(subset(data_time_area, is.na(year_funding_first) == FALSE)$n, na.rm = TRUE), &quot; have a known funding year.\\nIn terms of area, &quot;, format(sum(subset(data_time_area, is.na(year_funding_first) == FALSE)$tot_area_noint_km2), digits = 1, scientific = FALSE, big.mark = &quot; &quot;), &quot; km² out of &quot;, format(sum(data_time_area$tot_area_noint_km2), digits = 1, scientific = FALSE, big.mark = &quot; &quot;), &quot; km².&quot;), x = &quot;Year&quot;, y = &quot;Area (km²)&quot;) %&gt;% + theme(legend.position = &quot;bottom&quot;, legend.key = element_rect(fill = &quot;white&quot;), plot.title = element_text(size = 14, face = &quot;bold&quot;), axis.text.x = element_text(angle = 45,size=10, hjust = .5, vjust = .6), axis.title.x = element_text(margin = margin(t = 10)), panel.background = element_rect(fill = &#39;white&#39;, colour = &#39;white&#39;, linewidth = 0.5, linetype = &#39;solid&#39;), panel.grid.major = element_line(colour = &#39;grey90&#39;, linetype = &#39;solid&#39;), panel.grid.minor = element_line(colour = &#39;grey90&#39;, linetype = &#39;solid&#39;), plot.caption = element_text(color = &#39;grey50&#39;, size = 8.5, face = &#39;plain&#39;, hjust = 0)) fig_area_pa_en #Cumulative area over time ##French fig_area_cum_pa_fr = ggplot(subset(data_time_area, is.na(year_funding_first) == FALSE), aes(x = factor(year_funding_first), y = cumsum(tot_area_noint_km2))) %&gt;% # + geom_point(color = &quot;#3182BD&quot;, size = 1.5) %&gt;% # + geom_line(color = &quot;#3182BD&quot;, size = 1) %&gt;% + geom_bar(stat = &#39;identity&#39;, fill = &quot;#3182BD&quot;) %&gt;% + geom_text(aes(y = cumsum(tot_area_noint_km2), label = format(cumsum(tot_area_noint_km2), digits = 2, scientific = TRUE)), color = &quot;black&quot;, size=2, vjust = -0.3) %&gt;% + labs(title = paste(&quot;Evolution cumulée de la superficie des aires protégées non-marines financées par l&#39;AFD\\n&quot;, roi), subtitle = paste(&quot;Echantillon :&quot;, sum(subset(data_time_area, is.na(year_funding_first) == FALSE)$n, na.rm = TRUE), &quot;aires protégées couvrant&quot;, format(sum(subset(data_time_area, is.na(year_funding_first) == FALSE)$tot_area_noint_km2), digits = 1, scientific = FALSE, big.mark = &quot; &quot;), &quot;km²&quot;), caption = paste0(&quot;Sur les &quot;, sum(data_time_area$n, na.rm = TRUE), &quot; aires protégées financées recensées, &quot;, sum(subset(data_time_area, is.na(year_funding_first) == FALSE)$n, na.rm = TRUE), &quot; ont une date de financement connue.\\nSoit &quot;, format(sum(subset(data_time_area, is.na(year_funding_first) == FALSE)$tot_area_noint_km2), digits = 1, scientific = FALSE, big.mark = &quot; &quot;), &quot; km² sur &quot;, format(sum(data_time_area$tot_area_noint_km2), digits = 1, scientific = FALSE, big.mark = &quot; &quot;), &quot; km².&quot;), x = &quot;Année&quot;, y = &quot;Superficie (km²)&quot;) %&gt;% + theme(legend.position = &quot;bottom&quot;, legend.key = element_rect(fill = &quot;white&quot;), plot.title = element_text(size = 14, face = &quot;bold&quot;), axis.text.x = element_text(angle = 45,size=10, hjust = .5, vjust = .6), axis.title.x = element_text(margin = margin(t = 10)), panel.background = element_rect(fill = &#39;white&#39;, colour = &#39;white&#39;, linewidth = 0.5, linetype = &#39;solid&#39;), panel.grid.major = element_line(colour = &#39;grey90&#39;, linetype = &#39;solid&#39;), panel.grid.minor = element_line(colour = &#39;grey90&#39;, linetype = &#39;solid&#39;), plot.caption = element_text(color = &#39;grey50&#39;, size = 8.5, face = &#39;plain&#39;, hjust = 0)) fig_area_cum_pa_fr #English fig_area_cum_pa_en = ggplot(subset(data_time_area, is.na(year_funding_first) == FALSE), aes(x = factor(year_funding_first), y = cumsum(tot_area_noint_km2))) %&gt;% # + geom_point(color = &quot;#3182BD&quot;, size = 1.5) %&gt;% # + geom_line(color = &quot;#3182BD&quot;, size = 1) %&gt;% + geom_bar(stat = &#39;identity&#39;, fill = &quot;#3182BD&quot;) %&gt;% + geom_text(aes(y = cumsum(tot_area_noint_km2), label = format(cumsum(tot_area_noint_km2), digits = 2, scientific = TRUE)), color = &quot;black&quot;, size=2, vjust = -0.3) %&gt;% + labs(title = paste(&quot;Cumulated evolution of non-marine protected areas funded by AFD,&quot;, roi), subtitle = paste(&quot;Sample :&quot;, sum(subset(data_time_area, is.na(year_funding_first) == FALSE)$n, na.rm = TRUE), &quot;protected areas covering&quot;, format(sum(subset(data_time_area, is.na(year_funding_first) == FALSE)$tot_area_noint_km2), digits = 1, scientific = FALSE, big.mark = &quot; &quot;), &quot;km²&quot;), caption = paste0(&quot;Out of &quot;, sum(data_time_area$n, na.rm = TRUE), &quot; known funded protected areas, &quot;, sum(subset(data_time_area, is.na(year_funding_first) == FALSE)$n, na.rm = TRUE), &quot; have a known funding year.\\nIn terms of area, &quot;, format(sum(subset(data_time_area, is.na(year_funding_first) == FALSE)$tot_area_noint_km2), digits = 1, scientific = FALSE, big.mark = &quot; &quot;), &quot; km² out of &quot;, format(sum(data_time_area$tot_area_noint_km2), digits = 1, scientific = FALSE, big.mark = &quot; &quot;), &quot; km².&quot;), x = &quot;Year&quot;, y = &quot;Area (km²)&quot;) %&gt;% + theme(legend.position = &quot;bottom&quot;, legend.key = element_rect(fill = &quot;white&quot;), plot.title = element_text(size = 14, face = &quot;bold&quot;), axis.text.x = element_text(angle = 45,size=10, hjust = .5, vjust = .6), axis.title.x = element_text(margin = margin(t = 10)), panel.background = element_rect(fill = &#39;white&#39;, colour = &#39;white&#39;, linewidth = 0.5, linetype = &#39;solid&#39;), panel.grid.major = element_line(colour = &#39;grey90&#39;, linetype = &#39;solid&#39;), panel.grid.minor = element_line(colour = &#39;grey90&#39;, linetype = &#39;solid&#39;), plot.caption = element_text(color = &#39;grey50&#39;, size = 8.5, face = &#39;plain&#39;, hjust = 0)) fig_area_cum_pa_en #Saving figures tmp = paste(tempdir(), &quot;fig&quot;, sep = &quot;/&quot;) ggsave(paste(tmp, &quot;fig_area_pa_fr.png&quot;, sep = &quot;/&quot;), fig_area_pa_fr, device = &quot;png&quot;, height = 6, width = 9) ggsave(paste(tmp, &quot;fig_area_pa_en.png&quot;, sep = &quot;/&quot;), fig_area_pa_en, device = &quot;png&quot;, height = 6, width = 9) ggsave(paste(tmp, &quot;fig_area_cum_pa_fr.png&quot;, sep = &quot;/&quot;), fig_area_cum_pa_fr, device = &quot;png&quot;, height = 6, width = 9) ggsave(paste(tmp, &quot;fig_area_cum_pa_en.png&quot;, sep = &quot;/&quot;), fig_area_cum_pa_en, device = &quot;png&quot;, height = 6, width = 9) #Export to S3 storage ##List of files to save in the temp folder files &lt;- list.files(tmp, full.names = TRUE) ##Add each file in the bucket (same foler for every file in the temp) count = 0 for(f in files) { count = count+1 cat(&quot;Uploading file&quot;, paste0(count, &quot;/&quot;, length(files), &quot; &#39;&quot;, f, &quot;&#39;&quot;), &quot;\\n&quot;) aws.s3::put_object(file = f, bucket = paste(&quot;projet-afd-eva-ap/descriptive_stats/time_evolution&quot;, roi, &quot;no_marine&quot;, sep = &quot;/&quot;), region = &quot;&quot;, show_progress = TRUE) } #Erase the files in the temp directory do.call(file.remove, list(list.files(tmp, full.names = TRUE))) 2.3.6 Governance 2.3.6.1 World, all #Table of the governance type distribution ##English version data_gov_en = data_stat_nodupl %&gt;% mutate(gov_type = case_when(is.na(gov_type) == TRUE ~ &quot;Not referenced&quot;, TRUE ~ gov_type)) %&gt;% group_by(gov_type) %&gt;% summarize(n = n()) %&gt;% mutate(n_tot = sum(n), freq = round(n/n_tot*100,1)) %&gt;% select(-n_tot) %&gt;% arrange(-freq) tbl_gov_en = data_gov_en names(tbl_gov_en) = c(&quot;Governance&quot;,&quot;Number of PAs&quot;,&quot;Share of PAs (%)&quot;) ##French Version data_gov_fr = data_stat_nodupl %&gt;% mutate(gov_type = case_when(is.na(gov_type) == TRUE ~ &quot;Non référencée&quot;, gov_type == &quot;Collaborative governance&quot; ~ &quot;Gouvernance collaborative&quot;, gov_type == &quot;Federal or national ministry or agency&quot; ~ &quot;Ministère ou agence, fédérale ou nationale&quot;, gov_type == &quot;Federal or national ministry or agency&quot; ~ &quot;Ministère ou agence, fédérale ou nationale&quot;, gov_type == &quot;Government-delegated management&quot; ~ &quot;Gestion déléguée par le gouvernement&quot;, gov_type == &quot;Indigenous peoples&quot; ~ &quot;Peuples indigènes&quot;, gov_type == &quot;Joint governance&quot; ~ &quot;Gouvernance conjointe&quot;, gov_type == &quot;Local communities&quot; ~ &quot;Communautés locales&quot;, gov_type == &quot;Non-profit organisations&quot; ~ &quot;Organisations non-lucratives&quot;, gov_type == &quot;Not Reported&quot; ~ &quot;Non rapportée&quot;, gov_type == &quot;Sub-national ministry or agency&quot; ~ &quot;Ministère ou agence sous-nationale&quot;, TRUE ~ gov_type)) %&gt;% group_by(gov_type) %&gt;% summarize(n = n()) %&gt;% mutate(n_tot = sum(n), freq = round(n/n_tot*100,1)) %&gt;% select(-n_tot) %&gt;% arrange(-freq) tbl_gov_fr = data_gov_fr names(tbl_gov_fr) = c(&quot;Gouvernance&quot;,&quot;Nombre d&#39;AP&quot;,&quot;Proportion (%)&quot;) #PAs with nureported or unreferenced governance types are removed ##Tables ###English data_gov_knwn_en = data_stat_nodupl %&gt;% mutate(gov_type = case_when(is.na(gov_type) == TRUE ~ &quot;Not referenced&quot;, TRUE ~ gov_type)) %&gt;% filter(gov_type != &quot;Not Reported&quot; &amp; gov_type != &quot;Not referenced&quot;) %&gt;% group_by(gov_type) %&gt;% summarize(n = n()) %&gt;% mutate(n_tot = sum(n), freq = round(n/n_tot*100,1)) %&gt;% select(-n_tot) %&gt;% arrange(-freq) tbl_gov_knwn_en = data_gov_knwn_en names(tbl_gov_knwn_en) = c(&quot;Governance&quot;,&quot;Number of PAs&quot;,&quot;Share of PAs (%)&quot;) ###French data_gov_knwn_fr = data_stat_nodupl %&gt;% mutate(gov_type = case_when(is.na(gov_type) == TRUE ~ &quot;Non référencée&quot;, gov_type == &quot;Collaborative governance&quot; ~ &quot;Gouvernance collaborative&quot;, gov_type == &quot;Federal or national ministry or agency&quot; ~ &quot;Ministère ou agence, fédérale ou nationale&quot;, gov_type == &quot;Federal or national ministry or agency&quot; ~ &quot;Ministère ou agence, fédérale ou nationale&quot;, gov_type == &quot;Government-delegated management&quot; ~ &quot;Gestion déléguée par le gouvernement&quot;, gov_type == &quot;Indigenous peoples&quot; ~ &quot;Peuples indigènes&quot;, gov_type == &quot;Joint governance&quot; ~ &quot;Gouvernance conjointe&quot;, gov_type == &quot;Local communities&quot; ~ &quot;Communautés locales&quot;, gov_type == &quot;Non-profit organisations&quot; ~ &quot;Organisations non-lucratives&quot;, gov_type == &quot;Not Reported&quot; ~ &quot;Non rapportée&quot;, gov_type == &quot;Sub-national ministry or agency&quot; ~ &quot;Ministère ou agence sous-nationale&quot;, TRUE ~ gov_type)) %&gt;% filter(gov_type != &quot;Non référencée&quot; &amp; gov_type != &quot;Non rapportée&quot;) %&gt;% group_by(gov_type) %&gt;% summarize(n = n()) %&gt;% mutate(n_tot = sum(n), freq = round(n/n_tot*100,1)) %&gt;% select(-n_tot) %&gt;% arrange(-freq) tbl_gov_knwn_fr = data_gov_knwn_fr names(tbl_gov_knwn_fr) = c(&quot;Gouvernance&quot;,&quot;Nombre d&#39;AP&quot;,&quot;Proportion (%)&quot;) ##Pie charts ###English pie_gov_knwn_en = ggplot(data_gov_knwn_en, aes(x=&quot;&quot;, y= freq, fill= gov_type)) %&gt;% + geom_bar(width = 1, stat = &quot;identity&quot;, color=&quot;white&quot;) %&gt;% + geom_label(aes(x=1.3, label = paste0(format(freq, digits = 2), &quot;%&quot;)), color = &quot;black&quot;, position = position_stack(vjust = 0.55), size=2.5, show.legend = FALSE) %&gt;% + coord_polar(&quot;y&quot;, start=0) %&gt;% + labs(title = &quot;Governance type of protected areas except not referenced/reported&quot;, subtitle = paste(&quot;Sample :&quot;, sum(data_gov_knwn_en$n), &quot;protected areas&quot;)) %&gt;% + scale_fill_brewer(name = &quot;Governance&quot;, palette=&quot;Paired&quot;) %&gt;% + theme_void() pie_gov_knwn_en ###French pie_gov_knwn_fr = ggplot(data_gov_knwn_fr, aes(x=&quot;&quot;, y= freq, fill= gov_type)) %&gt;% + geom_bar(width = 1, stat = &quot;identity&quot;, color=&quot;white&quot;) %&gt;% + geom_label(aes(x=1.3, label = paste0(format(freq, digits = 2), &quot;%&quot;)), color = &quot;black&quot;, position = position_stack(vjust = 0.55), size=2.5, show.legend = FALSE) %&gt;% + coord_polar(&quot;y&quot;, start=0) %&gt;% + labs(title = &quot;Gouvernance, hors non-rapportées/référencées&quot;, subtitle = paste(&quot;Echantillon :&quot;, sum(data_gov_knwn_fr$n), &quot;aires protégées&quot; )) %&gt;% + scale_fill_brewer(name = &quot;Gouvernance&quot;, palette=&quot;Paired&quot;) %&gt;% + theme_void() pie_gov_knwn_fr #Saving figures tmp = paste(tempdir(), &quot;fig&quot;, sep = &quot;/&quot;) print(xtable(tbl_gov_en, caption = &quot;Governance of protected areas funded by AFD&quot;, type = &quot;latex&quot;), file = paste(tmp, &quot;tbl_gov_en.tex&quot;, sep =&quot;/&quot;)) print(xtable(tbl_gov_fr, caption = &quot;Gouvernance des aires protégées appuyées par l&#39;AFD&quot;, type = &quot;latex&quot;), file = paste(tmp, &quot;tbl_gov_fr.tex&quot;, sep =&quot;/&quot;)) print(xtable(tbl_gov_knwn_en, caption = &quot;Governance of protected areas funded by AFD (when known)&quot;, type = &quot;latex&quot;), file = paste(tmp, &quot;tbl_gov_knwn_en.tex&quot;, sep =&quot;/&quot;)) print(xtable(tbl_gov_knwn_fr, caption = &quot;Gouvernance des aires protégées appuyées par l&#39;AFD (si connu)&quot;, type = &quot;latex&quot;), file = paste(tmp, &quot;tbl_gov_knwn_fr.tex&quot;, sep =&quot;/&quot;)) ggsave(paste(tmp, &quot; pie_gov_knwn_en.png&quot;, sep = &quot;/&quot;), plot = pie_gov_knwn_en, device = &quot;png&quot;, height = 6, width = 9) ggsave(paste(tmp, &quot;pie_gov_knwn_fr.png&quot;, sep = &quot;/&quot;), plot = pie_gov_knwn_fr, device = &quot;png&quot;, height = 6, width = 9) #Export to S3 storage ##List of files to save in the temp folder files &lt;- list.files(tmp, full.names = TRUE) ##Add each file in the bucket (same foler for every file in the temp) count = 0 for(f in files) { count = count+1 cat(&quot;Uploading file&quot;, paste0(count, &quot;/&quot;, length(files), &quot; &#39;&quot;, f, &quot;&#39;&quot;), &quot;\\n&quot;) aws.s3::put_object(file = f, bucket = &quot;projet-afd-eva-ap/descriptive_stats/gouvernance/world/all&quot;, region = &quot;&quot;, show_progress = TRUE) } #Erase the files in the temp directory do.call(file.remove, list(list.files(tmp, full.names = TRUE))) 2.3.6.2 World, non-marine #Table of the governance type distribution ##English version data_gov_en = data_stat_nodupl %&gt;% filter(marine %in% c(0,1)) %&gt;% mutate(gov_type = case_when(is.na(gov_type) == TRUE ~ &quot;Not referenced&quot;, TRUE ~ gov_type)) %&gt;% group_by(gov_type) %&gt;% summarize(n = n()) %&gt;% mutate(n_tot = sum(n), freq = round(n/n_tot*100,1)) %&gt;% select(-n_tot) %&gt;% arrange(-freq) tbl_gov_en = data_gov_en names(tbl_gov_en) = c(&quot;Governance&quot;,&quot;Number of PAs&quot;,&quot;Share of PAs (%)&quot;) ##French Version data_gov_fr = data_stat_nodupl %&gt;% filter(marine %in% c(0,1)) %&gt;% mutate(gov_type = case_when(is.na(gov_type) == TRUE ~ &quot;Non référencée&quot;, gov_type == &quot;Collaborative governance&quot; ~ &quot;Gouvernance collaborative&quot;, gov_type == &quot;Federal or national ministry or agency&quot; ~ &quot;Ministère ou agence, fédérale ou nationale&quot;, gov_type == &quot;Federal or national ministry or agency&quot; ~ &quot;Ministère ou agence, fédérale ou nationale&quot;, gov_type == &quot;Government-delegated management&quot; ~ &quot;Gestion déléguée par le gouvernement&quot;, gov_type == &quot;Indigenous peoples&quot; ~ &quot;Peuples indigènes&quot;, gov_type == &quot;Joint governance&quot; ~ &quot;Gouvernance conjointe&quot;, gov_type == &quot;Local communities&quot; ~ &quot;Communautés locales&quot;, gov_type == &quot;Non-profit organisations&quot; ~ &quot;Organisations non-lucratives&quot;, gov_type == &quot;Not Reported&quot; ~ &quot;Non rapportée&quot;, gov_type == &quot;Sub-national ministry or agency&quot; ~ &quot;Ministère ou agence sous-nationale&quot;, TRUE ~ gov_type)) %&gt;% group_by(gov_type) %&gt;% summarize(n = n()) %&gt;% mutate(n_tot = sum(n), freq = round(n/n_tot*100,1)) %&gt;% select(-n_tot) %&gt;% arrange(-freq) tbl_gov_fr = data_gov_fr names(tbl_gov_fr) = c(&quot;Gouvernance&quot;,&quot;Nombre d&#39;AP&quot;,&quot;Proportion (%)&quot;) #PAs with nureported or unreferenced governance types are removed ##Tables ###English data_gov_knwn_en = data_stat_nodupl %&gt;% filter(marine %in% c(0,1)) %&gt;% mutate(gov_type = case_when(is.na(gov_type) == TRUE ~ &quot;Not referenced&quot;, TRUE ~ gov_type)) %&gt;% filter(gov_type != &quot;Not Reported&quot; &amp; gov_type != &quot;Not referenced&quot;) %&gt;% group_by(gov_type) %&gt;% summarize(n = n()) %&gt;% mutate(n_tot = sum(n), freq = round(n/n_tot*100,1)) %&gt;% select(-n_tot) %&gt;% arrange(-freq) tbl_gov_knwn_en = data_gov_knwn_en names(tbl_gov_knwn_en) = c(&quot;Governance&quot;,&quot;Number of PAs&quot;,&quot;Share of PAs (%)&quot;) ###French data_gov_knwn_fr = data_stat_nodupl %&gt;% filter(marine %in% c(0,1)) %&gt;% mutate(gov_type = case_when(is.na(gov_type) == TRUE ~ &quot;Non référencée&quot;, gov_type == &quot;Collaborative governance&quot; ~ &quot;Gouvernance collaborative&quot;, gov_type == &quot;Federal or national ministry or agency&quot; ~ &quot;Ministère ou agence, fédérale ou nationale&quot;, gov_type == &quot;Federal or national ministry or agency&quot; ~ &quot;Ministère ou agence, fédérale ou nationale&quot;, gov_type == &quot;Government-delegated management&quot; ~ &quot;Gestion déléguée par le gouvernement&quot;, gov_type == &quot;Indigenous peoples&quot; ~ &quot;Peuples indigènes&quot;, gov_type == &quot;Joint governance&quot; ~ &quot;Gouvernance conjointe&quot;, gov_type == &quot;Local communities&quot; ~ &quot;Communautés locales&quot;, gov_type == &quot;Non-profit organisations&quot; ~ &quot;Organisations non-lucratives&quot;, gov_type == &quot;Not Reported&quot; ~ &quot;Non rapportée&quot;, gov_type == &quot;Sub-national ministry or agency&quot; ~ &quot;Ministère ou agence sous-nationale&quot;, TRUE ~ gov_type)) %&gt;% filter(gov_type != &quot;Non référencée&quot; &amp; gov_type != &quot;Non rapportée&quot;) %&gt;% group_by(gov_type) %&gt;% summarize(n = n()) %&gt;% mutate(n_tot = sum(n), freq = round(n/n_tot*100,1)) %&gt;% select(-n_tot) %&gt;% arrange(-freq) tbl_gov_knwn_fr = data_gov_knwn_fr names(tbl_gov_knwn_fr) = c(&quot;Gouvernance&quot;,&quot;Nombre d&#39;AP&quot;,&quot;Proportion (%)&quot;) ##Pie charts ###English pie_gov_knwn_en = ggplot(data_gov_knwn_en, aes(x=&quot;&quot;, y= freq, fill= gov_type)) %&gt;% + geom_bar(width = 1, stat = &quot;identity&quot;, color=&quot;white&quot;) %&gt;% + geom_label(aes(x=1.3, label = paste0(format(freq, digits = 2), &quot;%&quot;)), color = &quot;black&quot;, position = position_stack(vjust = 0.55), size=2.5, show.legend = FALSE) %&gt;% + coord_polar(&quot;y&quot;, start=0) %&gt;% + labs(title = &quot;Governance type of non-marine protected areas except not referenced/reported&quot;, subtitle = paste(&quot;Sample :&quot;, sum(data_gov_knwn_en$n), &quot;non-marines protected areas&quot;)) %&gt;% + scale_fill_brewer(name = &quot;Governance&quot;, palette=&quot;Paired&quot;) %&gt;% + theme_void() pie_gov_knwn_en ###French pie_gov_knwn_fr = ggplot(data_gov_knwn_fr, aes(x=&quot;&quot;, y= freq, fill= gov_type)) %&gt;% + geom_bar(width = 1, stat = &quot;identity&quot;, color=&quot;white&quot;) %&gt;% + geom_label(aes(x=1.3, label = paste0(format(freq, digits = 2), &quot;%&quot;)), color = &quot;black&quot;, position = position_stack(vjust = 0.55), size=2.5, show.legend = FALSE) %&gt;% + coord_polar(&quot;y&quot;, start=0) %&gt;% + labs(title = &quot;Gouvernance des aires protégées non-marines hors non-rapportées/référencées&quot;, subtitle = paste(&quot;Echantillon :&quot;, sum(data_gov_knwn_fr$n), &quot;aires protégées non-marines&quot;)) %&gt;% + scale_fill_brewer(name = &quot;Gouvernance&quot;, palette=&quot;Paired&quot;) %&gt;% + theme_void() pie_gov_knwn_fr #Saving figures tmp = paste(tempdir(), &quot;fig&quot;, sep = &quot;/&quot;) print(xtable(tbl_gov_en, caption = &quot;Governance of non-marine protected areas funded by AFD&quot;, type = &quot;latex&quot;), file = paste(tmp, &quot;tbl_gov_en.tex&quot;, sep =&quot;/&quot;)) print(xtable(tbl_gov_fr, caption = &quot;Gouvernance des aires protégées non-marines appuyées par l&#39;AFD&quot;, type = &quot;latex&quot;), file = paste(tmp, &quot;tbl_gov_fr.tex&quot;, sep =&quot;/&quot;)) print(xtable(tbl_gov_knwn_en, caption = &quot;Governance of non-marine protected areas funded by AFD (when known)&quot;, type = &quot;latex&quot;), file = paste(tmp, &quot;tbl_gov_knwn_en.tex&quot;, sep =&quot;/&quot;)) print(xtable(tbl_gov_knwn_fr, caption = &quot;Gouvernance des aires protégées non-marines appuyées par l&#39;AFD (si connu)&quot;, type = &quot;latex&quot;), file = paste(tmp, &quot;tbl_gov_knwn_fr.tex&quot;, sep =&quot;/&quot;)) ggsave(paste(tmp, &quot;pie_gov_knwn_en.png&quot;, sep = &quot;/&quot;), plot = pie_gov_knwn_en, device = &quot;png&quot;, height = 6, width = 9) ggsave(paste(tmp, &quot;pie_gov_knwn_fr.png&quot;, sep = &quot;/&quot;), plot = pie_gov_knwn_fr, device = &quot;png&quot;, height = 6, width = 9) #Export to S3 storage ##List of files to save in the temp folder files &lt;- list.files(tmp, full.names = TRUE) ##Add each file in the bucket (same foler for every file in the temp) count = 0 for(f in files) { count = count+1 cat(&quot;Uploading file&quot;, paste0(count, &quot;/&quot;, length(files), &quot; &#39;&quot;, f, &quot;&#39;&quot;), &quot;\\n&quot;) aws.s3::put_object(file = f, bucket = &quot;projet-afd-eva-ap/descriptive_stats/gouvernance/world/no_marine&quot;, region = &quot;&quot;, show_progress = TRUE) } #Erase the files in the temp directory do.call(file.remove, list(list.files(tmp, full.names = TRUE))) 2.3.6.3 Region, non-marine roi = &quot;Africa&quot; #Table of the governance type distribution ##English version data_gov_en = data_stat_nodupl %&gt;% filter(region == roi &amp; marine %in% c(0,1)) %&gt;% mutate(gov_type = case_when(is.na(gov_type) == TRUE ~ &quot;Not referenced&quot;, TRUE ~ gov_type)) %&gt;% group_by(gov_type) %&gt;% summarize(n = n()) %&gt;% mutate(n_tot = sum(n), freq = round(n/n_tot*100,1)) %&gt;% select(-n_tot) %&gt;% arrange(-freq) tbl_gov_en = data_gov_en names(tbl_gov_en) = c(&quot;Governance&quot;,&quot;Number of PAs&quot;,&quot;Share of PAs (%)&quot;) ##French Version data_gov_fr = data_stat_nodupl %&gt;% filter(region == roi &amp; marine %in% c(0,1)) %&gt;% mutate(gov_type = case_when(is.na(gov_type) == TRUE ~ &quot;Non référencée&quot;, gov_type == &quot;Collaborative governance&quot; ~ &quot;Gouvernance collaborative&quot;, gov_type == &quot;Federal or national ministry or agency&quot; ~ &quot;Ministère ou agence, fédérale ou nationale&quot;, gov_type == &quot;Federal or national ministry or agency&quot; ~ &quot;Ministère ou agence, fédérale ou nationale&quot;, gov_type == &quot;Government-delegated management&quot; ~ &quot;Gestion déléguée par le gouvernement&quot;, gov_type == &quot;Indigenous peoples&quot; ~ &quot;Peuples indigènes&quot;, gov_type == &quot;Joint governance&quot; ~ &quot;Gouvernance conjointe&quot;, gov_type == &quot;Local communities&quot; ~ &quot;Communautés locales&quot;, gov_type == &quot;Non-profit organisations&quot; ~ &quot;Organisations non-lucratives&quot;, gov_type == &quot;Not Reported&quot; ~ &quot;Non rapportée&quot;, gov_type == &quot;Sub-national ministry or agency&quot; ~ &quot;Ministère ou agence sous-nationale&quot;, TRUE ~ gov_type)) %&gt;% group_by(gov_type) %&gt;% summarize(n = n()) %&gt;% mutate(n_tot = sum(n), freq = round(n/n_tot*100,1)) %&gt;% select(-n_tot) %&gt;% arrange(-freq) tbl_gov_fr = data_gov_fr names(tbl_gov_fr) = c(&quot;Gouvernance&quot;,&quot;Nombre d&#39;AP&quot;,&quot;Proportion (%)&quot;) #PAs with nureported or unreferenced governance types are removed ##Tables ###English data_gov_knwn_en = data_stat_nodupl %&gt;% filter(region == roi &amp; marine %in% c(0,1)) %&gt;% mutate(gov_type = case_when(is.na(gov_type) == TRUE ~ &quot;Not referenced&quot;, TRUE ~ gov_type)) %&gt;% filter(gov_type != &quot;Not Reported&quot; &amp; gov_type != &quot;Not referenced&quot;) %&gt;% group_by(gov_type) %&gt;% summarize(n = n()) %&gt;% mutate(n_tot = sum(n), freq = round(n/n_tot*100,1)) %&gt;% select(-n_tot) %&gt;% arrange(-freq) tbl_gov_knwn_en = data_gov_knwn_en names(tbl_gov_knwn_en) = c(&quot;Governance&quot;,&quot;Number of PAs&quot;,&quot;Share of PAs (%)&quot;) ###French data_gov_knwn_fr = data_stat_nodupl %&gt;% filter(region == roi &amp; marine %in% c(0,1)) %&gt;% mutate(gov_type = case_when(is.na(gov_type) == TRUE ~ &quot;Non référencée&quot;, gov_type == &quot;Collaborative governance&quot; ~ &quot;Gouvernance collaborative&quot;, gov_type == &quot;Federal or national ministry or agency&quot; ~ &quot;Ministère ou agence, fédérale ou nationale&quot;, gov_type == &quot;Federal or national ministry or agency&quot; ~ &quot;Ministère ou agence, fédérale ou nationale&quot;, gov_type == &quot;Government-delegated management&quot; ~ &quot;Gestion déléguée par le gouvernement&quot;, gov_type == &quot;Indigenous peoples&quot; ~ &quot;Peuples indigènes&quot;, gov_type == &quot;Joint governance&quot; ~ &quot;Gouvernance conjointe&quot;, gov_type == &quot;Local communities&quot; ~ &quot;Communautés locales&quot;, gov_type == &quot;Non-profit organisations&quot; ~ &quot;Organisations non-lucratives&quot;, gov_type == &quot;Not Reported&quot; ~ &quot;Non rapportée&quot;, gov_type == &quot;Sub-national ministry or agency&quot; ~ &quot;Ministère ou agence sous-nationale&quot;, TRUE ~ gov_type)) %&gt;% filter(gov_type != &quot;Non référencée&quot; &amp; gov_type != &quot;Non rapportée&quot;) %&gt;% group_by(gov_type) %&gt;% summarize(n = n()) %&gt;% mutate(n_tot = sum(n), freq = round(n/n_tot*100,1)) %&gt;% select(-n_tot) %&gt;% arrange(-freq) tbl_gov_knwn_fr = data_gov_knwn_fr names(tbl_gov_knwn_fr) = c(&quot;Gouvernance&quot;,&quot;Nombre d&#39;AP&quot;,&quot;Proportion (%)&quot;) ##Pie charts ###English pie_gov_knwn_en = ggplot(data_gov_knwn_en, aes(x=&quot;&quot;, y= freq, fill= gov_type)) %&gt;% + geom_bar(width = 1, stat = &quot;identity&quot;, color=&quot;white&quot;) %&gt;% + geom_label(aes(x=1.3, label = paste0(format(freq, digits = 2), &quot;%&quot;)), color = &quot;black&quot;, position = position_stack(vjust = 0.55), size=2.5, show.legend = FALSE) %&gt;% + coord_polar(&quot;y&quot;, start=0) %&gt;% + labs(title = paste0(&quot;Governance type of non-marine protected areas except not referenced/reported\\n&quot;, roi), subtitle = paste(&quot;Sample :&quot;, sum(data_gov_knwn_en$n), &quot;non-marine protected areas&quot;)) %&gt;% + scale_fill_brewer(name = &quot;Governance&quot;, palette=&quot;Paired&quot;) %&gt;% + theme_void() pie_gov_knwn_en ###French pie_gov_knwn_fr = ggplot(data_gov_knwn_fr, aes(x=&quot;&quot;, y= freq, fill= gov_type)) %&gt;% + geom_bar(width = 1, stat = &quot;identity&quot;, color=&quot;white&quot;) %&gt;% + geom_label(aes(x=1.3, label = paste0(format(freq, digits = 2), &quot;%&quot;)), color = &quot;black&quot;, position = position_stack(vjust = 0.55), size=2.5, show.legend = FALSE) %&gt;% + coord_polar(&quot;y&quot;, start=0) %&gt;% + labs(title = paste0(&quot;Gouvernance des aires protégées non-marines hors non-rapportées/référencées\\n&quot;, roi), subtitle = paste(&quot;Echantillon :&quot;, sum(data_gov_knwn_fr$n), &quot;aires protégées&quot;)) %&gt;% + scale_fill_brewer(name = &quot;Gouvernance&quot;, palette=&quot;Paired&quot;) %&gt;% + theme_void() pie_gov_knwn_fr #Saving figures tmp = paste(tempdir(), &quot;fig&quot;, sep = &quot;/&quot;) print(xtable(tbl_gov_en, caption = paste(&quot;Governance of non-marine protected areas funded by AFD,&quot;, roi), type = &quot;latex&quot;), file = paste(tmp, &quot;tbl_gov_en.tex&quot;, sep =&quot;/&quot;)) print(xtable(tbl_gov_fr, caption = paste(&quot;Gouvernance des aires protégées non-marines appuyées par l&#39;AFD,&quot;, roi), type = &quot;latex&quot;), file = paste(tmp, &quot;tbl_gov_fr.tex&quot;, sep =&quot;/&quot;)) print(xtable(tbl_gov_knwn_en, caption = paste(&quot;Governance of non-marine protected areas funded by AFD,&quot;, roi, &quot;(when known)&quot;), type = &quot;latex&quot;), file = paste(tmp, &quot;tbl_gov_knwn_en.tex&quot;, sep =&quot;/&quot;)) print(xtable(tbl_gov_knwn_fr, caption = paste(&quot;Gouvernance des aires protégées non-marines appuyées par l&#39;AFD,&quot;, roi, &quot;(si connu)&quot;), type = &quot;latex&quot;), file = paste(tmp, &quot;tbl_gov_knwn_fr.tex&quot;, sep =&quot;/&quot;)) ggsave(paste(tmp, &quot;pie_gov_knwn_en.png&quot;, sep = &quot;/&quot;), plot = pie_gov_knwn_en, device = &quot;png&quot;, height = 6, width = 9) ggsave(paste(tmp, &quot;pie_gov_knwn_fr.png&quot;, sep = &quot;/&quot;), plot = pie_gov_knwn_fr, device = &quot;png&quot;, height = 6, width = 9) #Export to S3 storage ##List of files to save in the temp folder files &lt;- list.files(tmp, full.names = TRUE) ##Add each file in the bucket (same foler for every file in the temp) count = 0 for(f in files) { count = count+1 cat(&quot;Uploading file&quot;, paste0(count, &quot;/&quot;, length(files), &quot; &#39;&quot;, f, &quot;&#39;&quot;), &quot;\\n&quot;) aws.s3::put_object(file = f, bucket = paste(&quot;projet-afd-eva-ap/descriptive_stats/gouvernance&quot; , roi, &quot;no_marine&quot;, sep = &quot;/&quot;), region = &quot;&quot;, show_progress = TRUE) } #Erase the files in the temp directory do.call(file.remove, list(list.files(tmp, full.names = TRUE))) "],["miscellaneous-statistics.html", "Section 3 Miscellaneous statistics 3.1 Initial settings 3.2 Importing datasets 3.3 Performing descriptive statistics 3.4 Evolution of tree cover and deforestation", " Section 3 Miscellaneous statistics In this document are performed and plotted statistics for particular needs (analysis of a particular portfolio, some specific group of PAs, etc.) 3.1 Initial settings Configuring Rmarkdown. #{r setup, include=FALSE, eval = FALSE} #knitr::opts_knit$set(root.dir = rprojroot::find_rstudio_root_file()) # Installing and importing relevant packages. install.packages(c(&quot;stargazer&quot;, &quot;janitor&quot;, &quot;questionr&quot;, &quot;countrycode&quot;, &quot;WDI&quot;)) library(tidyverse) library(stargazer) library(dplyr) library(sf) library(ggplot2) library(ggrepel) library(RColorBrewer) library(countrycode) library(data.table) #library(readxl) #library(splitstackshape) library(janitor) library(xtable) library(questionr) library(aws.s3) library(WDI) library(countrycode) 3.2 Importing datasets A dataset with information for each protected area funded by the AFD, and datasets on aggregated size at country/region/world level and by year. The latter takes into account potential overlap between PAs reported in the World Database on Protected Areas (WDPA). #Dataset of AFD supported protected area, with one line per protected area data_stat_nodupl = #fread(&quot;data_tidy/BDD_PA_AFD_nofund_nodupl.csv&quot; , encoding = &quot;UTF-8&quot;) aws.s3::s3read_using( FUN = data.table::fread, encoding = &quot;UTF-8&quot;, # Mettre les options de FUN ici object = &quot;data_tidy/BDD_PA_AFD_nofund_nodupl.csv&quot;, bucket = &quot;projet-afd-eva-ap&quot;, opts = list(&quot;region&quot; = &quot;&quot;)) # Portfolio of protected areas supported by the FAPBM data_pa_fapbm = #fread(&quot;data_tidy/BDD_PA_AFD_ie.csv&quot; , encoding = &quot;UTF-8&quot;) aws.s3::s3read_using( FUN = data.table::fread, encoding = &quot;UTF-8&quot;, object = &quot;data_tidy/BDD_PA_FAPBM.csv&quot;, bucket = &quot;projet-afd-eva-ap&quot;, opts = list(&quot;region&quot; = &quot;&quot;)) #Import WDPA data ## Download and save data # data_wdpa = wdpa_fetch(x = &quot;global&quot;, wait = TRUE, download_dir = &quot;data_raw&quot;, # page_wait = 2, verbose = TRUE) # st_write(wdpa, # dsn = &quot;data_raw/wdpa/wdpa_shp_global_raw.gpkg&quot;, # delete_dsn = TRUE) ## Load data data_wdpa = #st_read(&quot;data_raw/wdpa/wdpa_shp_global_raw.gpkg&quot;) %&gt;% s3read_using(sf::st_read, object = &quot;data_raw/wdpa/wdpa_shp_global_raw.gpkg&quot;, bucket = &quot;projet-afd-eva-ap&quot;, opts = list(&quot;region&quot; = &quot;&quot;)) %&gt;% #st_drop_geometry() %&gt;% clean_names() %&gt;% #Add region, sub-region and country names mutate(region = countrycode(sourcevar = iso3, origin = &quot;iso3c&quot;, destination = &quot;un.region.name&quot;), sub_region = countrycode(sourcevar = iso3, origin = &quot;iso3c&quot;, destination = &quot;un.regionsub.name&quot;), country_en = countrycode(sourcevar = iso3, origin = &quot;iso3c&quot;, destination = &quot;un.name.en&quot;), country_fr = countrycode(sourcevar = iso3, origin = &quot;iso3c&quot;, destination = &quot;un.name.fr&quot;), .after = &quot;iso3&quot;) #Subset of WDPA data for Madagascar, with IUCN category description (English and French) data_wdpa_mdg = data_wdpa %&gt;% filter(iso3 == &quot;MDG&quot;) %&gt;% #Add the description of IUCN from its category mutate(iucn_des_fr = case_when( !is.na(wdpaid) &amp; iucn_cat == &quot;Ia&quot; ~ &quot;Réserve naturelle intégrale&quot;, !is.na(wdpaid) &amp; iucn_cat == &quot;Ib&quot; ~ &quot;Zone de nature sauvage&quot;, !is.na(wdpaid) &amp; iucn_cat == &quot;II&quot; ~ &quot;Parc national&quot;, !is.na(wdpaid) &amp; iucn_cat == &quot;III&quot; ~ &quot;Monument naturel&quot;, !is.na(wdpaid) &amp; iucn_cat == &quot;IV&quot; ~ &quot;Gest. des habitats/espèces&quot;, !is.na(wdpaid) &amp; iucn_cat == &quot;V&quot; ~ &quot;Paysage protégé&quot;, !is.na(wdpaid) &amp; iucn_cat == &quot;VI&quot; ~ &quot;Gest. de ress. protégées&quot;, !is.na(wdpaid) &amp; iucn_cat == &quot;Not Applicable&quot; ~ &quot;Non catégorisée&quot;, !is.na(wdpaid) &amp; iucn_cat == &quot;Not Reported&quot; ~ &quot;Non catégorisée&quot;, !is.na(wdpaid) &amp; iucn_cat == &quot;Not Assigned&quot; ~ &quot;Non catégorisée&quot;, TRUE ~ &quot;Non référencée&quot;), .after = iucn_cat) %&gt;% mutate(iucn_des_en = case_when( !is.na(wdpaid) &amp; iucn_cat == &quot;Ia&quot; ~ &quot;Strict nature reserve&quot;, !is.na(wdpaid) &amp; iucn_cat == &quot;Ib&quot; ~ &quot;Wilderness area&quot;, !is.na(wdpaid) &amp; iucn_cat == &quot;II&quot; ~ &quot;National park&quot;, !is.na(wdpaid) &amp; iucn_cat == &quot;III&quot; ~ &quot;Natural monument or feature&quot;, !is.na(wdpaid) &amp; iucn_cat == &quot;IV&quot; ~ &quot;Habitat or species management area&quot;, !is.na(wdpaid) &amp; iucn_cat == &quot;V&quot; ~ &quot;Protected landscape or seascape&quot;, !is.na(wdpaid) &amp; iucn_cat == &quot;VI&quot; ~ &quot;Protected area with sust. use of nat. res.&quot;, !is.na(wdpaid) &amp; iucn_cat == &quot;Not Applicable&quot; ~ &quot;Not categorized&quot;, !is.na(wdpaid) &amp; iucn_cat == &quot;Not Reported&quot; ~ &quot;Not categorized&quot;, !is.na(wdpaid) &amp; iucn_cat == &quot;Not Assigned&quot; ~ &quot;Not categorized&quot;, TRUE ~ &quot;Not referenced&quot;), .after = iucn_cat) %&gt;% st_drop_geometry() #To perform statistics on the distribution of PAs reported by the WDPA across countries/regions, we focus on not high-income countries. #Precisely, we restrict to countries defined as low-income, lower middle-income, upper-middle income, minus Russia, and including Chile, Uruguay New Caledonia and Panama df_ctry_stat_wdpa = WDI(country = &quot;all&quot;, start = &quot;1960&quot;, end = &quot;2022&quot;, extra = TRUE, language = &quot;en&quot;) %&gt;% group_by(iso3c) %&gt;% slice(1) %&gt;% ungroup() %&gt;% select(c(&quot;iso3c&quot;, &quot;income&quot;)) %&gt;% rename(&quot;iso3&quot; = &quot;iso3c&quot;, &quot;wb_inc_grp&quot; = &quot;income&quot;) %&gt;% filter((wb_inc_grp %in% c(&quot;Low income&quot;, &quot;Lower middle income&quot;, &quot;Upper middle income&quot;) &amp; iso3 != &quot;RUS&quot;) | iso3 %in% c(&quot;CHL&quot;, &quot;URY&quot;, &quot;PAN&quot;, &quot;NCL&quot;)) lst_ctry_stat_wdpa = df_ctry_stat_wdpa$iso3 3.3 Performing descriptive statistics 3.3.1 FAPBM portfolio and Madagascar 3.3.1.1 IUCN FAPBM #Building the relevant dataset ##For all PAs .. data_cat_iucn = data_pa_fapbm %&gt;% filter(marine %in% c(0,1)) %&gt;% group_by(iucn_des_en, iucn_des_fr) %&gt;% #number of PAs per IUCN category summarize(n_iucn = n()) %&gt;% ungroup() %&gt;% #Frequency of IUCN categories mutate(n_pa = sum(n_iucn), freq_iucn = round(n_iucn/n_pa*100, 2)) %&gt;% arrange(desc(iucn_des_en)) %&gt;% mutate(ypos_iucn = cumsum(freq_iucn) - 0.5*freq_iucn) ##... and for referenced PAs only data_cat_iucn_ref = data_pa_fapbm %&gt;% filter(marine %in% c(0,1)) %&gt;% #Remove not referenced PAs subset(!(iucn_des_fr %in% c(&quot;Non catégorisée&quot;, &quot;Non référencée&quot;))) %&gt;% group_by(iucn_des_en, iucn_des_fr) %&gt;% #number of PAs per IUCN category summarize(n_iucn = n()) %&gt;% ungroup() %&gt;% #Frequency of IUCN categories mutate(n_pa = sum(n_iucn), freq_iucn = round(n_iucn/n_pa*100, 2)) %&gt;% arrange(freq_iucn) %&gt;% mutate(ypos_iucn = cumsum(freq_iucn) - 0.5*freq_iucn) #Pie charts pie_cat_iucn_en = ggplot(data_cat_iucn, aes(x=&quot;&quot;, y= freq_iucn, fill = iucn_des_en)) %&gt;% + geom_bar(width = 1, stat = &quot;identity&quot;, color=&quot;white&quot;) %&gt;% + coord_polar(&quot;y&quot;, start=0) %&gt;% + geom_label_repel(aes(x=1.2, label = paste0(round(freq_iucn, 1), &quot;%&quot;)), color = &quot;white&quot;, position = position_stack(vjust = 0.55), size=2.5, show.legend = FALSE) %&gt;% # + geom_label(aes(x=1.4, label = paste0(freq_iucn, &quot;%&quot;)), # color = &quot;white&quot;, # position = position_stack(vjust = 0.7), size=2.5, # show.legend = FALSE) %&gt;% + labs(x = &quot;&quot;, y = &quot;&quot;, title = &quot;Distribution of non-marine protected areas by IUCN categories (%)&quot;, subtitle = paste(&quot;Sample :&quot;, sum(data_cat_iucn$n_iucn), &quot;non-marine protected areas funded by FAPBM&quot;)) %&gt;% #+ scale_fill_brewer(name = &quot;Categories&quot;, palette = &quot;Dark2&quot;) %&gt;% + scale_fill_manual(name = &quot;Categories&quot;, values = c(&quot;Not categorized&quot; = &quot;#7570B3&quot;, &quot;Habitat or species management area&quot; = &quot;#E7298A&quot;, &quot;Protected landscape or seascape&quot; = &quot;#66A61E&quot;, &quot;Protected area with sust. use of nat. res.&quot; = &quot;#D95F02&quot;, &quot;National park&quot; = &quot;#1B9E77&quot;, &quot;Strict nature reserve&quot; = &quot;#E6AB02&quot;)) %&gt;% + theme_void() pie_cat_iucn_en pie_cat_iucn_ref_en = ggplot(data_cat_iucn_ref, aes(x=&quot;&quot;, y= freq_iucn, fill = iucn_des_en)) %&gt;% + geom_bar(width = 1, stat = &quot;identity&quot;, color=&quot;white&quot;) %&gt;% + coord_polar(&quot;y&quot;, start=0) %&gt;% + geom_label_repel(aes(x=1.2, label = paste0(round(freq_iucn, 1), &quot;%&quot;)), color = &quot;white&quot;, position = position_stack(vjust = 0.55), size=2.5, show.legend = FALSE) %&gt;% # + geom_label(aes(x=1.4, label = paste0(freq_iucn, &quot;%&quot;)), # color = &quot;white&quot;, # position = position_stack(vjust = 0.7), size=2.5, # show.legend = FALSE) %&gt;% + labs(x = &quot;&quot;, y = &quot;&quot;, title = &quot;Distribution of non-marine protected areas by IUCN categories \\nexcept for not categorized (%)&quot;, subtitle = paste(&quot;Sample :&quot;, sum(data_cat_iucn_ref$n_iucn), &quot;out of&quot;, sum(data_cat_iucn$n_iucn), &quot;non-marine protected areas funded by FAPBM&quot;)) %&gt;% #+ scale_fill_brewer(name = &quot;Categories&quot;, palette = &quot;Dark2&quot;) %&gt;% + scale_fill_manual(name = &quot;Categories&quot;, values = c(&quot;Not categorized&quot; = &quot;#7570B3&quot;, &quot;Habitat or species management area&quot; = &quot;#E7298A&quot;, &quot;Protected landscape or seascape&quot; = &quot;#66A61E&quot;, &quot;Protected area with sust. use of nat. res.&quot; = &quot;#D95F02&quot;, &quot;National park&quot; = &quot;#1B9E77&quot;, &quot;Strict nature reserve&quot; = &quot;#E6AB02&quot;)) %&gt;% + theme_void() pie_cat_iucn_ref_en #Saving figures tmp = paste(tempdir(), &quot;fig&quot;, sep = &quot;/&quot;) ggsave(paste(tmp, &quot;pie_cat_iucn_en.png&quot;, sep = &quot;/&quot;), plot = pie_cat_iucn_en, device = &quot;png&quot;, height = 6, width = 9) ggsave(paste(tmp, &quot;pie_cat_iucn_ref_en.png&quot;, sep = &quot;/&quot;), plot = pie_cat_iucn_ref_en, device = &quot;png&quot;, height = 6, width = 9) #Export to S3 storage ##List of files to save in the temp folder files &lt;- list.files(tmp, full.names = TRUE) ##Add each file in the bucket (same foler for every file in the temp) for(f in files) { cat(&quot;Uploading file&quot;, paste0(&quot;&#39;&quot;, f, &quot;&#39;&quot;), &quot;\\n&quot;) aws.s3::put_object(file = f, bucket = &quot;projet-afd-eva-ap/descriptive_stats/IUCN/FAPBM/no_marine&quot;, region = &quot;&quot;, show_progress = TRUE) } #Erase the files in the temp directory do.call(file.remove, list(list.files(tmp, full.names = TRUE))) All protected areas in Madagascar (reported by the WDPA) #Building the relevant dataset ##For all PAs .. data_cat_iucn = data_wdpa_mdg %&gt;% filter(marine %in% c(0,1)) %&gt;% group_by(iucn_des_en, iucn_des_fr) %&gt;% #number of PAs per IUCN category summarize(n_iucn = n()) %&gt;% ungroup() %&gt;% #Frequency of IUCN categories mutate(n_pa = sum(n_iucn), freq_iucn = round(n_iucn/n_pa*100, 2)) %&gt;% arrange(desc(iucn_des_en)) %&gt;% mutate(ypos_iucn = cumsum(freq_iucn) - 0.5*freq_iucn) ##... and for referenced PAs only data_cat_iucn_ref = data_wdpa_mdg %&gt;% filter(marine %in% c(0,1)) %&gt;% #Remove not referenced PAs subset(!(iucn_des_fr %in% c(&quot;Non catégorisée&quot;, &quot;Non référencée&quot;))) %&gt;% group_by(iucn_des_en, iucn_des_fr) %&gt;% #number of PAs per IUCN category summarize(n_iucn = n()) %&gt;% ungroup() %&gt;% #Frequency of IUCN categories mutate(n_pa = sum(n_iucn), freq_iucn = round(n_iucn/n_pa*100, 2)) %&gt;% arrange(freq_iucn) %&gt;% mutate(ypos_iucn = cumsum(freq_iucn) - 0.5*freq_iucn) #Pie charts pie_cat_iucn_en = ggplot(data_cat_iucn, aes(x=&quot;&quot;, y= freq_iucn, fill = iucn_des_en)) %&gt;% + geom_bar(width = 1, stat = &quot;identity&quot;, color=&quot;white&quot;) %&gt;% + coord_polar(&quot;y&quot;, start=0) %&gt;% + geom_label_repel(aes(x=1.2, label = paste0(round(freq_iucn, 1), &quot;%&quot;)), color = &quot;white&quot;, position = position_stack(vjust = 0.55), size=2.5, show.legend = FALSE) %&gt;% # + geom_label(aes(x=1.4, label = paste0(freq_iucn, &quot;%&quot;)), # color = &quot;white&quot;, # position = position_stack(vjust = 0.7), size=2.5, # show.legend = FALSE) %&gt;% + labs(x = &quot;&quot;, y = &quot;&quot;, title = &quot;Distribution of non-marine protected areas by IUCN categories (%)&quot;, subtitle = paste(&quot;Sample :&quot;, sum(data_cat_iucn$n_iucn), &quot;non-marine protected areas in Madagascar&quot;)) %&gt;% # + scale_fill_brewer(name = &quot;Categories&quot;, palette = &quot;Dark2&quot;) %&gt;% + scale_fill_manual(name = &quot;Categories&quot;, values = c(&quot;Not categorized&quot; = &quot;#7570B3&quot;, &quot;Habitat or species management area&quot; = &quot;#E7298A&quot;, &quot;Protected landscape or seascape&quot; = &quot;#66A61E&quot;, &quot;Protected area with sust. use of nat. res.&quot; = &quot;#D95F02&quot;, &quot;National park&quot; = &quot;#1B9E77&quot;, &quot;Strict nature reserve&quot; = &quot;#E6AB02&quot;)) %&gt;% + theme_void() pie_cat_iucn_en pie_cat_iucn_ref_en = ggplot(data_cat_iucn_ref, aes(x=&quot;&quot;, y= freq_iucn, fill = iucn_des_en)) %&gt;% + geom_bar(width = 1, stat = &quot;identity&quot;, color=&quot;white&quot;) %&gt;% + coord_polar(&quot;y&quot;, start=0) %&gt;% + geom_label_repel(aes(x=1.2, label = paste0(round(freq_iucn, 1), &quot;%&quot;)), color = &quot;white&quot;, position = position_stack(vjust = 0.55), size=2.5, show.legend = FALSE) %&gt;% # + geom_label(aes(x=1.4, label = paste0(freq_iucn, &quot;%&quot;)), # color = &quot;white&quot;, # position = position_stack(vjust = 0.7), size=2.5, # show.legend = FALSE) %&gt;% + labs(x = &quot;&quot;, y = &quot;&quot;, title = &quot;Distribution of non-marine protected areas by IUCN categories \\nexcept for not categorized (%)&quot;, subtitle = paste(&quot;Sample :&quot;, sum(data_cat_iucn_ref$n_iucn), &quot;out of&quot;, sum(data_cat_iucn$n_iucn), &quot;non-marine protected areas in Madagascar&quot;)) %&gt;% # + scale_fill_brewer(name = &quot;Categories&quot;, palette = &quot;Dark2&quot;) %&gt;% + scale_fill_manual(name = &quot;Categories&quot;, values = c(&quot;Not categorized&quot; = &quot;#7570B3&quot;, &quot;Habitat or species management area&quot; = &quot;#E7298A&quot;, &quot;Protected landscape or seascape&quot; = &quot;#66A61E&quot;, &quot;Protected area with sust. use of nat. res.&quot; = &quot;#D95F02&quot;, &quot;National park&quot; = &quot;#1B9E77&quot;, &quot;Strict nature reserve&quot; = &quot;#E6AB02&quot;)) %&gt;% + theme_void() pie_cat_iucn_ref_en #Saving figures tmp = paste(tempdir(), &quot;fig&quot;, sep = &quot;/&quot;) ggsave(paste(tmp, &quot;pie_cat_iucn_en.png&quot;, sep = &quot;/&quot;), plot = pie_cat_iucn_en, device = &quot;png&quot;, height = 6, width = 9) ggsave(paste(tmp, &quot;pie_cat_iucn_ref_en.png&quot;, sep = &quot;/&quot;), plot = pie_cat_iucn_ref_en, device = &quot;png&quot;, height = 6, width = 9) #Export to S3 storage ##List of files to save in the temp folder files &lt;- list.files(tmp, full.names = TRUE) ##Add each file in the bucket (same foler for every file in the temp) for(f in files) { cat(&quot;Uploading file&quot;, paste0(&quot;&#39;&quot;, f, &quot;&#39;&quot;), &quot;\\n&quot;) aws.s3::put_object(file = f, bucket = &quot;projet-afd-eva-ap/descriptive_stats/IUCN/MDG/no_marine&quot;, region = &quot;&quot;, show_progress = TRUE) } #Erase the files in the temp directory do.call(file.remove, list(list.files(tmp, full.names = TRUE))) Madagascar protected areas without FAPBM funded protected areas. #Building the relevant dataset ##For all PAs .. data_cat_iucn = data_wdpa_mdg %&gt;% filter(marine %in% c(0,1)) %&gt;% filter(!(wdpaid %in% data_pa_fapbm$wdpaid)) %&gt;% group_by(iucn_des_en, iucn_des_fr) %&gt;% #number of PAs per IUCN category summarize(n_iucn = n()) %&gt;% ungroup() %&gt;% #Frequency of IUCN categories mutate(n_pa = sum(n_iucn), freq_iucn = round(n_iucn/n_pa*100, 2)) %&gt;% arrange(desc(iucn_des_en)) %&gt;% mutate(ypos_iucn = cumsum(freq_iucn) - 0.5*freq_iucn) ##... and for referenced PAs only data_cat_iucn_ref = data_wdpa_mdg %&gt;% filter(marine %in% c(0,1)) %&gt;% filter(!(wdpaid %in% data_pa_fapbm$wdpaid)) %&gt;% #Remove not referenced PAs subset(!(iucn_des_fr %in% c(&quot;Non catégorisée&quot;, &quot;Non référencée&quot;))) %&gt;% group_by(iucn_des_en, iucn_des_fr) %&gt;% #number of PAs per IUCN category summarize(n_iucn = n()) %&gt;% ungroup() %&gt;% #Frequency of IUCN categories mutate(n_pa = sum(n_iucn), freq_iucn = round(n_iucn/n_pa*100, 2)) %&gt;% arrange(freq_iucn) %&gt;% mutate(ypos_iucn = cumsum(freq_iucn) - 0.5*freq_iucn) #Pie charts pie_cat_iucn_en = ggplot(data_cat_iucn, aes(x=&quot;&quot;, y= freq_iucn, fill = iucn_des_en)) %&gt;% + geom_bar(width = 1, stat = &quot;identity&quot;, color=&quot;white&quot;) %&gt;% + coord_polar(&quot;y&quot;, start=0) %&gt;% + geom_label_repel(aes(x=1.2, label = paste0(round(freq_iucn, 1), &quot;%&quot;)), color = &quot;white&quot;, position = position_stack(vjust = 0.55), size=2.5, show.legend = FALSE) %&gt;% # + geom_label(aes(x=1.4, label = paste0(freq_iucn, &quot;%&quot;)), # color = &quot;white&quot;, # position = position_stack(vjust = 0.7), size=2.5, # show.legend = FALSE) %&gt;% + labs(x = &quot;&quot;, y = &quot;&quot;, title = &quot;Distribution of non-marine protected areas by IUCN categories (%)&quot;, subtitle = paste(&quot;Sample :&quot;, sum(data_cat_iucn$n_iucn), &quot;non-marine, not FAPBM funded protected areas in Madagascar&quot;)) %&gt;% # + scale_fill_brewer(name = &quot;Categories&quot;, palette = &quot;Dark2&quot;) %&gt;% + scale_fill_manual(name = &quot;Categories&quot;, values = c(&quot;Not categorized&quot; = &quot;#7570B3&quot;, &quot;Habitat or species management area&quot; = &quot;#E7298A&quot;, &quot;Protected landscape or seascape&quot; = &quot;#66A61E&quot;, &quot;Protected area with sust. use of nat. res.&quot; = &quot;#D95F02&quot;, &quot;National park&quot; = &quot;#1B9E77&quot;, &quot;Strict nature reserve&quot; = &quot;#E6AB02&quot;)) %&gt;% + theme_void() pie_cat_iucn_en pie_cat_iucn_ref_en = ggplot(data_cat_iucn_ref, aes(x=&quot;&quot;, y= freq_iucn, fill = iucn_des_en)) %&gt;% + geom_bar(width = 1, stat = &quot;identity&quot;, color=&quot;white&quot;) %&gt;% + coord_polar(&quot;y&quot;, start=0) %&gt;% + geom_label_repel(aes(x=1.2, label = paste0(round(freq_iucn, 1), &quot;%&quot;)), color = &quot;white&quot;, position = position_stack(vjust = 0.55), size=2.5, show.legend = FALSE) %&gt;% # + geom_label(aes(x=1.4, label = paste0(freq_iucn, &quot;%&quot;)), # color = &quot;white&quot;, # position = position_stack(vjust = 0.7), size=2.5, # show.legend = FALSE) %&gt;% + labs(x = &quot;&quot;, y = &quot;&quot;, title = &quot;Distribution of non-marine protected areas by IUCN categories \\nexcept for not categorized (%)&quot;, subtitle = paste(&quot;Sample :&quot;, sum(data_cat_iucn_ref$n_iucn), &quot;out of&quot;, sum(data_cat_iucn$n_iucn), &quot;non-marine, not FAPBM funded protected areas in Madagascar&quot;)) %&gt;% # + scale_fill_brewer(name = &quot;Categories&quot;, palette = &quot;Dark2&quot;) %&gt;% + scale_fill_manual(name = &quot;Categories&quot;, values = c(&quot;Not categorized&quot; = &quot;#7570B3&quot;, &quot;Habitat or species management area&quot; = &quot;#E7298A&quot;, &quot;Protected landscape or seascape&quot; = &quot;#66A61E&quot;, &quot;Protected area with sust. use of nat. res.&quot; = &quot;#D95F02&quot;, &quot;National park&quot; = &quot;#1B9E77&quot;, &quot;Strict nature reserve&quot; = &quot;#E6AB02&quot;)) %&gt;% + theme_void() pie_cat_iucn_ref_en #Saving figures tmp = paste(tempdir(), &quot;fig&quot;, sep = &quot;/&quot;) ggsave(paste(tmp, &quot;pie_cat_iucn_en.png&quot;, sep = &quot;/&quot;), plot = pie_cat_iucn_en, device = &quot;png&quot;, height = 6, width = 9) ggsave(paste(tmp, &quot;pie_cat_iucn_ref_en.png&quot;, sep = &quot;/&quot;), plot = pie_cat_iucn_ref_en, device = &quot;png&quot;, height = 6, width = 9) #Export to S3 storage ##List of files to save in the temp folder files &lt;- list.files(tmp, full.names = TRUE) ##Add each file in the bucket (same foler for every file in the temp) for(f in files) { cat(&quot;Uploading file&quot;, paste0(&quot;&#39;&quot;, f, &quot;&#39;&quot;), &quot;\\n&quot;) aws.s3::put_object(file = f, bucket = &quot;projet-afd-eva-ap/descriptive_stats/IUCN/MDG_noFAPBM/no_marine&quot;, region = &quot;&quot;, show_progress = TRUE) } #Erase the files in the temp directory do.call(file.remove, list(list.files(tmp, full.names = TRUE))) 3.3.1.2 Ecosystem FAPBM funded protected areas. #Build datasets data_eco = data_pa_fapbm %&gt;% #subset non-referencded PAs (have NA ecosysteme) subset(is.na(marine) == FALSE) %&gt;% mutate(marine = as.factor(marine)) data_eco$ecosyst_en = fct_recode(data_eco$marine, &quot;Terrestrial&quot;=&quot;0&quot;, &quot;Coastal&quot;=&quot;1&quot;, &quot;Marine&quot;=&quot;2&quot;) data_eco$ecosyst_fr = fct_recode(data_eco$marine, &quot;Terrestre&quot;=&quot;0&quot;, &quot;Côtier&quot;=&quot;1&quot;, &quot;Marin&quot;=&quot;2&quot;) data_eco_hist = data_eco %&gt;% group_by(ecosyst_en, ecosyst_fr) %&gt;% summarize(n = n(), freq = round(n/nrow(data_eco), 2)*100) %&gt;% ungroup() #Histogram in number (in English) pie_eco_en = ggplot(data_eco_hist, aes(x = &quot;&quot;, y = n, fill = ecosyst_en)) %&gt;% + geom_bar(width = 1, stat = &quot;identity&quot;,color=&quot;white&quot;) %&gt;% + geom_label(aes(x=1.3, label = paste0(freq, &quot;%&quot;)), color = &quot;black&quot;, position = position_stack(vjust = 0.55), size=2.5, show.legend = FALSE) %&gt;% + coord_polar(&quot;y&quot;, start=0) %&gt;% + labs(title = &quot;Proportion of protected areas by ecosystem type&quot;, subtitle = paste(&quot;Sample :&quot;, sum(data_eco_hist$n), &quot;protected areas funded by the FAPBM&quot;), x = &quot;Ecosystem type&quot;, y = &quot;Proportion of protected areas&quot;) %&gt;% #+ scale_fill_brewer(name = &quot;Ecosystem&quot;, palette=&quot;Paired&quot;) %&gt;% + scale_fill_manual(name = &quot;Ecosystem&quot;, values = c(&quot;Marine&quot; = &quot;#1F78B4&quot;, &quot;Terrestrial&quot; = &quot;#B2DF8A&quot;, &quot;Coastal&quot; = &quot;#A6CEE3&quot;)) %&gt;% + theme_void() pie_eco_en #Saving figures tmp = paste(tempdir(), &quot;fig&quot;, sep = &quot;/&quot;) ggsave(paste(tmp, &quot;pie_eco_en.png&quot;, sep = &quot;/&quot;), plot = pie_eco_en, device = &quot;png&quot;, height = 6, width = 9) #Export to S3 storage ##List of files to save in the temp folder files &lt;- list.files(tmp, full.names = TRUE) ##Add each file in the bucket (same foler for every file in the temp) count = 0 for(f in files) { count = count+1 cat(&quot;Uploading file&quot;, paste0(count, &quot;/&quot;, length(files), &quot; &#39;&quot;, f, &quot;&#39;&quot;), &quot;\\n&quot;) aws.s3::put_object(file = f, bucket = &quot;projet-afd-eva-ap/descriptive_stats/ecosysteme/FAPBM&quot;, region = &quot;&quot;, show_progress = TRUE) } #Erase the files in the temp directory do.call(file.remove, list(list.files(tmp, full.names = TRUE))) All protected areas in Madagascar (reported by the WDPA) #Build datasets data_eco = data_wdpa_mdg %&gt;% #subset non-referencded PAs (have NA ecosysteme) subset(is.na(marine) == FALSE) %&gt;% mutate(marine = as.factor(marine)) data_eco$ecosyst_en = fct_recode(data_eco$marine, &quot;Terrestrial&quot;=&quot;0&quot;, &quot;Coastal&quot;=&quot;1&quot;, &quot;Marine&quot;=&quot;2&quot;) data_eco$ecosyst_fr = fct_recode(data_eco$marine, &quot;Terrestre&quot;=&quot;0&quot;, &quot;Côtier&quot;=&quot;1&quot;, &quot;Marin&quot;=&quot;2&quot;) data_eco_hist = data_eco %&gt;% group_by(ecosyst_en, ecosyst_fr) %&gt;% summarize(n = n(), freq = round(n/nrow(data_eco), 2)*100) %&gt;% ungroup() #Histogram in number (in English) pie_eco_en = ggplot(data_eco_hist, aes(x = &quot;&quot;, y = n, fill = ecosyst_en)) %&gt;% + geom_bar(width = 1, stat = &quot;identity&quot;,color=&quot;white&quot;) %&gt;% + geom_label(aes(x=1.3, label = paste0(freq, &quot;%&quot;)), color = &quot;black&quot;, position = position_stack(vjust = 0.55), size=2.5, show.legend = FALSE) %&gt;% + coord_polar(&quot;y&quot;, start=0) %&gt;% + labs(title = &quot;Proportion of protected areas by ecosystem type&quot;, subtitle = paste(&quot;Sample :&quot;, sum(data_eco_hist$n), &quot;protected areas in Madagascar&quot;), x = &quot;Ecosystem type&quot;, y = &quot;Proportion of protected areas&quot;) %&gt;% # + scale_fill_brewer(name = &quot;Ecosystem&quot;, palette=&quot;Paired&quot;) %&gt;% + scale_fill_manual(name = &quot;Ecosystem&quot;, values = c(&quot;Marine&quot; = &quot;#1F78B4&quot;, &quot;Terrestrial&quot; = &quot;#B2DF8A&quot;, &quot;Coastal&quot; = &quot;#A6CEE3&quot;)) %&gt;% + theme_void() pie_eco_en #Saving figures tmp = paste(tempdir(), &quot;fig&quot;, sep = &quot;/&quot;) ggsave(paste(tmp, &quot;pie_eco_en.png&quot;, sep = &quot;/&quot;), plot = pie_eco_en, device = &quot;png&quot;, height = 6, width = 9) #Export to S3 storage ##List of files to save in the temp folder files &lt;- list.files(tmp, full.names = TRUE) ##Add each file in the bucket (same foler for every file in the temp) count = 0 for(f in files) { count = count+1 cat(&quot;Uploading file&quot;, paste0(count, &quot;/&quot;, length(files), &quot; &#39;&quot;, f, &quot;&#39;&quot;), &quot;\\n&quot;) aws.s3::put_object(file = f, bucket = &quot;projet-afd-eva-ap/descriptive_stats/ecosysteme/MDG&quot;, region = &quot;&quot;, show_progress = TRUE) } #Erase the files in the temp directory do.call(file.remove, list(list.files(tmp, full.names = TRUE))) Madagascar without FAPBM #Build datasets data_eco = data_wdpa_mdg %&gt;% #subset non-referencded PAs (have NA ecosysteme) subset(is.na(marine) == FALSE) %&gt;% filter(!(wdpaid %in% data_pa_fapbm$wdpaid)) %&gt;% mutate(marine = as.factor(marine)) data_eco$ecosyst_en = fct_recode(data_eco$marine, &quot;Terrestrial&quot;=&quot;0&quot;, &quot;Coastal&quot;=&quot;1&quot;, &quot;Marine&quot;=&quot;2&quot;) data_eco$ecosyst_fr = fct_recode(data_eco$marine, &quot;Terrestre&quot;=&quot;0&quot;, &quot;Côtier&quot;=&quot;1&quot;, &quot;Marin&quot;=&quot;2&quot;) data_eco_hist = data_eco %&gt;% group_by(ecosyst_en, ecosyst_fr) %&gt;% summarize(n = n(), freq = round(n/nrow(data_eco), 2)*100) %&gt;% ungroup() #Histogram in number (in English) pie_eco_en = ggplot(data_eco_hist, aes(x = &quot;&quot;, y = n, fill = ecosyst_en)) %&gt;% + geom_bar(width = 1, stat = &quot;identity&quot;,color=&quot;white&quot;) %&gt;% + geom_label(aes(x=1.3, label = paste0(freq, &quot;%&quot;)), color = &quot;black&quot;, position = position_stack(vjust = 0.55), size=2.5, show.legend = FALSE) %&gt;% + coord_polar(&quot;y&quot;, start=0) %&gt;% + labs(title = &quot;Proportion of protected areas by ecosystem type&quot;, subtitle = paste(&quot;Sample :&quot;, sum(data_eco_hist$n), &quot;protected areas in Madagascar, not funded by the FAPBM&quot;), x = &quot;Ecosystem type&quot;, y = &quot;Proportion of protected areas&quot;) %&gt;% # + scale_fill_brewer(name = &quot;Ecosystem&quot;, palette=&quot;Paired&quot;) %&gt;% + scale_fill_manual(name = &quot;Ecosystem&quot;, values = c(&quot;Marine&quot; = &quot;#1F78B4&quot;, &quot;Terrestrial&quot; = &quot;#B2DF8A&quot;, &quot;Coastal&quot; = &quot;#A6CEE3&quot;)) %&gt;% + theme_void() pie_eco_en #Saving figures tmp = paste(tempdir(), &quot;fig&quot;, sep = &quot;/&quot;) ggsave(paste(tmp, &quot;pie_eco_en.png&quot;, sep = &quot;/&quot;), plot = pie_eco_en, device = &quot;png&quot;, height = 6, width = 9) #Export to S3 storage ##List of files to save in the temp folder files &lt;- list.files(tmp, full.names = TRUE) ##Add each file in the bucket (same foler for every file in the temp) count = 0 for(f in files) { count = count+1 cat(&quot;Uploading file&quot;, paste0(count, &quot;/&quot;, length(files), &quot; &#39;&quot;, f, &quot;&#39;&quot;), &quot;\\n&quot;) aws.s3::put_object(file = f, bucket = &quot;projet-afd-eva-ap/descriptive_stats/ecosysteme/MDG_noFAPBM&quot;, region = &quot;&quot;, show_progress = TRUE) } #Erase the files in the temp directory do.call(file.remove, list(list.files(tmp, full.names = TRUE))) 3.3.1.3 Governance FAPBM funded protected areas #Table of the governance type distribution ##English version data_gov_en = data_pa_fapbm %&gt;% filter(marine %in% c(0,1)) %&gt;% mutate(gov_type = case_when(is.na(gov_type) == TRUE ~ &quot;Not referenced&quot;, TRUE ~ gov_type)) %&gt;% group_by(gov_type) %&gt;% summarize(n = n()) %&gt;% mutate(n_tot = sum(n), freq = round(n/n_tot*100,1)) %&gt;% select(-n_tot) %&gt;% arrange(-freq) tbl_gov_en = data_gov_en names(tbl_gov_en) = c(&quot;Governance&quot;,&quot;Number of PAs&quot;,&quot;Share of PAs (%)&quot;) #PAs with nureported or unreferenced governance types are removed ##Tables ###English data_gov_knwn_en = data_pa_fapbm %&gt;% filter(marine %in% c(0,1)) %&gt;% mutate(gov_type = case_when(is.na(gov_type) == TRUE ~ &quot;Not referenced&quot;, TRUE ~ gov_type)) %&gt;% filter(gov_type != &quot;Not Reported&quot; &amp; gov_type != &quot;Not referenced&quot;) %&gt;% group_by(gov_type) %&gt;% summarize(n = n()) %&gt;% mutate(n_tot = sum(n), freq = round(n/n_tot*100,1)) %&gt;% select(-n_tot) %&gt;% arrange(-freq) tbl_gov_knwn_en = data_gov_knwn_en names(tbl_gov_knwn_en) = c(&quot;Governance&quot;,&quot;Number of PAs&quot;,&quot;Share of PAs (%)&quot;) ##Pie charts ###English pie_gov_knwn_en = ggplot(data_gov_knwn_en, aes(x=&quot;&quot;, y= freq, fill= gov_type)) %&gt;% + geom_bar(width = 1, stat = &quot;identity&quot;, color=&quot;white&quot;) %&gt;% + geom_label(aes(x=1.3, label = paste0(format(freq, digits = 2), &quot;%&quot;)), color = &quot;black&quot;, position = position_stack(vjust = 0.55), size=2.5, show.legend = FALSE) %&gt;% + coord_polar(&quot;y&quot;, start=0) %&gt;% + labs(title = &quot;Governance type of non-marine protected areas \\nexcept for not reported governance&quot;, subtitle = paste(&quot;Sample :&quot;, sum(data_gov_knwn_en$n), &quot;out of&quot;, sum(data_gov_en$n), &quot;non-marine protected areas funded by FAPBM&quot;)) %&gt;% # + scale_fill_brewer(name = &quot;Governance&quot;, palette=&quot;Paired&quot;) %&gt;% + scale_fill_manual(name = &quot;Governance&quot;, values = c(&quot;Not Reported&quot; = &quot;#A6CEE3&quot;, &quot;Local communities&quot; = &quot;#1F78B4&quot;, &quot;Government-delegated management&quot; = &quot;#B2DF8A&quot;, &quot;Non-profit organisations&quot; = &quot;#33A02C&quot;, &quot;Collaborative governance&quot; = &quot;#FB9A99&quot;, &quot;Federal or national ministry or agency&quot; = &quot;#E31A1C&quot;)) %&gt;% + theme_void() pie_gov_knwn_en #Saving figures tmp = paste(tempdir(), &quot;fig&quot;, sep = &quot;/&quot;) print(xtable(tbl_gov_knwn_en, caption = &quot;Governance of non-marine protected areas funded by FAPBM (when known)&quot;, type = &quot;latex&quot;), file = paste(tmp, &quot;tbl_gov_knwn_en.tex&quot;, sep =&quot;/&quot;)) ggsave(paste(tmp, &quot;pie_gov_knwn_en.png&quot;, sep = &quot;/&quot;), plot = pie_gov_knwn_en, device = &quot;png&quot;, height = 6, width = 9) #Export to S3 storage ##List of files to save in the temp folder files &lt;- list.files(tmp, full.names = TRUE) ##Add each file in the bucket (same foler for every file in the temp) count = 0 for(f in files) { count = count+1 cat(&quot;Uploading file&quot;, paste0(count, &quot;/&quot;, length(files), &quot; &#39;&quot;, f, &quot;&#39;&quot;), &quot;\\n&quot;) aws.s3::put_object(file = f, bucket = &quot;projet-afd-eva-ap/descriptive_stats/gouvernance/FAPBM/no_marine&quot;, region = &quot;&quot;, show_progress = TRUE) } #Erase the files in the temp directory do.call(file.remove, list(list.files(tmp, full.names = TRUE))) All protected areas in Madagascar (reported by the WDPA) #Table of the governance type distribution ##English version data_gov_en = data_wdpa_mdg %&gt;% filter(marine %in% c(0,1)) %&gt;% mutate(gov_type = case_when(is.na(gov_type) == TRUE ~ &quot;Not referenced&quot;, TRUE ~ gov_type)) %&gt;% group_by(gov_type) %&gt;% summarize(n = n()) %&gt;% mutate(n_tot = sum(n), freq = round(n/n_tot*100,1)) %&gt;% select(-n_tot) %&gt;% arrange(-freq) tbl_gov_en = data_gov_en names(tbl_gov_en) = c(&quot;Governance&quot;,&quot;Number of PAs&quot;,&quot;Share of PAs (%)&quot;) #PAs with nureported or unreferenced governance types are removed ##Tables ###English data_gov_knwn_en = data_wdpa_mdg %&gt;% filter(marine %in% c(0,1)) %&gt;% mutate(gov_type = case_when(is.na(gov_type) == TRUE ~ &quot;Not referenced&quot;, TRUE ~ gov_type)) %&gt;% filter(gov_type != &quot;Not Reported&quot; &amp; gov_type != &quot;Not referenced&quot;) %&gt;% group_by(gov_type) %&gt;% summarize(n = n()) %&gt;% mutate(n_tot = sum(n), freq = round(n/n_tot*100,1)) %&gt;% select(-n_tot) %&gt;% arrange(-freq) tbl_gov_knwn_en = data_gov_knwn_en names(tbl_gov_knwn_en) = c(&quot;Governance&quot;,&quot;Number of PAs&quot;,&quot;Share of PAs (%)&quot;) ##Pie charts ###English pie_gov_knwn_en = ggplot(data_gov_knwn_en, aes(x=&quot;&quot;, y= freq, fill= gov_type)) %&gt;% + geom_bar(width = 1, stat = &quot;identity&quot;, color=&quot;white&quot;) %&gt;% + geom_label(aes(x=1.3, label = paste0(format(freq, digits = 2), &quot;%&quot;)), color = &quot;black&quot;, position = position_stack(vjust = 0.55), size=2.5, show.legend = FALSE) %&gt;% + coord_polar(&quot;y&quot;, start=0) %&gt;% + labs(title = &quot;Governance type of non-marine protected areas \\nexcept for not reported governance&quot;, subtitle = paste(&quot;Sample :&quot;, sum(data_gov_knwn_en$n), &quot;out of&quot;, sum(data_gov_en$n), &quot;protected areas in Madagascar&quot;)) %&gt;% #+ scale_fill_brewer(name = &quot;Governance&quot;, palette=&quot;Paired&quot;) %&gt;% + scale_fill_manual(name = &quot;Governance&quot;, values = c(&quot;Not Reported&quot; = &quot;#A6CEE3&quot;, &quot;Local communities&quot; = &quot;#1F78B4&quot;, &quot;Government-delegated management&quot; = &quot;#B2DF8A&quot;, &quot;Non-profit organisations&quot; = &quot;#33A02C&quot;, &quot;Collaborative governance&quot; = &quot;#FB9A99&quot;, &quot;Federal or national ministry or agency&quot; = &quot;#E31A1C&quot;)) %&gt;% + theme_void() pie_gov_knwn_en #Saving figures tmp = paste(tempdir(), &quot;fig&quot;, sep = &quot;/&quot;) print(xtable(tbl_gov_knwn_en, caption = &quot;Governance of non-marine protected areas in Madagascar (when known)&quot;, type = &quot;latex&quot;), file = paste(tmp, &quot;tbl_gov_knwn_en.tex&quot;, sep =&quot;/&quot;)) ggsave(paste(tmp, &quot;pie_gov_knwn_en.png&quot;, sep = &quot;/&quot;), plot = pie_gov_knwn_en, device = &quot;png&quot;, height = 6, width = 9) #Export to S3 storage ##List of files to save in the temp folder files &lt;- list.files(tmp, full.names = TRUE) ##Add each file in the bucket (same foler for every file in the temp) count = 0 for(f in files) { count = count+1 cat(&quot;Uploading file&quot;, paste0(count, &quot;/&quot;, length(files), &quot; &#39;&quot;, f, &quot;&#39;&quot;), &quot;\\n&quot;) aws.s3::put_object(file = f, bucket = &quot;projet-afd-eva-ap/descriptive_stats/gouvernance/MDG/no_marine&quot;, region = &quot;&quot;, show_progress = TRUE) } #Erase the files in the temp directory do.call(file.remove, list(list.files(tmp, full.names = TRUE))) Madagascar without FAPBM funded protected areas #Table of the governance type distribution ##English version data_gov_en = data_wdpa_mdg %&gt;% filter(!(wdpaid %in% data_pa_fapbm$wdpaid)) %&gt;% filter(marine %in% c(0,1)) %&gt;% mutate(gov_type = case_when(is.na(gov_type) == TRUE ~ &quot;Not referenced&quot;, TRUE ~ gov_type)) %&gt;% group_by(gov_type) %&gt;% summarize(n = n()) %&gt;% mutate(n_tot = sum(n), freq = round(n/n_tot*100,1)) %&gt;% select(-n_tot) %&gt;% arrange(-freq) tbl_gov_en = data_gov_en names(tbl_gov_en) = c(&quot;Governance&quot;,&quot;Number of PAs&quot;,&quot;Share of PAs (%)&quot;) #PAs with nureported or unreferenced governance types are removed ##Tables ###English data_gov_knwn_en = data_wdpa_mdg %&gt;% filter(!(wdpaid %in% data_pa_fapbm$wdpaid)) %&gt;% filter(marine %in% c(0,1)) %&gt;% mutate(gov_type = case_when(is.na(gov_type) == TRUE ~ &quot;Not referenced&quot;, TRUE ~ gov_type)) %&gt;% filter(gov_type != &quot;Not Reported&quot; &amp; gov_type != &quot;Not referenced&quot;) %&gt;% group_by(gov_type) %&gt;% summarize(n = n()) %&gt;% mutate(n_tot = sum(n), freq = round(n/n_tot*100,1)) %&gt;% select(-n_tot) %&gt;% arrange(-freq) tbl_gov_knwn_en = data_gov_knwn_en names(tbl_gov_knwn_en) = c(&quot;Governance&quot;,&quot;Number of PAs&quot;,&quot;Share of PAs (%)&quot;) ##Pie charts ###English pie_gov_knwn_en = ggplot(data_gov_knwn_en, aes(x=&quot;&quot;, y= freq, fill= gov_type)) %&gt;% + geom_bar(width = 1, stat = &quot;identity&quot;, color=&quot;white&quot;) %&gt;% + geom_label(aes(x=1.3, label = paste0(format(freq, digits = 2), &quot;%&quot;)), color = &quot;black&quot;, position = position_stack(vjust = 0.55), size=2.5, show.legend = FALSE) %&gt;% + coord_polar(&quot;y&quot;, start=0) %&gt;% + labs(title = &quot;Governance type of non-marine protected areas \\nexcept for not reported governance&quot;, subtitle = paste(&quot;Sample :&quot;, sum(data_gov_knwn_en$n), &quot;out of&quot;, sum(data_gov_en$n), &quot;protected areas in Madagascar, not funded by the FAPBM&quot;)) %&gt;% #+ scale_fill_brewer(name = &quot;Governance&quot;, palette=&quot;Paired&quot;) %&gt;% + scale_fill_manual(name = &quot;Governance&quot;, values = c(&quot;Not Reported&quot; = &quot;#A6CEE3&quot;, &quot;Local communities&quot; = &quot;#1F78B4&quot;, &quot;Government-delegated management&quot; = &quot;#B2DF8A&quot;, &quot;Non-profit organisations&quot; = &quot;#33A02C&quot;, &quot;Collaborative governance&quot; = &quot;#FB9A99&quot;, &quot;Federal or national ministry or agency&quot; = &quot;#E31A1C&quot;)) %&gt;% + theme_void() pie_gov_knwn_en #Saving figures tmp = paste(tempdir(), &quot;fig&quot;, sep = &quot;/&quot;) print(xtable(tbl_gov_knwn_en, caption = &quot;Governance of non-marine protected areas in Madagascar, not funded by the FAPBM (when known)&quot;, type = &quot;latex&quot;), file = paste(tmp, &quot;tbl_gov_knwn_en.tex&quot;, sep =&quot;/&quot;)) ggsave(paste(tmp, &quot;pie_gov_knwn_en.png&quot;, sep = &quot;/&quot;), plot = pie_gov_knwn_en, device = &quot;png&quot;, height = 6, width = 9) #Export to S3 storage ##List of files to save in the temp folder files &lt;- list.files(tmp, full.names = TRUE) ##Add each file in the bucket (same foler for every file in the temp) count = 0 for(f in files) { count = count+1 cat(&quot;Uploading file&quot;, paste0(count, &quot;/&quot;, length(files), &quot; &#39;&quot;, f, &quot;&#39;&quot;), &quot;\\n&quot;) aws.s3::put_object(file = f, bucket = &quot;projet-afd-eva-ap/descriptive_stats/gouvernance/MDG_noFAPBM/no_marine&quot;, region = &quot;&quot;, show_progress = TRUE) } #Erase the files in the temp directory do.call(file.remove, list(list.files(tmp, full.names = TRUE))) 3.3.1.4 Number of PAs #Statistics ## PAs in the WDAP n_mdg = data_wdpa_mdg %&gt;% filter(iso3 == &quot;MDG&quot;) %&gt;% nrow() n_fapbm = data_pa_fapbm %&gt;% filter(iso3 == &quot;MDG&quot;) %&gt;% nrow() ## PAs in the WDAP, not marine n_mdg_nomarine = data_wdpa_mdg %&gt;% filter(iso3 == &quot;MDG&quot; &amp; marine %in% c(0,1)) %&gt;% nrow() n_fapbm_nomarine = data_pa_fapbm %&gt;% filter(iso3 == &quot;MDG&quot; &amp; marine %in% c(0,1)) %&gt;% nrow() ## PA we can analyze with our methodology yr_min = 2002 n_mdg_ie = data_wdpa_mdg %&gt;% filter(iso3 == &quot;MDG&quot;) %&gt;% filter(status_yr &gt;= yr_min &amp; marine %in% c(0,1) &amp; rep_area &gt; 1 ) %&gt;% nrow() n_fapbm_ie = data_pa_fapbm %&gt;% filter(iso3 == &quot;MDG&quot;) %&gt;% filter(status_yr &gt;= yr_min &amp; marine %in% c(0,1) &amp; area_km2 &gt; 1 ) %&gt;% nrow() 3.3.1.5 Area of PAs FAPBM funded protected areas tbl_area_fapbm = data_pa_fapbm %&gt;% filter(marine %in% c(0,1)) %&gt;% summarize(n = n(), tot = format(sum(area_km2), big.mark = &quot;,&quot;, digits = 1, scientific = FALSE), min = format(min(area_km2), big.mark = &quot;,&quot;, digits = 1, scientific = FALSE), max = format(max(area_km2), big.mark = &quot;,&quot;, digits = 1, scientific = FALSE), mean = format(mean(area_km2), big.mark = &quot;,&quot;, digits = 1, scientific = FALSE) ) names(tbl_area_fapbm) = c(&quot;Number of PAs&quot;, &quot;Total area (km²)&quot;, &quot;Min. area (km²)&quot;, &quot;Max. area (km²)&quot;, &quot;Average area (km²)&quot;) #Saving figures tmp = paste(tempdir(), &quot;fig&quot;, sep = &quot;/&quot;) print(xtable(tbl_area_fapbm, caption = &quot;Statistics on non-marine protected areas funded by FAPBM&quot;, type = &quot;latex&quot;), file = paste(tmp, &quot;tbl_area_fapbm.tex&quot;, sep = &quot;/&quot;)) #Export to S3 storage ##List of files to save in the temp folder files &lt;- list.files(tmp, full.names = TRUE) ##Add each file in the bucket (same foler for every file in the temp) count = 0 for(f in files) { count = count+1 cat(&quot;Uploading file&quot;, paste0(count, &quot;/&quot;, length(files), &quot; &#39;&quot;, f, &quot;&#39;&quot;), &quot;\\n&quot;) aws.s3::put_object(file = f, bucket = &quot;projet-afd-eva-ap/descriptive_stats/surface/FAPBM/no_marine&quot;, region = &quot;&quot;, show_progress = TRUE) } #Erase the files in the temp directory do.call(file.remove, list(list.files(tmp, full.names = TRUE))) All protected areas in Madagascar (reported by the WDPA) tbl_area_mdg = data_wdpa_mdg %&gt;% st_drop_geometry() %&gt;% filter(marine %in% c(0,1)) %&gt;% summarize(n = n(), tot = format(sum(rep_area), big.mark = &quot;,&quot;, digits = 1, scientific = FALSE), min = format(min(rep_area), big.mark = &quot;,&quot;, digits = 1, scientific = FALSE), max = format(max(rep_area), big.mark = &quot;,&quot;, digits = 1, scientific = FALSE), mean = format(mean(rep_area), big.mark = &quot;,&quot;, digits = 1, scientific = FALSE) ) names(tbl_area_mdg) = c(&quot;Number of PAs&quot;, &quot;Total area (km²)&quot;, &quot;Min. area (km²)&quot;, &quot;Max. area (km²)&quot;, &quot;Average area (km²)&quot;) #Saving figures tmp = paste(tempdir(), &quot;fig&quot;, sep = &quot;/&quot;) print(xtable(tbl_area_mdg, caption = &quot;Statistics on non-marine protected areas in Madagascar&quot;, type = &quot;latex&quot;), file = paste(tmp, &quot;tbl_area_mdg.tex&quot;, sep = &quot;/&quot;)) #Export to S3 storage ##List of files to save in the temp folder files &lt;- list.files(tmp, full.names = TRUE) ##Add each file in the bucket (same foler for every file in the temp) count = 0 for(f in files) { count = count+1 cat(&quot;Uploading file&quot;, paste0(count, &quot;/&quot;, length(files), &quot; &#39;&quot;, f, &quot;&#39;&quot;), &quot;\\n&quot;) aws.s3::put_object(file = f, bucket = &quot;projet-afd-eva-ap/descriptive_stats/surface/MDG/no_marine&quot;, region = &quot;&quot;, show_progress = TRUE) } #Erase the files in the temp directory do.call(file.remove, list(list.files(tmp, full.names = TRUE))) Madagascar without FAPBM funded protected areas. tbl_area_mdg_nofapbm = data_wdpa_mdg %&gt;% st_drop_geometry() %&gt;% filter(marine %in% c(0,1)) %&gt;% filter(!(wdpaid %in% data_pa_fapbm$wdpaid)) %&gt;% summarize(n = n(), tot = format(sum(rep_area), big.mark = &quot;,&quot;, digits = 1, scientific = FALSE), min = format(min(rep_area), big.mark = &quot;,&quot;, digits = 1, scientific = FALSE), max = format(max(rep_area), big.mark = &quot;,&quot;, digits = 1, scientific = FALSE), mean = format(mean(rep_area), big.mark = &quot;,&quot;, digits = 1, scientific = FALSE) ) names(tbl_area_mdg_nofapbm) = c(&quot;Number of PAs&quot;, &quot;Total area (km²)&quot;, &quot;Min. area (km²)&quot;, &quot;Max. area (km²)&quot;, &quot;Average area (km²)&quot;) #Saving figures tmp = paste(tempdir(), &quot;fig&quot;, sep = &quot;/&quot;) print(xtable(tbl_area_mdg_nofapbm, caption = &quot;Statistics on non-marine protected areas in Madagascar, not funded by the FAPBM&quot;, type = &quot;latex&quot;), file = paste(tmp, &quot;tbl_area_mdg_nofapbm.tex&quot;, sep = &quot;/&quot;)) #Export to S3 storage ##List of files to save in the temp folder files &lt;- list.files(tmp, full.names = TRUE) ##Add each file in the bucket (same foler for every file in the temp) count = 0 for(f in files) { count = count+1 cat(&quot;Uploading file&quot;, paste0(count, &quot;/&quot;, length(files), &quot; &#39;&quot;, f, &quot;&#39;&quot;), &quot;\\n&quot;) aws.s3::put_object(file = f, bucket = &quot;projet-afd-eva-ap/descriptive_stats/surface/MDG_noFAPBM/no_marine&quot;, region = &quot;&quot;, show_progress = TRUE) } #Erase the files in the temp directory do.call(file.remove, list(list.files(tmp, full.names = TRUE))) 3.4 Evolution of tree cover and deforestation All protected areas in Madagascar (reported by the WDPA) ##2000 tree cover data_treecover_2000 = aws.s3::s3read_using( FUN = data.table::fread, encoding = &quot;UTF-8&quot;, # Mettre les options de FUN ici object = &quot;data_tidy/GFW/MDG/treecover_extent_2000__ha.csv&quot;, bucket = &quot;projet-afd-eva-ap&quot;, opts = list(&quot;region&quot; = &quot;&quot;)) ##Deforestation 2001-2022 data_treeloss = aws.s3::s3read_using( FUN = data.table::fread, encoding = &quot;UTF-8&quot;, # Mettre les options de FUN ici object = &quot;data_tidy/GFW/MDG/treecover_loss__ha.csv&quot;, bucket = &quot;projet-afd-eva-ap&quot;, opts = list(&quot;region&quot; = &quot;&quot;)) data_plot_mdg = data_treeloss %&gt;% left_join(data_treecover_2000, by = &quot;iso&quot;) %&gt;% rename(&quot;year&quot; = &quot;umd_tree_cover_loss__year&quot;, &quot;loss_ha&quot; = &quot;umd_tree_cover_loss__ha&quot;, &quot;emissions_Mg&quot; = &quot;gfw_gross_emissions_co2e_all_gases__Mg&quot;, &quot;area_ha&quot; = &quot;area__ha&quot;, &quot;treecover_2000_ha&quot; = &quot;umd_tree_cover_extent_2000__ha&quot; ) %&gt;% arrange(year) %&gt;% mutate(cum_loss = cumsum(loss_ha), treecover_ha_mdg = treecover_2000_ha - cum_loss, treecover_rel00_mdg = treecover_ha_mdg/treecover_2000_ha*100) fig_treeloss_mdg = ggplot(data = data_plot_mdg, aes(x = year, y = treecover_rel00_mdg)) %&gt;% + geom_line(color = &quot;#3182BD&quot;) %&gt;% + geom_point(color = &quot;#3182BD&quot;) %&gt;% + labs(x = &quot;&quot;, y = &quot;% of 2000 tree cover&quot;, title = &quot;Evolution of forest cover in Madagascar&quot;, subtitle = paste(&quot;Treecover in 2000 :&quot;, format(data_plot_mdg$treecover_2000_ha[1], digits = 1, big.mark = &quot;,&quot;, scientific = F), &quot;ha&quot;), caption = &quot;Data : Global Forest Watch&quot;) %&gt;% + theme(legend.position = &quot;bottom&quot;, legend.key = element_rect(fill = &quot;white&quot;), plot.title = element_text(size = 14, face = &quot;bold&quot;), axis.text.x = element_text(angle = 45,size=10, hjust = .5, vjust = .6), axis.title.x = element_text(margin = margin(t = 10)), panel.background = element_rect(fill = &#39;white&#39;, colour = &#39;white&#39;, linewidth = 0.5, linetype = &#39;solid&#39;), panel.grid.major = element_line(colour = &#39;grey90&#39;, linetype = &#39;solid&#39;), panel.grid.minor = element_line(colour = &#39;grey90&#39;, linetype = &#39;solid&#39;), plot.caption = element_text(color = &#39;grey50&#39;, size = 8.5, face = &#39;plain&#39;, hjust = 0)) fig_treeloss_mdg #Saving figures tmp = paste(tempdir(), &quot;fig&quot;, sep = &quot;/&quot;) ggsave(paste(tmp, &quot;fig_treeloss_mdg.png&quot;, sep = &quot;/&quot;), plot = fig_treeloss_mdg, device = &quot;png&quot;, height = 6, width = 9) #Export to S3 storage ##List of files to save in the temp folder files &lt;- list.files(tmp, full.names = TRUE) ##Add each file in the bucket (same foler for every file in the temp) count = 0 for(f in files) { count = count+1 cat(&quot;Uploading file&quot;, paste0(count, &quot;/&quot;, length(files), &quot; &#39;&quot;, f, &quot;&#39;&quot;), &quot;\\n&quot;) aws.s3::put_object(file = f, bucket = &quot;projet-afd-eva-ap/descriptive_stats/GFW/MDG/all&quot;, region = &quot;&quot;, show_progress = TRUE) } #Erase the files in the temp directory do.call(file.remove, list(list.files(tmp, full.names = TRUE))) FAPBM funded protected areas. #Filter the WDPA to non-marine PAs in MDG funded by the FAPBM wdpa_fapbm = data_wdpa %&gt;% filter(iso3 == &quot;MDG&quot; &amp; marine %in% c(0,1) &amp; st_geometry_type(geom) == &quot;MULTIPOLYGON&quot; &amp; wdpaid %in% unique(data_pa_fapbm$wdpaid)) %&gt;% st_make_valid() %&gt;% st_cast(to = &quot;POLYGON&quot;) %&gt;% mutate() #Download the data with the MAPME package data.tree.fapbm = init_portfolio(wdpa_fapbm, years = 2000:2022, add_resources = FALSE) %&gt;% get_resources(resources = c(&quot;gfw_treecover&quot;, &quot;gfw_lossyear&quot;)) %&gt;% calc_indicators(indicators = &quot;treecover_area&quot;, min_size=1, # indicator-specific argument min_cover=10) %&gt;% unnest(treecover_area) %&gt;% drop_na(treecover) %&gt;% #get rid of units with NA values mutate(across(c(&quot;treecover&quot;), \\(x) round(x, 3))) %&gt;% # Round numeric columns pivot_wider(names_from = &quot;years&quot;, values_from = &quot;treecover&quot;, names_prefix = &quot;treecover_&quot;) %&gt;% st_drop_geometry() %&gt;% group_by(wdpaid) %&gt;% summarize(across(.cols = starts_with(&quot;treecover&quot;), .fns = ~sum(.x, na.rm = TRUE))) %&gt;% ungroup() #Build a plotting dataset data_plot_fapbm = data.tree.fapbm %&gt;% st_drop_geometry() %&gt;% group_by(wdpaid) %&gt;% summarize(across(.cols = starts_with(&quot;treecover&quot;), .fns = ~sum(.x, na.rm = TRUE))) %&gt;% ungroup() %&gt;% mutate(across(.cols = starts_with(&quot;treecover&quot;), .fns = ~sum(.x, na.rm = TRUE))) %&gt;% slice(1) %&gt;% # mutate(across(.cols = starts_with(&quot;treecover&quot;), # .fns = ~.x/treecover_2000*100)) %&gt;% pivot_longer(cols = c(starts_with(&quot;treecover&quot;)), names_to = c(&quot;var&quot;, &quot;year&quot;), names_sep = &quot;_&quot;, values_to = &quot;treecover_ha_fapbm&quot;) %&gt;% mutate(treecover_rel00_fapbm = treecover_ha_fapbm/treecover_ha_fapbm[year == 2000]*100) %&gt;% select(c(year, treecover_ha_fapbm, treecover_rel00_fapbm)) %&gt;% mutate(year = as.numeric(year)) fig_treeloss_fapbm = ggplot(data = data_plot_fapbm, aes(x = year, y = treecover_rel00_fapbm)) %&gt;% + geom_line(color = &quot;#3182BD&quot;) %&gt;% + geom_point(color = &quot;#3182BD&quot;) %&gt;% + labs(x = &quot;&quot;, y = &quot;% of 2000 tree cover&quot;, title = &quot;Evolution of forest cover in FAPBM funded protected areas&quot;, subtitle = paste(&quot;Treecover in 2000 :&quot;, format(data_plot_fapbm[data_plot_fapbm$year == 2000,]$treecover_ha_fapbm, digits = 1, big.mark = &quot;,&quot;, scientific = F), &quot;ha&quot;), caption = &quot;Data : Global Forest Watch&quot;) %&gt;% + theme(legend.position = &quot;bottom&quot;, legend.key = element_rect(fill = &quot;white&quot;), plot.title = element_text(size = 14, face = &quot;bold&quot;), axis.text.x = element_text(angle = 45,size=10, hjust = .5, vjust = .6), axis.title.x = element_text(margin = margin(t = 10)), panel.background = element_rect(fill = &#39;white&#39;, colour = &#39;white&#39;, linewidth = 0.5, linetype = &#39;solid&#39;), panel.grid.major = element_line(colour = &#39;grey90&#39;, linetype = &#39;solid&#39;), panel.grid.minor = element_line(colour = &#39;grey90&#39;, linetype = &#39;solid&#39;), plot.caption = element_text(color = &#39;grey50&#39;, size = 8.5, face = &#39;plain&#39;, hjust = 0)) fig_treeloss_fapbm # aws.s3::s3write_using( # FUN = data.table::fwrite, # data.tree.fapbm, # # Mettre les options de FUN ici # object = &quot;data_tidy/GFW/MDG/FAPBM/data_treecover_2000_2022.csv&quot;, # bucket = &quot;projet-afd-eva-ap&quot;, # opts = list(&quot;region&quot; = &quot;&quot;)) #Saving figures tmp = paste(tempdir(), &quot;fig&quot;, sep = &quot;/&quot;) ggsave(paste(tmp, &quot;fig_treeloss_fapbm.png&quot;, sep = &quot;/&quot;), plot = fig_treeloss_fapbm, device = &quot;png&quot;, height = 6, width = 9) #Export to S3 storage ##List of files to save in the temp folder files &lt;- list.files(tmp, full.names = TRUE) ##Add each file in the bucket (same foler for every file in the temp) count = 0 for(f in files) { count = count+1 cat(&quot;Uploading file&quot;, paste0(count, &quot;/&quot;, length(files), &quot; &#39;&quot;, f, &quot;&#39;&quot;), &quot;\\n&quot;) aws.s3::put_object(file = f, bucket = &quot;projet-afd-eva-ap/descriptive_stats/GFW/MDG/FAPBM&quot;, region = &quot;&quot;, show_progress = TRUE) } #Erase the files in the temp directory do.call(file.remove, list(list.files(tmp, full.names = TRUE))) Madagascar protected areas without FAPBM funded ones. wdpa_nofapbm = data_wdpa %&gt;% filter(iso3 == &quot;MDG&quot; &amp; marine %in% c(0,1) &amp; st_geometry_type(geom) == &quot;MULTIPOLYGON&quot; &amp; !(wdpaid %in% unique(data_pa_fapbm$wdpaid))) %&gt;% st_make_valid() %&gt;% st_cast(to = &quot;POLYGON&quot;) data.tree.nofapbm = init_portfolio(wdpa_nofapbm, years = 2000:2022, add_resources = FALSE) %&gt;% get_resources(resources = c(&quot;gfw_treecover&quot;, &quot;gfw_lossyear&quot;)) %&gt;% calc_indicators(indicators = &quot;treecover_area&quot;, min_size=1, # indicator-specific argument min_cover=10) %&gt;% unnest(treecover_area) %&gt;% drop_na(treecover) %&gt;% #get rid of units with NA values mutate(across(c(&quot;treecover&quot;), \\(x) round(x, 3))) %&gt;% # Round numeric columns pivot_wider(names_from = &quot;years&quot;, values_from = &quot;treecover&quot;, names_prefix = &quot;treecover_&quot;) %&gt;% st_drop_geometry() %&gt;% group_by(wdpaid) %&gt;% summarize(across(.cols = starts_with(&quot;treecover&quot;), .fns = ~sum(.x, na.rm = TRUE))) %&gt;% ungroup() aws.s3::s3write_using( FUN = data.table::fwrite, data.tree.nofapbm, # Mettre les options de FUN ici object = &quot;data_tidy/GFW/MDG/noFAPBM/data_treecover_2000_2022.csv&quot;, bucket = &quot;projet-afd-eva-ap&quot;, opts = list(&quot;region&quot; = &quot;&quot;)) data_plot_nofapbm = data.tree.nofapbm %&gt;% st_drop_geometry() %&gt;% group_by(wdpaid) %&gt;% summarize(across(.cols = starts_with(&quot;treecover&quot;), .fns = ~sum(.x, na.rm = TRUE))) %&gt;% ungroup() %&gt;% mutate(across(.cols = starts_with(&quot;treecover&quot;), .fns = ~sum(.x, na.rm = TRUE))) %&gt;% slice(1) %&gt;% # mutate(across(.cols = starts_with(&quot;treecover&quot;), # .fns = ~.x/treecover_2000*100)) %&gt;% pivot_longer(cols = c(starts_with(&quot;treecover&quot;)), names_to = c(&quot;var&quot;, &quot;year&quot;), names_sep = &quot;_&quot;, values_to = &quot;treecover_ha_nofapbm&quot;) %&gt;% mutate(treecover_rel00_nofapbm = treecover_ha_nofapbm/treecover_ha_nofapbm[year == 2000]*100) %&gt;% select(c(year, treecover_ha_nofapbm, treecover_rel00_nofapbm)) %&gt;% mutate(year = as.numeric(year)) fig_treeloss_nofapbm = ggplot(data = data_plot_nofapbm, aes(x = year, y = treecover_rel00_nofapbm)) %&gt;% + geom_line(color = &quot;#3182BD&quot;) %&gt;% + geom_point(color = &quot;#3182BD&quot;) %&gt;% + labs(x = &quot;&quot;, y = &quot;% of 2000 tree cover&quot;, title = &quot;Evolution of forest cover, in protected areas not FAPBM funded&quot;, subtitle = paste(&quot;Treecover in 2000 :&quot;, format(data_plot_nofapbm[data_plot_nofapbm$year == 2000,]$treecover_ha_nofapbm, digits = 1, big.mark = &quot;,&quot;, scientific = F), &quot;ha&quot;), caption = &quot;Data : Global Forest Watch&quot;) %&gt;% + theme(legend.position = &quot;bottom&quot;, legend.key = element_rect(fill = &quot;white&quot;), plot.title = element_text(size = 14, face = &quot;bold&quot;), axis.text.x = element_text(angle = 45,size=10, hjust = .5, vjust = .6), axis.title.x = element_text(margin = margin(t = 10)), panel.background = element_rect(fill = &#39;white&#39;, colour = &#39;white&#39;, linewidth = 0.5, linetype = &#39;solid&#39;), panel.grid.major = element_line(colour = &#39;grey90&#39;, linetype = &#39;solid&#39;), panel.grid.minor = element_line(colour = &#39;grey90&#39;, linetype = &#39;solid&#39;), plot.caption = element_text(color = &#39;grey50&#39;, size = 8.5, face = &#39;plain&#39;, hjust = 0)) fig_treeloss_nofapbm #Saving figures tmp = paste(tempdir(), &quot;fig&quot;, sep = &quot;/&quot;) ggsave(paste(tmp, &quot;fig_treeloss_nofapbm.png&quot;, sep = &quot;/&quot;), plot = fig_treeloss_nofapbm, device = &quot;png&quot;, height = 6, width = 9) #Export to S3 storage ##List of files to save in the temp folder files &lt;- list.files(tmp, full.names = TRUE) ##Add each file in the bucket (same foler for every file in the temp) count = 0 for(f in files) { count = count+1 cat(&quot;Uploading file&quot;, paste0(count, &quot;/&quot;, length(files), &quot; &#39;&quot;, f, &quot;&#39;&quot;), &quot;\\n&quot;) aws.s3::put_object(file = f, bucket = &quot;projet-afd-eva-ap/descriptive_stats/GFW/MDG/noFAPBM&quot;, region = &quot;&quot;, show_progress = TRUE) } #Erase the files in the temp directory do.call(file.remove, list(list.files(tmp, full.names = TRUE))) Plotting the evolution of forest cover in Madagascar, FAPBM funded and not FAPMB funded protected areas in the same figure. data_plot_all = data_plot_fapbm %&gt;% left_join(data_plot_nofapbm, by = &quot;year&quot;) %&gt;% left_join(select(data_plot_mdg, c(year, treecover_ha_mdg, treecover_rel00_mdg)), by = &quot;year&quot;) %&gt;% mutate(treecover_rel00_mdg = case_when(is.na(treecover_rel00_mdg) == TRUE ~ 100, TRUE ~ treecover_rel00_mdg), treecover_ha_mdg = case_when(is.na(treecover_ha_mdg) == TRUE ~ data_plot_mdg$treecover_2000_ha[1], TRUE ~ treecover_ha_mdg)) #CARFEUL NEED TO RENAME VARIABLES fig_treeloss_all = ggplot(data_plot_all, aes(x = year)) %&gt;% + geom_line(aes(y = treecover_rel00_mdg, color = &quot;Madagascar&quot;)) %&gt;% + geom_point(aes(y = treecover_rel00_mdg, color = &quot;Madagascar&quot;)) %&gt;% + geom_line(aes(y = treecover_rel00_nofapbm, color = &quot;Not FAPBM&quot;)) %&gt;% + geom_point(aes(y = treecover_rel00_nofapbm, color = &quot;Not FAPBM&quot;)) %&gt;% + geom_line(aes(y = treecover_rel00_fapbm, color = &quot;FAPBM&quot;)) %&gt;% + geom_point(aes(y = treecover_rel00_fapbm, color = &quot;FAPBM&quot;)) %&gt;% + scale_color_manual(name = &quot;&quot;, values = c(&quot;Madagascar&quot; = &quot;grey50&quot;, &quot;Not FAPBM&quot; = &quot;#DE2D26&quot;, &quot;FAPBM&quot; = &quot;#31A354&quot;)) %&gt;% + labs(x = &quot;&quot;, y = &quot;% of 2000 tree cover&quot;, title = &quot;Evolution of forest cover&quot;, caption = paste(&quot;Data : Global Forest Watch\\nTreecover in 2000 :&quot;, format(data_plot_all[data_plot_all$year == 2000,]$treecover_ha_mdg, digits = 1, big.mark = &quot;,&quot;, scientific = F), &quot;ha in Madagascar,&quot;, format(data_plot_all[data_plot_all$year == 2000,]$treecover_ha_fapbm, digits = 1, big.mark = &quot;,&quot;, scientific = F), &quot;ha of FAPBM funded protected areas and&quot;, format(data_plot_all[data_plot_all$year == 2000,]$treecover_ha_nofapbm, digits = 1, big.mark = &quot;,&quot;, scientific = F), &quot;ha of non-funded.&quot;)) %&gt;% + theme(legend.position = &quot;bottom&quot;, legend.key = element_rect(fill = &quot;white&quot;), plot.title = element_text(size = 14, face = &quot;bold&quot;), axis.text.x = element_text(angle = 45,size=10, hjust = .5, vjust = .6), axis.title.x = element_text(margin = margin(t = 10)), panel.background = element_rect(fill = &#39;white&#39;, colour = &#39;white&#39;, linewidth = 0.5, linetype = &#39;solid&#39;), panel.grid.major = element_line(colour = &#39;grey90&#39;, linetype = &#39;solid&#39;), panel.grid.minor = element_line(colour = &#39;grey90&#39;, linetype = &#39;solid&#39;), plot.caption = element_text(color = &#39;grey50&#39;, size = 8.5, face = &#39;plain&#39;, hjust = 0)) fig_treeloss_all #Saving figures tmp = paste(tempdir(), &quot;fig&quot;, sep = &quot;/&quot;) ggsave(paste(tmp, &quot;fig_treeloss_all.png&quot;, sep = &quot;/&quot;), plot = fig_treeloss_all, device = &quot;png&quot;, height = 6, width = 9) #Export to S3 storage ##List of files to save in the temp folder files &lt;- list.files(tmp, full.names = TRUE) ##Add each file in the bucket (same foler for every file in the temp) count = 0 for(f in files) { count = count+1 cat(&quot;Uploading file&quot;, paste0(count, &quot;/&quot;, length(files), &quot; &#39;&quot;, f, &quot;&#39;&quot;), &quot;\\n&quot;) aws.s3::put_object(file = f, bucket = &quot;projet-afd-eva-ap/descriptive_stats/GFW/MDG&quot;, region = &quot;&quot;, show_progress = TRUE) } #Erase the files in the temp directory do.call(file.remove, list(list.files(tmp, full.names = TRUE))) "],["matching.html", "Section 4 Matching 4.1 Initial settings 4.2 Datasets and critical parameters 4.3 Matching process", " Section 4 Matching In this R Markdown are performed the different steps to obtain a matched dataset, i.e a dataset with control and treated observational units to eventually compute the treatment effect. The treatment here is to be under protected area status, and we look at the impact on deforestation. The steps are the following. Pre-processing : in a loop for each country, create a gridding of the country; import geospatial data on protected areas (PAs) from the World Dataset on Protected Areas (WDPA) and assign each observation unit/pixel to a group : PA of interest and analyzed (treated), PA of interest but not analyzed, PA not of interest, buffer (pixel closed to but not in a PA), other (so potential control). A PA of interest can be a PA known to be supported by the Agence Française de Développement (AFD) for instance. Some PAs are of interest but cannot be analyzed due to the design of the methodology (e.g marine protected areas when the focus is on deforestation); compute the covariates and outcome of interest in all pixels thanks to the mapme.biodiversity package; build the matching data frame : each pixel is assigned to a group and has covariates and outcome values. Post-processing : in each country, Load the matching dataframe obtained at the end of pre-processing for a given country, and extract the list of protected areas to process. For each protected area, perform the matching; plot covariate balance and density plots to assess the quality of the match; panelize the dataframe; plot the evolution of forest cover in treated and control areas, before and after matching; map the matched treated and control units. Map all matched treated and control units in the country. The methodology is not extensively described here to keep the documentation concise. The interested reader can refer to the working paper for more details. 4.1 Initial settings Configuring the Rmarkdown #{r setup, include=FALSE, eval = FALSE} #knitr::opts_knit$set(root.dir = rprojroot::find_rstudio_root_file()) # Downloading and installing the relevant packages #Install some libraries ## CRAN version install.packages(c(&quot;tictoc&quot;, &quot;geodata&quot;, &quot;wdpar&quot;, &quot;exactextractr&quot;, &quot;MatchIt&quot;, &quot;fixest&quot;, &quot;cobalt&quot;, &quot;future&quot;, &quot;progressr&quot;, &quot;mapme.biodiversity&quot;, &quot;future.callr&quot;, &quot;janitor&quot;, &quot;geomtextpath&quot;, &quot;rstac&quot;)) ## Github version (can be relevant if some features have not made it to CRAN version yet) #remotes::install_github(&quot;mapme-initiative/mapme.biodiversity&quot;, upgrade=&quot;always&quot;) #remotes::install_github(&quot;prioritizr/wdpar&quot;, upgrade=&quot;always&quot;) #Install the web driver to download wdpa data directly webdriver::install_phantomjs() # Load Libraries library(dplyr) library(janitor) #Functions to automate name cleaning library(tictoc) #For timing library(xtable) #Export dataframes as tables library(tidyr) library(stringr) #String specific functions library(ggplot2) # For plotting library(geomtextpath) #For annoted vertical lines in ggplot library(RColorBrewer) #Improved color palettes for plot legends library(ggrepel) #Refine labelling of some figures library(sf) # For handling vector data library(terra) # For handling raster data library(raster) # For handling raster data library(rgeos) library(geodata) # For getting country files library(wdpar) # For getting protected areas library(exactextractr) # For zonal statistics library(mapme.biodiversity) #Download geospatial data and compute specific indicators library(rstac) #To downlad NASA SRTM data library(aws.s3) #Access to storage library(MatchIt) #For matching library(fixest) #For estimating the models library(cobalt) #To visualize density plots and covariate balance from MatchIt outcomes library(future) #For parallel computing in mapme.biodiversity library(future.callr) #For parallel computing in mapme.biodiversity library(progressr) # To display progress bar Load the R functions called in the data processing #Import functions source(&quot;scripts/functions/02_fns_matching.R&quot;) 4.2 Datasets and critical parameters # Define working directories ## Define the path to a temporary, working directory processing steps. tmp_pre = paste(tempdir(), &quot;matching_pre&quot;, sep = &quot;/&quot;) tmp_post = paste(tempdir(), &quot;matching_post&quot;, sep = &quot;/&quot;) ## Define a directory where outputs are stored in SSPCloud. save_dir = paste(&quot;impact_analysis/matching&quot;, Sys.Date(), sep = &quot;/&quot;) #Today&#39;s date # save_dir = paste(&quot;impact_analysis/matching&quot;, &quot;2023-08-29&quot;, sep = &quot;/&quot;) #A specific date # Load datasets ## WDPA database ## Download and save # wdpa_wld_raw = wdpa_fetch(x = &quot;global&quot;, wait = TRUE, download_dir = tmp_pre, page_wait = 2, verbose = TRUE) # s3write_using(wdpa_wld_raw, # sf::st_write, # delete_dsn = TRUE, # object = paste0(&quot;data_raw/wdpa/wdpa_shp_global_raw.gpkg&quot;), # bucket = &quot;projet-afd-eva-ap&quot;, # opts = list(&quot;region&quot; = &quot;&quot;)) ##Load wdpa_wld_raw = s3read_using( sf::st_read, object = &quot;data_raw/wdpa/wdpa_shp_global_raw.gpkg&quot;, bucket = &quot;projet-afd-eva-ap&quot;, opts = list(&quot;region&quot; = &quot;&quot;)) ## Dataset specific to the PAs portfolio to analyze. Only one is selected depending on the analysis one wants to perform. ### PAs supported by the AFD # data_pa = # #fread(&quot;data_tidy/BDD_PA_AFD_ie.csv&quot; , encoding = &quot;UTF-8&quot;) # aws.s3::s3read_using( # FUN = data.table::fread, # encoding = &quot;UTF-8&quot;, # object = &quot;data_tidy/BDD_PA_AFD_ie.csv&quot;, # bucket = &quot;projet-afd-eva-ap&quot;, # opts = list(&quot;region&quot; = &quot;&quot;)) %&gt;% # #Sangha trinational (555547988) created in 2012 actually gathers three former PAs # #in CAF (31458), CMR (1245) and COG (72332) implemented in # #1990, 2001 and 1993 respectively. # # Evaluating the trinational PA is not relevant here : our method relies on pre-treatment obervsations (for matching and DiD) and the outcome is likely to be affected by the initial PAs. On the other hand, evaluating the three earlier PAs might be irrelevant for us : are they funded by the AFD ?? In a first approach, the trinational is removed. # filter(is.na(wdpaid) == TRUE | wdpaid != 555547988) ## PAs supported by the FAPBM # data_pa = # #fread(&quot;data_tidy/BDD_PA_AFD_ie.csv&quot; , encoding = &quot;UTF-8&quot;) # aws.s3::s3read_using( # FUN = data.table::fread, # encoding = &quot;UTF-8&quot;, # object = &quot;data_tidy/BDD_PA_FAPBM.csv&quot;, # bucket = &quot;projet-afd-eva-ap&quot;, # opts = list(&quot;region&quot; = &quot;&quot;)) ## All PAs in Madagascar data_pa = #fread(&quot;data_tidy/BDD_PA_AFD_ie.csv&quot; , encoding = &quot;UTF-8&quot;) aws.s3::s3read_using( FUN = data.table::fread, encoding = &quot;UTF-8&quot;, object = &quot;data_tidy/BDD_PA_MDG.csv&quot;, bucket = &quot;projet-afd-eva-ap&quot;, opts = list(&quot;region&quot; = &quot;&quot;)) # The list of countries (ISO3 codes) to analyze. This can be define manually or from the the dataset loaded. #List of countries in the sample # list_iso_africa = unique(data_pa[data_pa$region == &quot;Africa&quot;, iso3]) list_iso = &quot;MDG&quot; # Specify buffer width in meter buffer_m = 10000 # Specify the grid cell size in meter #gridSize = 10000 # Specify to sampling : the ideal, minimal number of pixels in a protected area. ## Note that by design this number is indicative, as the pixel size is defined from the protected area reported surface and sampling number, but the area considered in the analysis is the terrestrial area. For PAs with a marine part, the area analyzed is smaller and the number of pixels mechanically lower. n_sampling = 1000 #Specify the period of study to create the mapme.bidiversity portfolio ## Start year yr_first = 2000 ## End year yr_last = 2021 #Minimum treatment year #At least two pre-treatment periods of forest cover are needed to compute average pre-treatment deforestation, used as a matching variable. yr_min = yr_first+2 # Define column names of matching covariates colname.travelTime = &quot;minutes_median_5k_110mio&quot; colname.clayContent = &quot;clay_0_5cm_mean&quot; colname.elevation = &quot;elevation_mean&quot; colname.tri = &quot;tri_mean&quot; colname.fcIni = &quot;treecover_2000&quot; colname.flAvg = &quot;avgLoss_pre_treat&quot; #Matching ## Parameters match_method = &quot;cem&quot; cutoff_method = &quot;sturges&quot; k2k_method = &quot;mahalanobis&quot; is_k2k = TRUE ## Criteria to assess matching quality ### Standardized absolte mean difference : threshold th_mean = 0.1 ### Variance ratio : thresholds th_var_min = 0.5 th_var_max = 2 4.3 Matching process The following code is divided into pre- and post-processing steps (see above). At pre-processing stage, computations are done country-by-country. At post-proccessing stage, computations are done country-by-country and protected areas by protected areas. To facilitate the reading, each step consists in a call of a function define in an other R script. During the process, a text file (so-called log) is edited to keep track of the differents steps. Then after each critical step, the code checks whether an error occured by interrogating the variable is_ok (defined in the function corresponding to the step). If the step is ok (is_ok = TRUE) then the processing continues. Otherwise, the code goes to the next iteration (next country for pre-processing, next protected area for post-processing). This is useful in a multi-country, multi-PA analysis, to avoid the code to stop when an error occurs. Instead, the code continue and the analyst can see in the log whether there have been errors during the processing, where it happened and whether he or she needs to launch the analysis again for a specific country/PA. Generally speaking, this log is useful to remember what has been analyzed and assess everything was fine after the processing (warnings, processing of all the countries and PAs, etc.). For more details about the each step, please refer to the definition of the functions. ########## ### PRE-PROCESSING ########## #For each country in the list, the different steps of the pre-processing are performed, and the process duration computed count = 0 #Initialize counter max_i = length(list_iso) #Max value of the counter tic_pre = tic() #Start timer #Create a log to track progress of the analysis log = fn_pre_log(list_iso, buffer = buffer_m, sampling = n_sampling, yr_first = yr_first, yr_last = yr_last, yr_min = yr_min, name = paste0(&quot;log-&quot;, Sys.Date(), &quot;-NAME.txt&quot;), notes = &quot;Specific notes or remarks.&quot;) # Perform pre-processing steps country-by-country for (i in list_iso) { #Update counter and display progress count = count+1 print(paste0(i, &quot; : country &quot;, count, &quot;/&quot;, max_i)) #Append the log to track progress of the process on country i cat(paste(&quot;#####\\nCOUNTRY :&quot;, i, &quot;\\n#####\\n\\n&quot;), file = log, append = TRUE) #Generate observation units print(&quot;--Generating observation units&quot;) output_grid = fn_pre_grid(iso = i, yr_min = yr_min, path_tmp = tmp_pre, data_pa = data_pa, sampling = n_sampling, log = log, save_dir = save_dir) if(output_grid$is_ok == FALSE) {next} #Load the outputs utm_code = output_grid$utm_code #UTM code gadm_prj = output_grid$ctry_shp_prj #The country polygon with relevant projection grid = output_grid$grid #The country gridding gridSize = output_grid$gridSize #The spatial resolution of the gridding #Determining Group IDs and WDPA IDs for all observation units print(&quot;--Determining Group IDs and WDPA IDs&quot;) output_group = fn_pre_group(iso = i, wdpa_raw = wdpa_wld_raw, status = c(&quot;Proposed&quot;, &quot;Designated&quot;, &quot;Inscribed&quot;, &quot;Established&quot;), yr_min = yr_min, path_tmp = tmp_pre, utm_code = utm_code, buffer_m = buffer_m, data_pa = data_pa, gadm_prj = gadm_prj, grid = grid, gridSize = gridSize, log = log, save_dir = save_dir) if(output_group$is_ok == FALSE) {next} else grid_param = output_group$grid.param #Calculating outcome and other covariates for all observation units print(&quot;--Calculating outcome and other covariates&quot;) output_mf = fn_pre_mf_parallel(grid.param = grid_param, path_tmp = tmp_pre, iso = i, name_output = paste0(&quot;matching_frame_spling&quot;, n_sampling), ext_output = &quot;.gpkg&quot;, yr_first = yr_first, yr_last = yr_last, log = log, save_dir = save_dir) if(output_mf$is_ok == FALSE) {next} #Remove files in the session memory, to avoid saturation tmp_files = list.files(tmp_pre, include.dirs = T, full.names = T, recursive = T) file.remove(tmp_files) } #End timer for pre-processing toc_pre = toc() #Append the log cat(paste(&quot;END OF PRE-PROCESSING :&quot;, toc_pre$callback_msg, &quot;\\n\\n&quot;), file = log, append = TRUE) ########## ### POST-PROCESSING ########## #For each country in the list, the different steps of the post-processing are performed, and duration of the processing computed count_i = 0 #Initialize counter max_i = length(list_iso) #Max value of the counter tic_post = tic() #start timer #Append the log, and specify matching parameters and quality assessment cat(paste(&quot;##########\\nPOST-PROCESSING\\n##########\\n\\nPARAMETERS :\\nMatching\\n#Parameters\\n##Method :&quot;, match_method, &quot;\\n##Automatic cutoffs :&quot;, cutoff_method, &quot;\\n##Is it K2K matching ?&quot;, is_k2k, &quot;\\n##K2K method :&quot;, k2k_method, &quot;\\n#Quality assessement\\n##Absolute standardized mean difference (threshold)&quot;, th_mean, &quot;\\n##Variance ratio between&quot;, th_var_min, &quot;and&quot;, th_var_max), file = log, append = TRUE) # Perform post-processing steps country-by-country, area-by-area ## Loop over country for (i in list_iso) { #Update counter and show progress count_i = count_i+1 print(paste0(i, &quot; : country &quot;, count_i, &quot;/&quot;, max_i)) #Append the log to track progress of the process on country i cat(paste(&quot;#####\\nCOUNTRY :&quot;, i, &quot;\\n&quot;), file = log, append = TRUE) #Load the matching frame print(&quot;--Loading the matching frame&quot;) output_load = fn_post_load_mf(iso = i, yr_min = yr_min, name_input = paste0(&quot;matching_frame_spling&quot;, n_sampling), ext_input = &quot;.gpkg&quot;, log = log, save_dir = save_dir) if(output_load$is_ok == FALSE) {next} else mf_ini = output_load$mf list_pa = unique(mf_ini[mf_ini$wdpaid != 0, ]$wdpaid) #Append the log : list of PAs analyzed in the matching frame cat(paste(&quot;LIST OF WDPAIDs :&quot;, paste(list_pa, collapse = &quot;, &quot;), &quot;\\n#####\\n\\n&quot;), file = log, append = TRUE) #Initialization ##Counter count_j = 0 max_j = length(list_pa) ##List of control and treatment pixels matched df_pix_matched = data.frame() #Loop over the different PAs for (j in list_pa) { #Update counter and show progress count_j = count_j+1 print(paste0(&quot;WDPAID : &quot;, j, &quot; : &quot;, count_j, &quot;/&quot;, max_j)) #Append the log to track progress of the process on PA j cat(paste(&quot;###\\nWDPAID :&quot;, j, &quot;\\n###\\n\\n&quot;), file = log, append = TRUE) mf_ini_j = mf_ini %&gt;% filter(group == 1 | (group == 2 &amp; wdpaid == j)) #Add average pre-loss print(&quot;--Add covariate : average tree loss pre-funding&quot;) output_avgLoss = fn_post_avgLoss_prefund(mf = mf_ini_j, log = log) if(output_avgLoss$is_ok == FALSE) {next} else mf_j = output_avgLoss$mf #Run Coarsened Exact Matching print(&quot;--Run CEM&quot;) output_cem = fn_post_match_auto(mf = mf_j, iso = i, dummy_int = FALSE, match_method = match_method, cutoff_method = cutoff_method, is_k2k = is_k2k, k2k_method = k2k_method, th_mean = th_mean, th_var_min = th_var_min, th_var_max = th_var_max, colname.travelTime = colname.travelTime, colname.clayContent = colname.clayContent, colname.elevation = colname.elevation, colname.tri = colname.tri, colname.fcIni = colname.fcIni, colname.flAvg = colname.flAvg, log = log) if(output_cem$is_ok == FALSE) {next} else out_cem_j = output_cem$out.cem #Plots : covariates print(&quot;--Some plots : covariates&quot;) print(&quot;----Covariate balance&quot;) output_covbal = fn_post_covbal(out.cem = out_cem_j, mf = mf_j, colname.travelTime = colname.travelTime, colname.clayContent = colname.clayContent, colname.fcIni = colname.fcIni, colname.flAvg = colname.flAvg, colname.tri = colname.tri, colname.elevation = colname.elevation, iso = i, path_tmp = tmp_post, wdpaid = j, log = log, save_dir = save_dir) if(output_covbal$is_ok == FALSE) {next} print(&quot;----Density plots&quot;) output_density = fn_post_plot_density(out.cem = out_cem_j, mf = mf_j, colname.travelTime = colname.travelTime, colname.clayContent = colname.clayContent, colname.fcIni = colname.fcIni, colname.flAvg = colname.flAvg, colname.tri = colname.tri, colname.elevation = colname.elevation, iso = i, path_tmp = tmp_post, wdpaid = j, log = log, save_dir = save_dir) if(output_density$is_ok == FALSE) {next} #Panelize dataframes print(&quot;----Panelize (Un-)Matched Dataframe&quot;) output_panel = fn_post_panel(out.cem = out_cem_j, mf = mf_j, ext_output = &quot;.csv&quot;, iso = i, wdpaid = j, log = log, save_dir = save_dir) if(output_panel$is_ok == FALSE) {next} matched.wide.j = output_panel$matched.wide unmatched.wide.j = output_panel$unmatched.wide matched.long.j = output_panel$matched.long unmatched.long.j = output_panel$unmatched.long #Extract matched units and plot them on a grid print(&quot;----Extract matched units and plot them on a grid&quot;) ##Extract ID of treated and control pixels df_pix_matched_j = matched.wide.j %&gt;% st_drop_geometry() %&gt;% as.data.frame() %&gt;% dplyr::select(c(group, assetid)) %&gt;% rename(&quot;group_matched&quot; = &quot;group&quot;) df_pix_matched = rbind(df_pix_matched, df_pix_matched_j) ##Plot the grid with matched control and treated for the PA output_grid = fn_post_plot_grid(iso = i, wdpaid = j, is_pa = TRUE, df_pix_matched = df_pix_matched_j, path_tmp = tmp_post, log = log, save_dir = save_dir) if(output_grid$is_ok == FALSE) {next} #Plots the evolution of forest cover for treated and control units, before and after matching print(&quot;----Plots again : trend&quot;) output_trend = fn_post_plot_trend(matched.long = matched.long.j, unmatched.long = unmatched.long.j, mf = mf_j, data_pa = data_pa, iso = i, wdpaid = j, log = log, save_dir = save_dir) if(output_trend$is_ok == FALSE) {next} } # Plot the grid with matched control and treated for the country output_grid = fn_post_plot_grid(iso = i, wdpaid = j, is_pa = FALSE, df_pix_matched = df_pix_matched, path_tmp = tmp_post, log = log, save_dir = save_dir) if(output_grid$is_ok == FALSE) {next} } #End post-processing timer toc_post = toc() #Append the log and save it cat(paste(&quot;END OF POST-PROCESSING :&quot;, toc_post$callback_msg, &quot;\\n\\n&quot;), file = log, append = TRUE) aws.s3::put_object(file = log, bucket = paste(&quot;projet-afd-eva-ap&quot;, save_dir, sep = &quot;/&quot;), region = &quot;&quot;, show_progress = FALSE) #Notes on what to do next ## Automate the definition of cutoffs for CEM ### Coder 5.5.3 de Iacus et al. 2012 ? Permet de savoir le gain de matched units pour une modification des seuils d&#39;une variable ## Allow to enter a list of any covariates to perform the matching ## Function to plot Fig. 3 in Iacus et al. 2012 ## On veut ATE ou ATT ?? Je dirai ATT car on ne veut pas estimer l&#39;effet de mettre une AP, mais l&#39;effet des AP financés par l&#39;AFD "],["difference-in-difference.html", "Section 5 Difference-in-difference 5.1 Initial settings 5.2 Load datasets and define critical parameters 5.3 Computing treatment effects at protected area level 5.4 Compute aggregated metrics at country and region level 5.5 Display treatment effects in figures and tables 5.6 ", " Section 5 Difference-in-difference In this script are performed the last steps of the analysis. Using the datasets of matched treated and control units, it is possible to compute the effect of the conservation for each protected area. Then these results can be aggregated at country and region level. Some secondary metrics are also computed : the annual deforestation rates faced by treated and control units, before and after treatment (à la Wolf et al. 2021); the total and average forest loss across groups of protected areas on the period considered, compared to the value in control units, before and after matching. The process consists of the following steps. For a given country, load the list of protected areas whose observational units (treated pixels composing this area) have been matched to control units. For each protected area in this list : Compute annual deforestation rates : before and after treatment for treated units, on the whole period for control units. Compute treatment effect from matched treated and control pixels. Note that two functions exist depending on the portfolio analyzed : for AFD supported protected areas, funding-related information are added to the analysis (e.g year of funding). For the others, a general script is used. Compute treatment effect for unmatched treated and control pixels. This can be useful to assess the bias induced by the selection into treatment. In other words, the bias due to not using matching. Indeed protected areas tend to be located in region less prone to deforestation (e.g further away from cities or roads). Simply using non-protected areas as a counterfactual, without matching, would then overestimate the effect of the conservation program. Note that this step can be time and computationally intensive, because the number of unmatched units is higher than the number of matched ones. It is usually skipped. Plot the total area deforested on the period considered, in the protected area and its counterfactual, before and after matching. This is useful to illustrate the bias described above. Note that ideally the deforestation estimated in the protected area before and after matching should be the same. If note, the matched treated units are not representative of the overall protected area and the a local treatment effect will be estimated. The treatment effects, annual deforestation rates and estimations of total deforested area computed for each protected areas are gathered in specific datasets. This makes it possible to compute metrics aggregated at country and region level. These datastes are saved to the storage. If relevant, results of the analysis at protected area level are aggregated at country and region level. Finally, figures and tables are created to display the results. 5.1 Initial settings Configuring the Rmarkdown. #{r setup, include=FALSE, eval = FALSE} #knitr::opts_knit$set(root.dir = rprojroot::find_rstudio_root_file()) # Downloading and importing relevant packages. #Install some libraries install.packages(c(&quot;tictoc&quot;, &quot;fixest&quot;, &quot;cobalt&quot;, &quot;future&quot;, &quot;progressr&quot;, &quot;did&quot;, &quot;latex2exp&quot;, &quot;janitor&quot;, &quot;stringi&quot;)) # Load Libraries library(dplyr) library(stringi) library(tictoc) #For timing library(xtable) library(tidyr) library(stringr) library(ggplot2) # For plotting library(RColorBrewer) library(ggrepel) library(aws.s3) library(fixest) #For estimating the models library(did) library(latex2exp) library(janitor) To keep this document concise, each step calls a function defined in a R script. Interested reader can delve deeper into the data processing by looking at this script. The following chunck load the functions in the workspace. #Import functions source(&quot;scripts/functions/02_fns_did.R&quot;) 5.2 Load datasets and define critical parameters #Define working directories ##Temporary directory tmp_did = paste(tempdir(), &quot;did&quot;, sep = &quot;/&quot;) ##Loading and saving directories on the storage. This is either define on today&#39;s date, or by a user-defined date. #load_dir = paste(&quot;impact_analysis/matching&quot;, Sys.Date(), sep = &quot;/&quot;) load_dir = paste(&quot;impact_analysis/matching&quot;, &quot;2023-09-21&quot;, sep = &quot;/&quot;) #save_dir = paste(&quot;impact_analysis/did&quot;, Sys.Date(), sep = &quot;/&quot;) save_dir = paste(&quot;impact_analysis/did&quot;, &quot;2023-09-21&quot;, sep = &quot;/&quot;) ## Dataset specific to the PAs portfolio to analyze. Only one is selected depending on the analysis one wants to perform. ## AFD portfolio # data_pa = # #fread(&quot;data_tidy/BDD_PA_AFD_ie.csv&quot; , encoding = &quot;UTF-8&quot;) # aws.s3::s3read_using( # FUN = data.table::fread, # encoding = &quot;UTF-8&quot;, # object = &quot;data_tidy/BDD_PA_AFD_ie.csv&quot;, # bucket = &quot;projet-afd-eva-ap&quot;, # opts = list(&quot;region&quot; = &quot;&quot;)) %&gt;% # #Sangha trinational (555547988) created in 2012 actually gathers three former PAs # #in CAF (31458), CMR (1245) and COG (72332) implemented in # #1990, 2001 and 1993 respectively. # # Evaluating the trinational PA is not relevant here : our method relies on pre-treatment obervsations (for matching and DiD) and the outcome is likely to be affected by the initial PAs. On the other hand, evaluating the three earlier PAs might be irrelevant for us : are they funded by the AFD ?? In a first approach, the trinational is removed. # filter(is.na(wdpaid) == TRUE | wdpaid != 555547988) ##FAPBM data_fapbm = #fread(&quot;data_tidy/BDD_PA_AFD_ie.csv&quot; , encoding = &quot;UTF-8&quot;) aws.s3::s3read_using( FUN = data.table::fread, encoding = &quot;UTF-8&quot;, object = &quot;data_tidy/BDD_PA_FAPBM.csv&quot;, bucket = &quot;projet-afd-eva-ap&quot;, opts = list(&quot;region&quot; = &quot;&quot;)) ##Madagascar (all PAs) data_pa = #fread(&quot;data_tidy/BDD_PA_AFD_ie.csv&quot; , encoding = &quot;UTF-8&quot;) aws.s3::s3read_using( FUN = data.table::fread, encoding = &quot;UTF-8&quot;, object = &quot;data_tidy/BDD_PA_MDG.csv&quot;, bucket = &quot;projet-afd-eva-ap&quot;, opts = list(&quot;region&quot; = &quot;&quot;)) # The list of countries (ISO3 codes) to analyze. This can be define manually or from the the dataset loaded. # list_iso = data_pa %&gt;% # filter(region == &quot;Africa&quot;) %&gt;% # filter(!(iso3 %in% c(&quot;ZZ&quot;))) # list_iso = unique(list_iso$iso3) list_iso = &quot;MDG&quot; ## Information on funding from AFD internal datasets, on AFD funded projects related to protected areas. data_fund = #fread(&quot;data_tidy/BDD_PA_AFD_fund.csv&quot;) aws.s3::s3read_using( FUN = data.table::fread, encoding = &quot;UTF-8&quot;, # Mettre les options de FUN ici object = &quot;data_tidy/BDD_PA_AFD_fund.csv&quot;, bucket = &quot;projet-afd-eva-ap&quot;, opts = list(&quot;region&quot; = &quot;&quot;)) data_fund_nodupl = data_fund %&gt;% group_by(id_projet) %&gt;% slice(1) %&gt;% ungroup() %&gt;% dplyr::select(-c(&quot;mt_part_cofinancier_prevu_euro&quot;, &quot;cofinanciers_siop&quot;)) %&gt;% mutate(kfw = grepl(&quot;kfw&quot;, cofinanciers, ignore.case = TRUE), ffem = grepl(&quot;ffem&quot;, cofinanciers, ignore.case = TRUE)) ## List of projects related to protected areas in AFD, reported by technical departments data_pa_report = #read_delim(&quot;data_raw/BDD_PA_AFD.csv&quot;, delim = &quot;;&quot;) s3read_using(readr::read_delim, delim = &quot;;&quot;, show_col_types = FALSE, object = &quot;data_raw/BDD_PA_AFD.csv&quot;, bucket = &quot;projet-afd-eva-ap&quot;, opts = list(&quot;region&quot; = &quot;&quot;)) %&gt;% mutate(key = paste(id_projet, nom_ap, wdpaid, sep = &quot;_&quot;)) %&gt;% group_by(key) %&gt;% slice(1) #Specify the period of study to create the mapme.bidiversity portfolio ## Start year yr_first = 2000 ## End year yr_last = 2021 #Specify the margin of error to define confidence interval (0.05 corresponds 95% confidence interval). alpha = 0.05 5.3 Computing treatment effects at protected area level #For each country in the list, the different steps of the processing are performed count_i = 0 #Initialize counter max_i = length(list_iso) #Max value of the counter tic = tic() #Start timer #Create empty dataframes that will store the treatment effects computed for each protected area in the portfolio. ##Initialize a dataframe to store annual deforestation rate for each PA, à la Wolf et al. 2021 df_fl_annual_wolf = data.frame() ##Initialize a dataframe to store treatment effects of all PA analyzed df_fc_att = data.frame() #Effect on forest cover for matched units ##df_fc_att_unm = data.frame() #Effect on forest cover for unmacthed units df_fl_att = data.frame() #Effect on deforestation relative to 2000 ##Initialize a dataframe to store forest loss for visual evidence before/after matching df_plot_forest_loss = data.frame() for (i in list_iso) { #Update counter and show progress count_i = count_i+1 print(paste0(i, &quot; : country &quot;, count_i, &quot;/&quot;, max_i)) #Load the matching frame print(&quot;--Loading the list of PAs in the country considered&quot;) output_pa_i = fn_did_list_pa(iso = i, load_dir = load_dir) if(output_pa_i$is_ok == FALSE) {next} else list_pa_i = output_pa_i$list_pa count_j = 0 max_j = length(list_pa_i) for(j in list_pa_i) { count_j = count_j+1 print(paste0(&quot;WDPA ID &quot;, j, &quot; : &quot;, count_j, &quot;/&quot;, max_j)) #Compute annual deforestation rates in treated and control matched areas, à la Wolf et al. 2021. print(&quot;--Compute average deforestation rates à la Wolf et al. 2021&quot;) output_wolf_m_j = fn_fl_wolf(iso = i, wdpaid = j, alpha = alpha, load_dir = load_dir, ext_input = &quot;.csv&quot;) if(output_wolf_m_j$is_ok == FALSE) { next } else df_fl_wolf_m_j = output_wolf_m_j$df_fl_wolf_m_j df_fl_annual_wolf = rbind(df_fl_annual_wolf, df_fl_wolf_m_j) #Compute treatment effects print(&quot;--Compute treatment effects&quot;) print(&quot;----For matched units&quot;) #For AFD projects (funding info) # output_att_m_j = fn_did_att_afd(iso = i, wdpaid = j, # is_m = TRUE, # data_pa = data_pa, # data_fund = data_fund_nodupl, # data_report = data_pa_report, # alpha = alpha, # load_dir = load_dir, # ext_input = &quot;.csv&quot;, # save_dir = save_dir) #For PAs in general (no funding info) output_att_m_j = fn_did_att_general(iso = i, wdpaid = j, is_m = TRUE, data_pa = data_pa, alpha = alpha, load_dir = load_dir, ext_input = &quot;.csv&quot;, save_dir = save_dir) if(output_att_m_j$is_ok == FALSE) {next} else df_att_m_j = output_att_m_j df_fc_att = rbind(df_fc_att, df_att_m_j$df_fc_att) df_fl_att = rbind(df_fl_att, df_att_m_j$df_fl_att) print(&quot;----For unmatched units&quot;) #For AFD PAs (funding info known) # df_att_unm_j = fn_did_att_afd(iso = i, wdpaid = j, # is_m = FALSE, # data_pa = data_pa, # alpha = 0.05, # load_dir = load_dir, # ext_input = &quot;.csv&quot;, # save_dir = save_dir) # df_fc_att_unm = rbind(df_fc_att_unm, df_att_unm_j$df_fc_att) # df_fl_att_unm = rbind(df_fl_att, df_att_unm_j$df_fl_att) #For general PAs (funding info unknown) # df_att_unm_j = fn_did_att_general(iso = i, wdpaid = j, # is_m = FALSE, # data_pa = data_pa, # alpha = 0.05, # load_dir = load_dir, # ext_input = &quot;.csv&quot;, # save_dir = save_dir) # df_fc_att_unm = rbind(df_fc_att_unm, df_att_unm_j$df_fc_att) # df_fl_att_unm = rbind(df_fl_att, df_att_unm_j$df_fl_att) #Plot visual evidence before-after matching print(&quot;--Plot visual evidence before-after matching&quot;) df_plot_forest_loss_j = fn_plot_forest_loss(iso = i, wdpaid = j, alpha = alpha, data_pa = data_pa, load_dir = load_dir, ext_input = &quot;.csv&quot;, save_dir = save_dir) df_plot_forest_loss = rbind(df_plot_forest_loss, df_plot_forest_loss_j) } } #Finally save the treatment effects computed for every protected areas analyzed ## Treatment effect expressed in forest cover loss avoided (ha) aws.s3::s3write_using( FUN = data.table::fwrite, df_fc_att, # Mettre les options de FUN ici object = paste(save_dir, &quot;data_fc_att.csv&quot;, sep = &quot;/&quot;), bucket = &quot;projet-afd-eva-ap&quot;, opts = list(&quot;region&quot; = &quot;&quot;)) ## Treatment effect expressed in change of deforestation rate (percentage points) aws.s3::s3write_using( FUN = data.table::fwrite, df_fl_att, # Mettre les options de FUN ici bucket = , iso, wdpaid, sep = &quot;/&quot;) object = paste(save_dir, &quot;data_fl_att.csv&quot;, sep = &quot;/&quot;), bucket = &quot;projet-afd-eva-ap&quot;, opts = list(&quot;region&quot; = &quot;&quot;)) toc = toc() 5.4 Compute aggregated metrics at country and region level The aggregation of results at country and regional level is not necessarily relevant when the number of protected areas by country or region is relatively small and results heterogenous across protected areas. Instead, a figure displaying the results for all protected areas in the sample might be mor relevant. See next section. 5.4.1 Aggregation of treatment effects #Treatment effects are aggregated by region and country #For total avoided deforestation in ha, treatment effects are summed and so are the confidence intervals (CI). ## If the CI of a treatment effect is NA, then the CI for total treatment effects is NA also. Otherwise CI will be downward biased. #For avoided deforestation in % of 2000 forest cover, treatment effects are averaged and so are CI. CI being NA is less a problem here as we use a mean, not a sum avg_att_fc_ctry = df_fc_att %&gt;% group_by(region, iso3, time) %&gt;% summarize(n_obs = n(), att_per_mean = mean(att_per, na.rm = TRUE), cband_lower_per = mean(cband_lower_per, na.rm = TRUE), cband_upper_per = mean(cband_upper_per, na.rm = TRUE), att_pa_tot = sum(att_pa, na.rm = TRUE), cband_lower_pa = sum(cband_lower_pa, na.rm = FALSE), cband_upper_pa = sum(cband_upper_pa, na.rm = FALSE)) avg_att_fc_region = df_fc_att %&gt;% group_by(region, time) %&gt;% summarize(n_obs = n(), att_per_mean = mean(att_per, na.rm = TRUE), cband_lower_per = mean(cband_lower_per, na.rm = TRUE), cband_upper_per = mean(cband_upper_per, na.rm = TRUE), att_pa_tot = sum(att_pa, na.rm = TRUE), cband_lower_pa = sum(cband_lower_pa, na.rm = FALSE), cband_upper_pa = sum(cband_upper_pa, na.rm = FALSE)) avg_att_fl_ctry = df_fl_att %&gt;% group_by(region, iso3, time) %&gt;% summarize(n_obs = n(), att_mean = mean(att, na.rm = TRUE), cband_lower = mean(cband_lower, na.rm = TRUE), cband_upper = mean(cband_upper, na.rm = TRUE)) avg_att_fl_region = df_fl_att %&gt;% group_by(region, time) %&gt;% summarize(n_obs = n(), att_mean = mean(att, na.rm = TRUE), cband_lower = mean(cband_lower, na.rm = TRUE), cband_upper = mean(cband_upper, na.rm = TRUE)) 5.4.2 Aggregation of annual deforestation rates #Aggregate at region level ## Compute for each region, for treated units, average annual deforestation rate before treatment, after treatment and on the full period. Confidence intervals are also computed. avg_fl_annual_wolf_region = df_fl_annual_wolf %&gt;% filter(group == &quot;Treated&quot;) %&gt;% group_by(region) %&gt;% summarize(avg_FL_annual_wolf_pre = mean(avgFL_annual_wolf_pre, na.rm = TRUE), avg_FL_annual_wolf_pre_ci_up = mean(avgFL_annual_wolf_pre, na.rm = TRUE) + qt((1-alpha)/2,df=21-1)*sd(avgFL_annual_wolf_pre, na.rm = TRUE)/sqrt(21), avg_FL_annual_wolf_pre_ci_lower = mean(avgFL_annual_wolf_pre, na.rm = TRUE) - qt((1-alpha)/2,df=21-1)*sd(avgFL_annual_wolf_pre, na.rm = TRUE)/sqrt(21), med_FL_annual_wolf_pre_ci_up = median(avgFL_annual_wolf_pre, na.rm = TRUE), avg_FL_annual_wolf_tot = mean(avgFL_annual_wolf_tot, na.rm = TRUE), avg_FL_annual_wolf_tot_ci_up = mean(avgFL_annual_wolf_tot, na.rm = TRUE) + qt((1-alpha)/2,df=21-1)*sd(avgFL_annual_wolf_tot, na.rm = TRUE)/sqrt(21), avg_FL_annual_wolf_tot_ci_lower = mean(avgFL_annual_wolf_tot, na.rm = TRUE) - qt((1-alpha)/2,df=21-1)*sd(avgFL_annual_wolf_tot, na.rm = TRUE)/sqrt(21), med_FL_annual_wolf_tot_ci_up = median(avgFL_annual_wolf_tot, na.rm = TRUE)) #Aggregate at country level ## Same that at region level. avg_fl_annual_wolf_country = df_fl_annual_wolf %&gt;% filter(group == &quot;Treated&quot;) %&gt;% group_by(iso3) %&gt;% summarize(avg_FL_annual_wolf_pre = mean(avgFL_annual_wolf_pre, na.rm = TRUE), avg_FL_annual_wolf_pre_ci_up = mean(avgFL_annual_wolf_pre, na.rm = TRUE) + qt((1-alpha)/2,df=21-1)*sd(avgFL_annual_wolf_pre, na.rm = TRUE)/sqrt(21), avg_FL_annual_wolf_pre_ci_lower = mean(avgFL_annual_wolf_pre, na.rm = TRUE) - qt((1-alpha)/2,df=21-1)*sd(avgFL_annual_wolf_pre, na.rm = TRUE)/sqrt(21), med_FL_annual_wolf_pre_ci_up = median(avgFL_annual_wolf_pre, na.rm = TRUE), avg_FL_annual_wolf_tot = mean(avgFL_annual_wolf_tot, na.rm = TRUE), avg_FL_annual_wolf_tot_ci_up = mean(avgFL_annual_wolf_tot, na.rm = TRUE) + qt((1-alpha)/2,df=21-1)*sd(avgFL_annual_wolf_tot, na.rm = TRUE)/sqrt(21), avg_FL_annual_wolf_tot_ci_lower = mean(avgFL_annual_wolf_tot, na.rm = TRUE) - qt((1-alpha)/2,df=21-1)*sd(avgFL_annual_wolf_tot, na.rm = TRUE)/sqrt(21), med_FL_annual_wolf_tot_ci_up = median(avgFL_annual_wolf_tot, na.rm = TRUE)) %&gt;% ungroup() 5.4.3 Average and total forest loss on the period, at country and region level For each protected area, the total deforestation is estimated on the period in the protected area and a counterfactual, before and after matching. This metric can be aggregated at country and region level : the sum of total deforestation or its average. This can be computed for all protected areas in the sample, a specific subset of protected areas, but also at country or region level. #Compute average and total deforestation ... ## across all protected areas in the sample df_plot_forest_loss_agg_all = df_plot_forest_loss %&gt;% group_by(matched, group, year) %&gt;% summarize(tot_fc_rel00_ha = sum(fc_tot_rel00_ha, na.rm = TRUE), tot_fc_rel00_ha_ci_lower = sum(fc_tot_rel00_ha_ci_lower, na.rm = FALSE), tot_fc_rel00_ha_ci_upper = sum(fc_tot_rel00_ha_ci_upper, na.rm = FALSE), avg_fc_rel00_ha = mean(fc_tot_rel00_ha, na.rm = TRUE), avg_fc_rel00_ha_ci_lower = mean(fc_tot_rel00_ha_ci_lower, na.rm = TRUE), avg_fc_rel00_ha_ci_upper = mean(fc_tot_rel00_ha_ci_upper, na.rm = TRUE)) %&gt;% ungroup() ## for each country df_plot_forest_loss_agg_ctry = df_plot_forest_loss %&gt;% group_by(region, iso3, country_en, matched, group, year) %&gt;% summarize(tot_fc_rel00_ha = sum(fc_tot_rel00_ha, na.rm = TRUE), tot_fc_rel00_ha_ci_lower = sum(fc_tot_rel00_ha_ci_lower, na.rm = FALSE), tot_fc_rel00_ha_ci_upper = sum(fc_tot_rel00_ha_ci_upper, na.rm = FALSE), avg_fc_rel00_ha = mean(fc_tot_rel00_ha, na.rm = TRUE), avg_fc_rel00_ha_ci_lower = mean(fc_tot_rel00_ha_ci_lower, na.rm = TRUE), avg_fc_rel00_ha_ci_upper = mean(fc_tot_rel00_ha_ci_upper, na.rm = TRUE)) %&gt;% ungroup() ## for each region df_plot_forest_loss_agg_all = df_plot_forest_loss %&gt;% group_by(region, matched, group, year) %&gt;% summarize(tot_fc_rel00_ha = sum(fc_tot_rel00_ha, na.rm = TRUE), tot_fc_rel00_ha_ci_lower = sum(fc_tot_rel00_ha_ci_lower, na.rm = FALSE), tot_fc_rel00_ha_ci_upper = sum(fc_tot_rel00_ha_ci_upper, na.rm = FALSE), avg_fc_rel00_ha = mean(fc_tot_rel00_ha, na.rm = TRUE), avg_fc_rel00_ha_ci_lower = mean(fc_tot_rel00_ha_ci_lower, na.rm = TRUE), avg_fc_rel00_ha_ci_upper = mean(fc_tot_rel00_ha_ci_upper, na.rm = TRUE)) %&gt;% ungroup() ## For a specific subset of protected areas (here, protected areas funded by the FAPBM for instance) df_plot_forest_loss_agg_fapbm = df_plot_forest_loss %&gt;% filter(wdpaid %in% unique(data_fapbm$wdpaid)) %&gt;% group_by(matched, group, year) %&gt;% summarize(tot_fc_rel00_ha = sum(fc_tot_rel00_ha, na.rm = TRUE), tot_fc_rel00_ha_ci_lower = sum(fc_tot_rel00_ha_ci_lower, na.rm = TRUE), tot_fc_rel00_ha_ci_upper = sum(fc_tot_rel00_ha_ci_upper, na.rm = TRUE), avg_fc_rel00_ha = mean(fc_tot_rel00_ha, na.rm = TRUE), avg_fc_rel00_ha_ci_lower = mean(fc_tot_rel00_ha_ci_lower, na.rm = TRUE), avg_fc_rel00_ha_ci_upper = mean(fc_tot_rel00_ha_ci_upper, na.rm = TRUE)) %&gt;% ungroup() df_plot_forest_loss_agg_nofapbm = df_plot_forest_loss %&gt;% filter(!(wdpaid %in% unique(data_fapbm$wdpaid))) %&gt;% group_by(matched, group, year) %&gt;% summarize(tot_fc_rel00_ha = sum(fc_tot_rel00_ha, na.rm = TRUE), tot_fc_rel00_ha_ci_lower = sum(fc_tot_rel00_ha_ci_lower, na.rm = TRUE), tot_fc_rel00_ha_ci_upper = sum(fc_tot_rel00_ha_ci_upper, na.rm = TRUE), avg_fc_rel00_ha = mean(fc_tot_rel00_ha, na.rm = TRUE), avg_fc_rel00_ha_ci_lower = mean(fc_tot_rel00_ha_ci_lower, na.rm = TRUE), avg_fc_rel00_ha_ci_upper = mean(fc_tot_rel00_ha_ci_upper, na.rm = TRUE)) %&gt;% ungroup() # Plot the results : total and average deforestation ## The maximum year to consider. The period where total deforestation is computed is then 2000-year.max. year.max = 2021 ## Titles to display fct.labs &lt;- c(&quot;Before Matching&quot;, &quot;After Matching&quot;) names(fct.labs) &lt;- c(FALSE, TRUE) ## The number of protected areas (all and in a given subsample, for instance) n_pa = length(unique(df_plot_forest_loss$wdpaid)) fct.labs &lt;- c(&quot;Before Matching&quot;, &quot;After Matching&quot;) names(fct.labs) &lt;- c(FALSE, TRUE) #n_fapbm = length(unique(data_pa_fapbm[data_pa_fapbm$wdpaid %in% unique(df_plot_forest_loss$wdpaid),]$wdpaid)) n_nofapbm = length(unique(data_pa[data_pa$wdpaid %in% unique(df_plot_forest_loss$wdpaid) &amp; !(data_pa$wdpaid %in% unique(data_fapbm$wdpaid)),]$wdpaid)) ## The total surface of protected areas (all and in a given subsample, for instance) area_tot_ha = sum(data_pa[data_pa$wdpaid %in% unique(df_plot_forest_loss$wdpaid),]$area_km2, na.rm = TRUE) *100 #area_fapbm_ha = sum(data_pa_fapbm[data_pa_fapbm$wdpaid %in% unique(df_plot_forest_loss$wdpaid),]$area_km2, na.rm = TRUE) *100 area_nofapbm_ha = sum(data_pa[data_pa$wdpaid %in% unique(df_plot_forest_loss$wdpaid) &amp; !(data_pa$wdpaid %in% unique(data_fapbm$wdpaid)),]$area_km2, na.rm = TRUE) *100 ## Define the figures ### For a given subsample #### Total deforestation fig_forest_loss_agg_tot_fapbm = ggplot(data = filter(df_plot_forest_loss_agg_fapbm, year == year.max), aes(y = abs(tot_fc_rel00_ha), fill = as.factor(group), x = group)) %&gt;% + geom_bar(position = position_dodge(width = 0.8), stat = &quot;identity&quot;, show.legend = FALSE) %&gt;% + geom_errorbar(aes(ymax=abs(tot_fc_rel00_ha_ci_upper), ymin=abs(tot_fc_rel00_ha_ci_lower)), width=0.3, colour=&quot;grey70&quot;, alpha=0.9, size=1) %&gt;% + geom_label(aes(label = format(round(abs(tot_fc_rel00_ha), 0), big.mark = &quot;,&quot;), y = 0), vjust = -0.5, color = &quot;black&quot;, show.legend = FALSE) %&gt;% + scale_fill_brewer(name = &quot;Group&quot;, palette = &quot;Blues&quot;) %&gt;% + labs(x = &quot;&quot;, y = &quot;Forest cover loss (ha)&quot;, title = paste(&quot;Total area deforested between 2000 and&quot;, year.max), subtitle = paste0(&quot;Sample : FAPBM protected areas in the analysis (&quot; , n_fapbm, &quot; areas covering &quot;, format(area_fapbm_ha, big.mark = &quot;,&quot;), &quot;ha)&quot;), caption = paste(((1-alpha)*100), &quot;% confidence intervals&quot;)) %&gt;% + facet_wrap(~matched, labeller = labeller(matched = fct.labs)) %&gt;% + theme_minimal() %&gt;% + theme( axis.text.x = element_text(angle = 0, hjust = 0.5, vjust = 0.5), axis.text=element_text(size=11, color = &quot;black&quot;), axis.title=element_text(size=14, color = &quot;black&quot;, face = &quot;plain&quot;), plot.caption = element_text(hjust = 0), plot.title = element_text(size=16, color = &quot;black&quot;, face = &quot;plain&quot;, hjust = 0), plot.subtitle = element_text(size=12, color = &quot;black&quot;, face = &quot;plain&quot;, hjust = 0), strip.text = element_text(color = &quot;black&quot;, size = 12), #legend.position = &quot;bottom&quot;, #legend.title = element_blank(), legend.text=element_text(size=10), #legend.spacing.x = unit(1.0, &#39;cm&#39;), legend.spacing.y = unit(0.75, &#39;cm&#39;), legend.key.size = unit(2, &#39;line&#39;), panel.grid.major.x = element_line(color = &#39;grey80&#39;, linewidth = 0.3, linetype = 1), panel.grid.minor.x = element_line(color = &#39;grey80&#39;, linewidth = 0.2, linetype = 2), panel.grid.major.y = element_line(color = &#39;grey80&#39;, linewidth = 0.3, linetype = 1), panel.grid.minor.y = element_line(color = &#39;grey80&#39;, linewidth = 0.2, linetype = 2) ) fig_forest_loss_agg_tot_fapbm #### Average deforestation fig_forest_loss_agg_avg_nofapbm = ggplot(data = filter(df_plot_forest_loss_agg_nofapbm, year == year.max), aes(y = abs(avg_fc_rel00_ha), fill = as.factor(group), x = group)) %&gt;% + geom_bar(position = position_dodge(width = 0.8), stat = &quot;identity&quot;, show.legend = FALSE) %&gt;% + geom_errorbar(aes(ymax=abs(avg_fc_rel00_ha_ci_upper), ymin=abs(avg_fc_rel00_ha_ci_lower)), width=0.3, colour=&quot;grey70&quot;, alpha=0.9, size=1) %&gt;% + geom_label(aes(label = format(round(abs(avg_fc_rel00_ha), 0), big.mark = &quot;,&quot;), y = 0), vjust = -0.5, color = &quot;black&quot;, show.legend = FALSE) %&gt;% + scale_fill_brewer(name = &quot;Group&quot;, palette = &quot;Blues&quot;) %&gt;% + labs(x = &quot;&quot;, y = &quot;Forest cover loss (ha)&quot;, title = paste(&quot;Area deforested in protected areas on average, between 2000 and&quot;, year.max), subtitle = paste0(&quot;Sample : non FAPBM protected areas in the analysis (&quot; , n_nofapbm, &quot; areas covering &quot;, format(area_nofapbm_ha, big.mark = &quot;,&quot;), &quot; ha)&quot;), caption = paste(((1-alpha)*100), &quot;% confidence intervals&quot;)) %&gt;% + facet_wrap(~matched, labeller = labeller(matched = fct.labs)) %&gt;% + theme_minimal() %&gt;% + theme( axis.text.x = element_text(angle = 0, hjust = 0.5, vjust = 0.5), axis.text=element_text(size=11, color = &quot;black&quot;), axis.title=element_text(size=14, color = &quot;black&quot;, face = &quot;plain&quot;), plot.caption = element_text(hjust = 0), plot.title = element_text(size=16, color = &quot;black&quot;, face = &quot;plain&quot;, hjust = 0), plot.subtitle = element_text(size=12, color = &quot;black&quot;, face = &quot;plain&quot;, hjust = 0), strip.text = element_text(color = &quot;black&quot;, size = 12), #legend.position = &quot;bottom&quot;, #legend.title = element_blank(), legend.text=element_text(size=10), #legend.spacing.x = unit(1.0, &#39;cm&#39;), legend.spacing.y = unit(0.75, &#39;cm&#39;), legend.key.size = unit(2, &#39;line&#39;), panel.grid.major.x = element_line(color = &#39;grey80&#39;, linewidth = 0.3, linetype = 1), panel.grid.minor.x = element_line(color = &#39;grey80&#39;, linewidth = 0.2, linetype = 2), panel.grid.major.y = element_line(color = &#39;grey80&#39;, linewidth = 0.3, linetype = 1), panel.grid.minor.y = element_line(color = &#39;grey80&#39;, linewidth = 0.2, linetype = 2) ) fig_forest_loss_agg_avg_nofapbm Eventually the plots are saved in the remote storage. ##Saving plots tmp = paste(tempdir(), &quot;fig&quot;, sep = &quot;/&quot;) ggsave(paste(tmp, &quot;fig_forest_loss_agg_tot_fapbm.png&quot;, sep = &quot;/&quot;), plot = fig_forest_loss_agg_tot_fapbm, device = &quot;png&quot;, height = 6, width = 9) ggsave(paste(tmp, &quot;fig_forest_loss_agg_avg_nofapbm.png&quot;, sep = &quot;/&quot;), plot = fig_forest_loss_agg_avg_nofapbm, device = &quot;png&quot;, height = 6, width = 9) files &lt;- list.files(tmp, full.names = TRUE) ##Add each file in the bucket (same foler for every file in the temp) for(f in files) { cat(&quot;Uploading file&quot;, paste0(&quot;&#39;&quot;, f, &quot;&#39;&quot;), &quot;\\n&quot;) aws.s3::put_object(file = f, bucket = paste(&quot;projet-afd-eva-ap&quot;, save_dir, sep = &quot;/&quot;), region = &quot;&quot;, show_progress = TRUE) } do.call(file.remove, list(list.files(tmp, full.names = TRUE))) 5.5 Display treatment effects in figures and tables The treatment effects computed for each protected areas can be displayed in figures or tables. Again, a function is used for protected areas supported by the AFD to include information on funding (funding year for instance), and an other for non-supported ones. Note some protected areas can be removed from the display, because the matching is not satisfying or pre-treatment trends are too different between treated and control units (thus the matched control risk to be an irrelevant counterfactual). Also, one might want to highlight some protected areas. For instance when comparing a subset of protected areas in a given country to the others (protected areas in Madagascar supported by the AFD versus the others for instance). # Define a list of protected areas that will not be displayed list_wdpa_bad = c(352240, #matching 352240, #matching 555542728, #pre-treatment parallel trend 555548846 #no confidence intervals ) # Define a list of protected areas where a focus is needed list_wdpa_focus = unique(data_fapbm$wdpaid) # Get rid of some protected areas in the dataset used to plotting figures and tables df_fc_att_tidy = df_fc_att %&gt;% filter(!wdpaid %in% list_wdpa_bad) df_fl_att_tidy = df_fl_att %&gt;% filter(!wdpaid %in% list_wdpa_bad) # A function to create figures and tables ##For AFD supported protected areas (funding info) # fn_plot_att_afd(df_fc_att = df_fc_att_tidy, # df_fl_att = df_fl_att_tidy, # alpha = alpha, # save_dir = save_dir) ##For other protected areas (no funding info) fn_plot_att_general(df_fc_att = df_fc_att_tidy, df_fl_att = df_fl_att_tidy, list_focus = list_wdpa_focus, alpha = alpha, save_dir = save_dir) 5.6 "],["references.html", "References", " References "],["functions-for-matching-pre--and-post-processing.html", "A Functions for matching pre- and post-processing", " A Functions for matching pre- and post-processing ##### #Functions for matching process ##### #For each function, the aim of the function, inputs, outputs, data saved and notes are detailed. This takes the following form : #Aim of the function ##INPUTS : the arguments needed in the function ###INPUT 1 to N ##OUTPUTS : the information returned by the function (data frames, numeric, characters, etc.) and necessary to pursue to processing ### OUTPUT 1 to N ##DATA SAVED : information put in the storage but not necessarily need to pursue the processing (figures, tables, data frames, etc.) ### ... ##NOTES : any useful remark ### ... #Remarks : ##most functions are adapted for errors handling using base::withCallingHandlers(). Basically, the computation steps are declared in a block of withCallingHandlers function, while two other blocks specify what to do in case the first block face a warning or error. In our case, errors led to return a boolean indicating an error has occured and append the log with the error message. Warnings return a boolean but do not block the iteration. They also edit the log with the warning message. ##PA is used for &quot;protected area(s)&quot;. ##To save plots and tables : save on temporary folder in the R session then put the saved object in the storage. Indeed print() and ggplot::ggsave() cannot write directly on s3 storage ### #Pre-processing ### #Create a log to track progress of the processing (warnings, errors, parameters, country and PAs analyzed, etc.) ##INPUTS : ###list_iso : the list of ISO3 code corresponding to the countries analyzed ### buffer : the buffer width in meter ### sampling : the sampling specified by the user for the smaller area in the country considered ### yr_first : the first year of the period where the analysis takes place ### yr_last : the last year of the period where the analysis takes place ### yr_min : the minimum treatment year to be considered in the analysis. As some matching covariates are defined with pre-treatment data (e.g average tree cover loss before treatment), this minimal year is greater than yr_first ### name : specify the name of the log file to save ### notes : any notes on the analysis performed ##OUTPUTS : ###log : a text file in the R session memory that will be edited through the data processing fn_pre_log = function(list_iso, buffer, sampling, yr_first, yr_last, yr_min, name, notes) { str_iso = paste(list_iso, collapse = &quot;, &quot;) log = paste(tempdir(), name, sep = &quot;/&quot;) file.create(log) #Do not forget to end the writing with a \\n to avoid warnings #cat(paste(&quot;#####\\nCOUNTRY :&quot;, iso, &quot;\\nTIME :&quot;, print(Sys.time(), tz = &quot;UTC-2&quot;), &quot;\\n#####\\n\\n###\\nPRE-PROCESSING\\n###\\n\\n&quot;), file = log, append = TRUE) cat(paste(&quot;STARTING TIME :&quot;, print(Sys.time(), tz = &quot;UTC-2&quot;), &quot;\\nPARAMETERS : buffer =&quot;, buffer, &quot;m, sampling size of&quot;, sampling, &quot;, period of analysis&quot;, yr_first, &quot;to&quot;, yr_last, &quot;, minimum treatment year is&quot;, yr_min, &quot;\\nCOUNTRIES :&quot;, str_iso, &quot;\\nNOTES :&quot;, notes, &quot;\\n\\n##########\\nPRE-PROCESSING\\n##########\\n\\n&quot;), file = log, append = TRUE) return(log) } #Find the UTM code for a given set of coordinates ##INPUTS : ### lonlat : coordinates ##OUTPUTS : ### UTM code fn_lonlat2UTM = function(lonlat) { utm = (floor((lonlat[1] + 180) / 6) %% 60) + 1 if (lonlat[2] &gt; 0) { utm + 32600 } else{ utm + 32700 } } #Create the gridding of a given country. ##INPUTS : ### iso : ISO code ### yr_min : the minimum treatment year to be considered in the analysis. As some matching covariates are defined with pre-treatment data (e.g average tree cover loss before treatment), this minimal year is greater than the first year in the period considered ### path_tmp : temporary path for saving figures ### data_pa : dataset with information on protected areas, and especially their surfaces ### sampling : Number of pixels that subdivide the protected area with lowest area in the country considered ### log : a log file to track progress of the processing ### save_dir : saving directory ##OUTPUTS (depending on potential errors) ### gadm_prj : country shapefile ### grid : gridding of the country ### utm_code : UTM code of the country ### gridSize : the resolution of gridding, defined from the area of the PA with the lowest area ### is_ok : a boolean indicating whether or not an error occured inside the function ##DATA SAVED : ### Gridding of the country considered fn_pre_grid = function(iso, yr_min, path_tmp, data_pa, sampling, log, save_dir) { output = withCallingHandlers( { # Download country polygon gadm = gadm(country = iso, resolution = 1, level = 0, path = path_tmp) %&gt;% st_as_sf() %&gt;% st_make_valid() #Necessary for some polygons : e.g BEN # Find UTM zone of the country centroid centroid = st_coordinates(st_centroid(gadm)) utm_code = fn_lonlat2UTM(centroid) # Reproject GADM gadm_prj = gadm %&gt;% st_transform(crs = utm_code) #Determine relevant grid size ##Select the PA in the country with minimum area. PAs with null areas, marine or treatment year before 2000 are discarded (not analyzed anyway) pa_min = data_pa %&gt;% filter(iso3 == iso &amp; is.na(wdpaid) == FALSE &amp; status_yr &gt;= yr_min &amp; marine %in% c(0,1)) %&gt;% arrange(area_km2) %&gt;% slice(1) ##From this minimum area, define the grid size. ##It depends on the sampling of the minimal area, i.e how many pixels we want to subdivide the PA with lowest area ## To avoid a resolution higher than the one of our data, grid size is set to be 30m at least (resolution of tree cover data, Hansen et al. 2013) area_min = pa_min$area_km2 #in kilometer gridSize = max(1e3, round(sqrt(area_min/sampling)*1000, 0)) #Side of the pixel is expressed in meter and rounded, if above 1km. # Make bounding box of projected country polygon bbox = st_bbox(gadm_prj) %&gt;% st_as_sfc() %&gt;% st_as_sf() # Make a Grid to the extent of the bounding box grid.ini = st_make_grid(bbox, cellsize = c(gridSize,gridSize)) # Crop Grid to the extent of country boundary by # subsetting to the grid cells that intersect with the country grid.sub = grid.ini %&gt;% st_intersects(gadm_prj, .) %&gt;% unlist() # Filter the grid to the subset grid = grid.ini[sort(grid.sub)] %&gt;% st_as_sf() %&gt;% mutate(gridID = seq(1:nrow(.))) # Add id for grid cells #Extract country name country.name = data_pa %&gt;% filter(iso3 == iso) %&gt;% slice(1) country.name = country.name$country_en #Visualize and save the grid fig_grid = ggplot() + geom_sf(data = st_geometry(bbox)) + geom_sf(data = st_geometry(gadm_prj)) + geom_sf(data = st_geometry(grid), alpha = 0) + labs(title = paste(&quot;Gridding of&quot;, country.name)) fig_save = paste0(path_tmp, &quot;/fig_grid_&quot;, iso, &quot;.png&quot;) ggsave(fig_save, plot = fig_grid, device = &quot;png&quot;, height = 6, width = 9) aws.s3::put_object(file = fig_save, bucket = paste(&quot;projet-afd-eva-ap&quot;, save_dir, iso, sep = &quot;/&quot;), region = &quot;&quot;, show_progress = FALSE) #Append the log cat(&quot;#Generating observation units\\n-&gt; OK\\n&quot;, file = log, append = TRUE) #Return outputs list_output = list(&quot;ctry_shp_prj&quot; = gadm_prj, &quot;grid&quot; = grid, &quot;gridSize&quot; = gridSize, &quot;utm_code&quot; = utm_code, &quot;is_ok&quot; = TRUE) return(list_output) }, error = function(e) { #Print the error and append the log print(e) #Append the log cat(paste(&quot;#Generating observation units\\n-&gt; Error :\\n&quot;, e, &quot;\\n&quot;), file = log, append = TRUE) #Return string to inform user to skip return(list(&quot;is_ok&quot; = FALSE)) }, warning = function(w) { #Print the warning and append the log print(w) #Append the log cat(paste(&quot;#Generating observation units\\n-&gt; Warning :\\n&quot;, w, &quot;\\n&quot;), file = log, append = TRUE) #Return string to inform user to skip return(list(&quot;is_ok&quot; = TRUE)) } ) return(output) } #Assign each pixel (observation unit) to a group : PA non-funded, funded and analyzed, funded and not analyzed, buffer, potential control. ##INPUTS : ### iso : country ISO code ### path_tmp : temporary path to save figures ### utm_code : UTM of the country centroid ### buffer_m : buffer width, in meter ### data : a dataframe with the WDPAID of PAs funded by the AFD ### gadm_prj : country polygon, projected so that crs = UTM code ### grid : gridding of the country ### gridSize : resolution of the gridding ##OUTPUTS (depending on potential errors): ### grid.param : a raster representing the gridding of the country with two layers. One for the group each pixel belongs to (funded PA, non-funded PA, potential control, buffer), the other for the WDPAID corresponding to each pixel (0 if not a PA) ### is_ok : a boolean indicating whether or not an error occured inside the function ##DATA SAVED : ### grid.param ### A plot of the country gridding with group of each pixel ### The share of PAs in the portfolio considered that are reported in the WDPA ### In the country considered, the share of PAs in the portfolio and analyzed, not analyzed or not in the portfolio ### Share of PAs reported in the WDPA and analyzed in the country considered ##NOTES : ### Errors can arise from the wdpa_clean() function, during &quot;formatting attribute data&quot; step. Can be settled playing with geometry_precision parameter fn_pre_group = function(iso, wdpa_raw, status, yr_min, path_tmp, utm_code, buffer_m, data_pa, gadm_prj, grid, gridSize, log, save_dir) { output = withCallingHandlers( { # The polygons of PAs are taken from WDPA, cleaned wdpa_prj = wdpa_raw %&gt;% filter(ISO3 == iso) %&gt;% #st_make_valid() %&gt;% #celanign of PAs from the wdap_clean function : #Status filtering is performed manually juste after. #The geometry precision is set to default. Used to be 1000 in Kemmeng code # Overlaps are not erased because we rasterize polygons #UNESCO Biosphere Reserves are not excluded so that our analysis of AFD portfolio is the most extensive wdpa_clean(retain_status = status, #NULL to remove proposed erase_overlaps = FALSE, exclude_unesco = FALSE, verbose = TRUE) %&gt;% # Remove the PAs that are only proposed, or have geometry type &quot;point&quot; #filter(STATUS != &quot;Proposed&quot;) %&gt;% #24/08/2023 : &quot;Proposed&quot; status concerns only 6 PAs in the sample, including one implemented after 2000. filter(GEOMETRY_TYPE != &quot;POINT&quot;) %&gt;% # Project PA polygons to the previously determined UTM zone st_transform(crs = utm_code) # Make Buffers around all protected areas buffer = st_buffer(wdpa_prj, dist = buffer_m) %&gt;% # Assign an ID &quot;5&quot; to the buffer group mutate(group=5, group_name = &quot;Buffer&quot;) # Separate funded and non-funded protected areas ##PAs funded by AFD ###... which can bu used in impact evaluation : in the country of interest, wdpaid known, area above 1km² (Wolf et al. 2021), implemented after yr_min defined by the user, non-marine (terrestrial or coastal, Wolf et al. 2021) pa_afd_ie = data_pa %&gt;% filter(iso3 == iso &amp; is.na(wdpaid) == FALSE &amp; area_km2 &gt; 1 &amp; status_yr &gt;= yr_min &amp; marine %in% c(0,1)) wdpaID_afd_ie = pa_afd_ie[pa_afd_ie$iso3 == iso,]$wdpaid wdpa_afd_ie = wdpa_prj %&gt;% filter(WDPAID %in% wdpaID_afd_ie) %&gt;% mutate(group=2, group_name = &quot;Funded PA, analyzed&quot;) # Assign an ID &quot;2&quot; to the funded PA group ###...which cannot pa_afd_no_ie = data_pa %&gt;% filter(iso3 == iso &amp; (is.na(wdpaid) == TRUE | area_km2 &lt;= 1 | is.na(area_km2) | status_yr &lt; yr_min | marine == 2)) #PAs not in WDPA, of area less than 1km2 (Wolf et al 2020), not terrestrial/coastal or implemented after yr_min are not analyzed wdpaID_afd_no_ie = pa_afd_no_ie[pa_afd_no_ie$iso3 == iso,]$wdpaid wdpa_afd_no_ie = wdpa_prj %&gt;% filter(WDPAID %in% wdpaID_afd_no_ie) %&gt;% mutate(group=3, group_name = &quot;Funded PA, not analyzed&quot;) # Assign an ID &quot;3&quot; to the funded PA group which cannot be stuided in the impact evaluation ##PAs not funded by AFD wdpa_no_afd = wdpa_prj %&gt;% filter(!WDPAID %in% c(wdpaID_afd_ie, wdpaID_afd_no_ie)) %&gt;% mutate(group=4, group_name = &quot;Non-funded PA&quot;) # Assign an ID &quot;4&quot; to the non-funded PA group wdpaID_no_afd = wdpa_no_afd$WDPAID # Merge the dataframes of funded PAs, non-funded PAs and buffers # CAREFUL : the order of the arguments does matter. ## During rasterization, in case a cell of the raster is on both funded analysed and non-funded, we want to cell to take the WDPAID of the funded analysed. ## Same funded, not analyzed. As the first layer is taken, wdpa_afd_ie needs to be first ! wdpa_groups = rbind(wdpa_afd_ie, wdpa_afd_no_ie, wdpa_no_afd, buffer) # Subset to polygons that intersect with country boundary wdpa.sub = wdpa_groups %&gt;% st_intersects(gadm_prj, .) %&gt;% unlist() # Filter the PA+buffer to the subset wdpa_groups = wdpa_groups[sort(wdpa.sub),] %&gt;% st_as_sf() # Initialize an empty raster to the spatial extent of the country r.ini = raster() extent(r.ini) = extent(gadm_prj) # Specify the raster resolution as same as the pre-defined &#39;gridSize&#39; res(r.ini) = gridSize # Assign the raster pixels with &quot;Group&quot; values, # Take the minimal value if a pixel is covered by overlapped polygons, so that PA Group ID has higher priority than Buffer ID. # Assign value &quot;0&quot; to the background pixels (control candidates group) # fun = &quot;min&quot; can lead to bad group assignment. This issue is developed and tackled below r.group = rasterize(wdpa_groups, r.ini, field=&quot;group&quot;, fun=&quot;min&quot;, background=0) %&gt;% mask(., gadm_prj) # Rename Layer names(r.group) = &quot;group&quot; # Rasterize wdpaid ## CAREFUL : as stated above, the wdpa_groups raster is ordered so that the first layer is the one of funded, analyzed PA. Thus one needs to have fun = &quot;first&quot; r.wdpaid = rasterize(wdpa_groups, r.ini, field=&quot;WDPAID&quot;, fun=&quot;first&quot;, background=0) %&gt;% mask(., gadm_prj) names(r.wdpaid) = &quot;wdpaid&quot; # Aggregate pixel values by taking the majority grid.group.ini = exact_extract(x=r.group, y=grid, fun=&#39;mode&#39;, append_cols=&quot;gridID&quot;) %&gt;% rename(group = mode) grid.wdpaid = exact_extract(x=r.wdpaid, y=grid, fun=&quot;mode&quot;, append_cols=&quot;gridID&quot;) %&gt;% rename(wdpaid = mode) # Randomly select background pixels as potential control pixels ##Take the list of background pixels, the number of background and treatment pixels list_back_ID = grid.group.ini[grid.group.ini$group == 0 &amp; is.na(grid.group.ini$group) == FALSE,]$gridID n_back_ID = length(list_back_ID) n_treat = length(grid.group.ini[grid.group.ini$group == 2 &amp; is.na(grid.group.ini$group) == FALSE,]$gridID) ##The number of potential control units is five times the number of treatment units n_control = min(n_back_ID, n_treat*5) ##Select randomly the list of background pixels selected as controls ### Note that we control for the case n_back_ID = 1, which causes weird behavior using sample() set.seed(0) #To ensure reproductibility of the random sampling if(n_back_ID &lt;= 1) list_control_ID = list_back_ID else list_control_ID = sample(x = list_back_ID, size = n_control, replace = FALSE) ## Finally, assign the background pixel chosen to the control group, characterized by group = 1 grid.group = grid.group.ini %&gt;% mutate(group = case_when(gridID %in% list_control_ID ~ 1, TRUE ~ group)) # Merge data frames grid.param.ini = grid.group %&gt;% merge(., grid.wdpaid, by=&quot;gridID&quot;) %&gt;% merge(., grid, by=&quot;gridID&quot;) %&gt;% # drop rows having &quot;NA&quot; in column &quot;group&quot; drop_na(group) %&gt;% st_as_sf() %&gt;% # Grid is projected to WGS84 because mapme.biodiverty package merely works with this CRS st_transform(crs=4326) %&gt;% #Add treatment year variable left_join(dplyr::select(data_pa, c(region_afd, region, sub_region, country_en, iso3, wdpaid, status_yr, year_funding_first, year_funding_all)), by = &quot;wdpaid&quot;) # If two PAs in different groups overlap, then the rasterization with fun = &quot;min&quot; (as in r.group definition) can lead to bad assignment of pixels. # For instance, if a PA non-funded (group = 4) overlaps with a funded, analyzed one (group = 2), then the pixel will be assigned to the group 2 # Same for group 3 (funded, not analyzed). Then, the following correction is applied. # Finally, each group is given a name for later plotting # grid.param = grid.param.ini %&gt;% # mutate(group = case_when(wdpaid %in% wdpaID_no_afd &amp; group == 2 ~ 4, # wdpaid %in% wdpaID_afd_no_ie &amp; group == 2 ~3, # TRUE ~ group)) %&gt;% #/!\\ For the moment, a pixel both non-funded and funded is considered funded ! #But if funded not analyzed AND funded analyzed, then funded not analyzed. #Idea : the pixel could be treated out of the period considered, so not comparable to toher treatment pixels considered in funded, analyzed. # -&gt; Check with Léa, Ingrid and PY if that seems OK grid.param = grid.param.ini %&gt;% mutate(group = case_when(wdpaid %in% wdpaID_afd_no_ie &amp; group == 2 ~ 3, TRUE ~ group)) %&gt;% #Add name for the group mutate(group_name = case_when(group == 0 ~ &quot;Background&quot;, group == 1 ~ &quot;Potential control&quot;, group == 2 ~ &quot;Funded PA, analyzed (potential treatment)&quot;, group == 3 ~ &quot;Funded PA, not analyzed&quot;, group == 4 ~ &quot;Non-funded PA&quot;, group == 5 ~ &quot;Buffer&quot;)) %&gt;% #Add spatial resolution in m : useful to compute share of forest area in a given pixel and extrapolate to the PA for instance mutate(res_m = gridSize) #Save the grid s3write_using(grid.param, sf::write_sf, overwrite = TRUE, object = paste0(save_dir, &quot;/&quot;, iso, &quot;/&quot;, paste0(&quot;grid_param_&quot;, iso, &quot;.gpkg&quot;)), bucket = &quot;projet-afd-eva-ap&quot;, opts = list(&quot;region&quot; = &quot;&quot;)) # Visualize and save grouped grid cells ## Extract country name country.name = grid.param %&gt;% filter(group == 2) %&gt;% slice(1) country.name = country.name$country_en fig_grid_group = ggplot(grid.param) + geom_sf(aes(fill = as.factor(group_name)), color = NA) + labs(title = paste(&quot;Gridding of&quot;, country.name)) + scale_fill_brewer(name = &quot;Group&quot;, type = &quot;qual&quot;, palette = &quot;YlGnBu&quot;, direction = -1) + # scale_color_viridis_d( # # legend title # name=&quot;Group&quot;, # # legend label # labels=c(&quot;control candidate&quot;, &quot;treatment candidate&quot;, &quot;non-funded PA&quot;, &quot;buffer zone&quot;)) + theme_bw() fig_save = paste0(path_tmp, &quot;/fig_grid_group_&quot;, iso, &quot;.png&quot;) ggsave(fig_save, plot = fig_grid_group, device = &quot;png&quot;, height = 6, width = 9) aws.s3::put_object(file = fig_save, bucket = paste(&quot;projet-afd-eva-ap&quot;, save_dir, iso, sep = &quot;/&quot;), region = &quot;&quot;, show_progress = FALSE) # Pie plots df_pie_wdpa = data_pa %&gt;% filter(iso3 == iso) %&gt;% dplyr::select(c(iso3, wdpaid, name_pa, status_yr, area_km2)) %&gt;% mutate(group_wdpa = case_when(is.na(wdpaid) == FALSE ~ &quot;WDPA&quot;, is.na(wdpaid) == TRUE ~ &quot;Not WDPA&quot;)) %&gt;% group_by(iso3, group_wdpa) %&gt;% summarise(n = n()) %&gt;% ungroup() %&gt;% mutate(n_tot = sum(n), freq = round(n/n_tot*100, 1)) df_pie_ie = wdpa_prj %&gt;% st_drop_geometry() %&gt;% dplyr::select(c(ISO3, WDPAID)) %&gt;% mutate(group_ie = case_when(!WDPAID %in% c(wdpaID_afd_ie, wdpaID_afd_no_ie) ~ &quot;Non-funded&quot;, WDPAID %in% wdpaID_afd_ie ~ &quot;Funded, analyzed&quot;, WDPAID %in% wdpaID_afd_no_ie ~ &quot;Funded, not analyzed&quot;)) %&gt;% group_by(ISO3, group_ie) %&gt;% summarise(n = n()) %&gt;% ungroup() %&gt;% mutate(n_tot = sum(n), freq = round(n/n_tot*100, 1)) ## PAs funded : reported in the WDPAID or not pie_wdpa = ggplot(df_pie_wdpa, aes(x=&quot;&quot;, y= freq, fill = group_wdpa)) %&gt;% + geom_bar(width = 0.5, stat = &quot;identity&quot;, color=&quot;white&quot;) %&gt;% + coord_polar(&quot;y&quot;, start=0) %&gt;% + geom_label_repel(aes(x=1.1, label = paste0(round(freq, 1), &quot;% (&quot;, n, &quot;)&quot;)), color = &quot;black&quot;, position = position_stack(vjust = 0.55), size=4, show.legend = FALSE) %&gt;% # + geom_label(aes(x=1.4, label = paste0(freq_iucn, &quot;%&quot;)), # color = &quot;white&quot;, # position = position_stack(vjust = 0.7), size=2.5, # show.legend = FALSE) %&gt;% + labs(x = &quot;&quot;, y = &quot;&quot;, title = &quot;Share of PAs funded and reported in the WDPA&quot;, subtitle = paste(&quot;Sample :&quot;, sum(df_pie_wdpa$n), &quot;funded protected areas in&quot;, country.name)) %&gt;% + scale_fill_brewer(name = &quot;&quot;, palette = &quot;Greens&quot;) %&gt;% + theme_void() ## PAs in the WDPA : analyzed or not pie_ie = ggplot(df_pie_ie, aes(x=&quot;&quot;, y= freq, fill = group_ie)) %&gt;% + geom_bar(width = 0.5, stat = &quot;identity&quot;, color=&quot;white&quot;) %&gt;% + coord_polar(&quot;y&quot;, start=0) %&gt;% + geom_label_repel(aes(x=1.1, label = paste0(round(freq, 1), &quot;% (&quot;, n, &quot;)&quot;)), color = &quot;black&quot;, position = position_stack(vjust = 0.55), size=4, show.legend = FALSE) %&gt;% # + geom_label(aes(x=1.4, label = paste0(freq_iucn, &quot;%&quot;)), # color = &quot;white&quot;, # position = position_stack(vjust = 0.7), size=2.5, # show.legend = FALSE) %&gt;% + labs(x = &quot;&quot;, y = &quot;&quot;, title = &quot;Share of PAs reported in the WDPA and analyzed&quot;, subtitle = paste(&quot;Sample :&quot;, sum(df_pie_ie$n), &quot;funded protected areas in&quot;, country.name)) %&gt;% + scale_fill_brewer(name = &quot;&quot;, palette = &quot;Greens&quot;) %&gt;% + theme_void() ##Saving plots tmp = paste(tempdir(), &quot;fig&quot;, sep = &quot;/&quot;) ggsave(paste(tmp, paste0(&quot;pie_funded_wdpa_&quot;, iso, &quot;.png&quot;), sep = &quot;/&quot;), plot = pie_wdpa, device = &quot;png&quot;, height = 6, width = 9) ggsave(paste(tmp, paste0(&quot;pie_wdpa_ie_&quot;, iso, &quot;.png&quot;), sep = &quot;/&quot;), plot = pie_ie, device = &quot;png&quot;, height = 6, width = 9) files &lt;- list.files(tmp, full.names = TRUE) ##Add each file in the bucket (same foler for every file in the temp) for(f in files) { cat(&quot;Uploading file&quot;, paste0(&quot;&#39;&quot;, f, &quot;&#39;&quot;), &quot;\\n&quot;) aws.s3::put_object(file = f, bucket = paste(&quot;projet-afd-eva-ap&quot;, save_dir, iso, sep = &quot;/&quot;), region = &quot;&quot;, show_progress = TRUE) } do.call(file.remove, list(list.files(tmp, full.names = TRUE))) #Append the log cat(&quot;#Determining Group IDs and WDPA IDs\\n-&gt; OK\\n&quot;, file = log, append = TRUE) #Return the output list_output = list(&quot;grid.param&quot; = grid.param, &quot;is_ok&quot; = TRUE) return(list_output) }, error = function(e) { #Print the error and append the log print(e) #Append the log cat(paste(&quot;#Determining Group IDs and WDPA IDs\\n-&gt; Error :\\n&quot;, e, &quot;\\n&quot;), file = log, append = TRUE) #Return string to inform user to skip return(list(&quot;is_ok&quot; = FALSE)) }, warning = function(w) { #Print the warning and append the log print(w) #Append the log cat(paste(&quot;#Determining Group IDs and WDPA IDs\\n-&gt; Warning :\\n&quot;, w, &quot;\\n&quot;), file = log, append = TRUE) #Return string to inform user to skip return(list(&quot;is_ok&quot; = TRUE)) } ) #Return outputs return(output) } #Building a matching dataframe for the country considered : for each pixel in treated and control groups, the data needed for the analysis are downloaded and the indicators computed. Eventually a dataset is obtained that is ready to enter a matching algorithm ##INPUTS : ### grid.param : a raster representing the gridding of the country with two layers. One for the group each pixel belongs to (funded PA, non-funded PA, potential control, buffer), the other for the WDPAID corresponding to each pixel (0 if not a PA) ### path_tmp : a temporary folder to store figures ### iso : ISO code of the country of interest ### name_output : the name of the matching frame to save ### ext_output : the file extension of the matching to save ### yr_first : the first year of the period where the analysis takes place ### yr_last : the last year of the period where the analysis takes place ### log : a log file to track progress of the processing ### save_dir : saving directory ##OUTPUTS : ### is_ok : a boolean indicating whether or not an error occured inside the function ##DATA SAVED ### pivot.all : a dataframe with variables of interest (outcome, matching covariates) for all treated and potential control pixels fn_pre_mf_parallel = function(grid.param, path_tmp, iso, name_output, ext_output, yr_first, yr_last, log, save_dir) { output = tryCatch( { tic = tic() print(&quot;----Initialize portfolio&quot;) # Take only potential control (group = 1) and treatment (group = 2) in the country gridding to lower the number of computations to perform grid.aoi = grid.param %&gt;% filter(group %in% c(1,2)) # Create a mapme.biodiversity portfolio for the area of interest (aoi). This specifies the period considered and the geospatial units where data are downloaded and indicators computed (here, the treated and control pixels in the country gridding) aoi = init_portfolio(grid.aoi, years = yr_first:yr_last, outdir = path_tmp, add_resources = FALSE) #Extract a dataframe with pixels ID in the grid and the portfolio : useful for latter plotting of matched control and treated units. df_gridID_assetID = aoi %&gt;% st_drop_geometry() %&gt;% as.data.frame() %&gt;% dplyr::select(c(gridID, assetid)) s3write_using(df_gridID_assetID, data.table::fwrite, object = paste0(save_dir, &quot;/&quot;, iso, &quot;/&quot;, &quot;df_gridID_assetID_&quot;, iso, &quot;.csv&quot;), bucket = &quot;projet-afd-eva-ap&quot;, opts = list(&quot;region&quot; = &quot;&quot;)) print(&quot;----Download data&quot;) # Download Data ## Version of Global Forest Cover data to consider list_version_gfc = mapme.biodiversity:::.available_gfw_versions() #all versions available version_gfc = list_version_gfc[length(list_version_gfc)] #last version considered ## Soil characteristics dl.soil = get_resources(aoi, resources = c(&quot;soilgrids&quot;), layers = c(&quot;clay&quot;), # resource specific argument depths = c(&quot;0-5cm&quot;), # resource specific argument stats = c(&quot;mean&quot;)) ## Accessibility dl.travelT = get_resources(aoi, resources = &quot;nelson_et_al&quot;, range_traveltime = c(&quot;5k_110mio&quot;)) ## Tree cover evolution on the period dl.tree = get_resources(aoi, resources = c(&quot;gfw_treecover&quot;, &quot;gfw_lossyear&quot;), vers_treecover = version_gfc, vers_lossyear = version_gfc) ## Elevation dl.elevation = get_resources(aoi, &quot;nasa_srtm&quot;) ## Terrain Ruggedness Index dl.tri = get_resources(aoi, &quot;nasa_srtm&quot;) print(&quot;----Compute indicators&quot;) #Compute indicators #Begin multisession : use of parallel computing (computations performed in separate R sessions in background) to speed up the computations of indicators # gc : optimize memory management for the background sessions. # Multisession with workers = 6 as in mapme.biodiversity tutorial : https://mapme-initiative.github.io/mapme.biodiversity/articles/quickstart.html?q=parall#enabling-parallel-computing # Careful to the format of command to call parallel computations here : VALUE TO COMPUTE %&lt;-% {EXPRESSION}. plan(multisession, workers = 6, gc = TRUE) with_progress({ get.soil %&lt;-% {calc_indicators(dl.soil, indicators = &quot;soilproperties&quot;, stats_soil = c(&quot;mean&quot;), engine = &quot;exactextract&quot;)} # the &quot;exactextract&quot; engine is chosen as it is the faster one for large rasters (https://tmieno2.github.io/R-as-GIS-for-Economists/extraction-speed-comparison.html) get.travelT %&lt;-% {calc_indicators(dl.travelT, indicators = &quot;traveltime&quot;, stats_accessibility = c(&quot;mean&quot;), #Note KfW use &quot;median&quot; here, but for no specific reason a priori (mail to Kemmeng Liu, 28/09/2023). Mean is chosen coherently with the other covariates, though we could test in a second time whether this changes anything to the results. engine = &quot;exactextract&quot;)} get.tree %&lt;-% {calc_indicators(dl.tree, indicators = &quot;treecover_area&quot;, min_size=0.5, # FAO definition of forest : Minimum treecover = 10%, minimum size =0.5 hectare (FAO 2020 Global Fores Resources Assessment, https://www.fao.org/3/I8661EN/i8661en.pdf) min_cover=10)} get.elevation %&lt;-% {calc_indicators(dl.elevation, indicators = &quot;elevation&quot;, stats_elevation = c(&quot;mean&quot;), engine = &quot;exactextract&quot;)} get.tri %&lt;-% {calc_indicators(dl.tri, indicators = &quot;tri&quot;, stats_tri = c(&quot;mean&quot;), engine = &quot;exactextract&quot;)} }) print(&quot;----Build indicators&#39; datasets&quot;) #Build indicators&#39; datasets ## Transform the output dataframe into a -ore convenient format data.soil = unnest(get.soil, soilproperties) %&gt;% #mutate(across(c(&quot;mean&quot;), \\(x) round(x, 3))) %&gt;% # Round numeric columns --&gt; rounding before the matching algorithm is irrelevant to me pivot_wider(names_from = c(&quot;layer&quot;, &quot;depth&quot;, &quot;stat&quot;), values_from = &quot;mean&quot;) %&gt;% rename(&quot;clay_0_5cm_mean&quot; = &quot;clay_0-5cm_mean&quot;) %&gt;% mutate(clay_0_5cm_mean = case_when(is.nan(clay_0_5cm_mean) ~ NA, TRUE ~ clay_0_5cm_mean)) data.travelT = unnest(get.travelT, traveltime) %&gt;% pivot_wider(names_from = &quot;distance&quot;, values_from = &quot;minutes_median&quot;, names_prefix = &quot;minutes_median_&quot;) %&gt;% mutate(minutes_median_5k_110mio = case_when(is.nan(minutes_median_5k_110mio) ~ NA, TRUE ~ minutes_median_5k_110mio)) data.tree = unnest(get.tree, treecover_area) %&gt;% drop_na(treecover) %&gt;% #get rid of units with NA values #mutate(across(c(&quot;treecover&quot;), \\(x) round(x, 3))) %&gt;% # Round numeric columns pivot_wider(names_from = &quot;years&quot;, values_from = &quot;treecover&quot;, names_prefix = &quot;treecover_&quot;) data.tri = unnest(get.tri, tri) %&gt;% mutate(tri_mean = case_when(is.nan(tri_mean) ~ NA, TRUE ~ tri_mean)) data.elevation = unnest(get.elevation, elevation) %&gt;% mutate(elevation_mean = case_when(is.nan(elevation_mean) ~ NA, TRUE ~ elevation_mean)) ## End parallel plan : close parallel sessions, so must be done once indicators&#39; datasets are built plan(sequential) # The calculation of tree loss area is performed at dataframe base # Get the column names of tree cover time series colnames_tree = names(data.tree)[startsWith(names(data.tree), &quot;treecover&quot;)] # Drop the first year dropFirst = tail(colnames_tree, -1) # Drop the last year dropLast = head(colnames_tree, -1) # Set list of new column names for tree loss time series colnames_loss = dropFirst %&gt;% str_split(., &quot;_&quot;) # Add new columns: treeloss_tn = treecover_tn - treecover_t(n-1) for (i in 1:length(dropFirst)) { new_colname = paste0(&quot;treeloss_&quot;, colnames_loss[[i]][2]) data.tree[[new_colname]] = data.tree[[dropFirst[i]]] - data.tree[[dropLast[i]]] } print(&quot;----Export Matching Frame&quot;) # Remove &quot;geometry&quot; column from dataframes df.tree = data.tree %&gt;% mutate(x = NULL) %&gt;% as.data.frame() df.travelT = data.travelT %&gt;% mutate(x = NULL) %&gt;% as.data.frame() df.soil = data.soil %&gt;% mutate(x = NULL) %&gt;% as.data.frame() df.elevation = data.elevation %&gt;% mutate(x = NULL) %&gt;% as.data.frame() df.tri = data.tri %&gt;% mutate(x=NULL) %&gt;% as.data.frame() # Make a dataframe containing only &quot;assetid&quot; and geometry # Use data.soil instead of data.tree, as some pixels are removed in data.tree (NA values from get.tree) df.geom = data.soil[, c(&quot;assetid&quot;, &quot;x&quot;)] %&gt;% as.data.frame() # Merge all output dataframes pivot.all = Reduce(dplyr::full_join, list(df.travelT, df.soil, df.tree, df.elevation, df.tri, df.geom)) %&gt;% st_as_sf() # Make column Group ID and WDPA ID have data type &quot;integer&quot; pivot.all$group = as.integer(pivot.all$group) pivot.all$wdpaid = as.integer(pivot.all$wdpaid) # Save this matching dataframe name_save = paste0(name_output, &quot;_&quot;, iso, ext_output) s3write_using(pivot.all, sf::st_write, object = paste0(save_dir, &quot;/&quot;, iso, &quot;/&quot;, name_save), bucket = &quot;projet-afd-eva-ap&quot;, opts = list(&quot;region&quot; = &quot;&quot;)) #Removing files in the temporary folder do.call(file.remove, list(list.files(tmp_pre, include.dirs = F, full.names = T, recursive = T))) #End timer toc = toc() #Append the log cat(paste(&quot;#Calculating outcome and other covariates\\n-&gt; OK :&quot;, toc$callback_msg, &quot;\\n\\n&quot;), file = log, append = TRUE) #Return the output return(list(&quot;is_ok&quot; = TRUE)) }, error = function(e) { #Print the error and append the log print(e) #Append the log cat(paste(&quot;#Calculating outcome and other covariates\\n-&gt; Error :\\n&quot;, e, &quot;\\n\\n&quot;), file = log, append = TRUE) #Return string to inform user to skip return(list(&quot;is_ok&quot; = FALSE)) } # warning = function(w) # { # #Print the warning and append the log # print(w) # #Append the log # cat(paste(&quot;#Calculating outcome and other covariates\\n-&gt; Warning :\\n&quot;, w, &quot;\\n&quot;), file = log, append = TRUE) # #Return string to inform user to skip # return(list(&quot;is_ok&quot; = TRUE)) # } ) return(output) } ##### ###Post-processing ##### #Load the matching dataframe obtained during pre-processing ##INPUTS : ### iso : the ISO code of the country considered ### name_input : name of the file to import ### ext_output : extension fo the file to import ### yr_min : the minimum treatment year to be considered in the analysis. As some matching covariates are defined with pre-treatment data (e.g average tree cover loss before treatment), this minimal year is greater than the first year in the period considered ### log : a log file to track progress of the processing ### save_dir : saving directory ##OUTPUTS : ### mf : matching dataframe. More precisely, it gives for each observation units in a country values of different covariates to perform matching. ### is_ok : a boolean indicating whether or not an error occured inside the function ##DATA SAVED ### The list of PAs in the matching frame, characterized by their WDPAID. Useful to loop over each PAs we want to analyze in a given country fn_post_load_mf = function(iso, yr_min, name_input, ext_input, log, save_dir) { output = tryCatch( { #Load the matching dataframe object = paste(save_dir, iso, paste0(name_input, &quot;_&quot;, iso, ext_input), sep = &quot;/&quot;) mf = s3read_using(sf::st_read, bucket = &quot;projet-afd-eva-ap&quot;, object = object, opts = list(&quot;region&quot; = &quot;&quot;)) #Subset to control and treatment units with year of treatment &gt;= yr_min mf = mf %&gt;% filter(group==1 | group==2) %&gt;% #Remove observations with NA values only for covariates : ## except for creation year, funding years, geographical location, country ISO and name, pixel resolution which are NA for control units drop_na(-c(status_yr, year_funding_first, year_funding_all, region_afd, region, sub_region, iso3, country_en, res_m)) #%&gt;% #filter(status_yr &gt;= yr_min | is.na(status_yr)) #Write the list of PAs matched list_pa = mf %&gt;% st_drop_geometry() %&gt;% as.data.frame() %&gt;% dplyr::select(c(region_afd, region, sub_region, country_en, iso3, wdpaid, status_yr, year_funding_first, year_funding_all)) %&gt;% mutate(iso3 = iso, .before = &quot;wdpaid&quot;) %&gt;% filter(wdpaid != 0) %&gt;% group_by(wdpaid) %&gt;% slice(1) %&gt;% ungroup() s3write_using(list_pa, data.table::fwrite, bucket = &quot;projet-afd-eva-ap&quot;, object = paste(save_dir, iso, paste0(&quot;list_pa_matched_&quot;, iso, &quot;.csv&quot;), sep = &quot;/&quot;), opts = list(&quot;region&quot; = &quot;&quot;)) #Append the log cat(&quot;Loading the matching frame -&gt; OK\\n&quot;, file = log, append = TRUE) #Return output return(list(&quot;mf&quot; = mf, &quot;is_ok&quot; = TRUE)) }, error = function(e) { print(e) cat(paste(&quot;Error in loading the matching frame :\\n&quot;, e, &quot;\\n&quot;), file = log, append = TRUE) return(list(&quot;is_ok&quot; = FALSE)) } # warning = function(w) # { # #Print the warning and append the log # print(w) # #Append the log # cat(paste(&quot;Warining while loading the matching frame :\\n&quot;, w, &quot;\\n&quot;), file = log, append = TRUE) # #Return string to inform user to skip # return(list(&quot;is_ok&quot; = TRUE)) # } ) return(output) } #Compute average forest loss before PA creation, and add it to the matching frame as a covariate ##INPUTS : ### mf : the matching dataframe ### colname.flAvg : name of the average forest loss variable ### log : a log file to track progress of the processing ## OUTPUTS : ### mf : matching frame with the new covariate ### is_ok : a boolean indicating whether or not an error occured inside the function fn_post_avgLoss_prefund = function(mf, colname.flAvg, log) { output = tryCatch( { #Extract treatment year treatment.year = mf %&gt;% filter(group == 2) %&gt;% slice(1) treatment.year = treatment.year$status_yr #Extract first year treeloss is computed ##Select cols with &quot;treeloss&quot; in mf, drop geometry, replace &quot;treeloss_&quot; by &quot;&quot;, convert to num and take min treeloss.ini.year = mf[grepl(&quot;treeloss&quot;, names(mf))] %&gt;% st_drop_geometry() %&gt;% names() %&gt;% gsub(paste0(&quot;treeloss&quot;, &quot;_&quot;), &quot;&quot;, .) %&gt;% as.numeric() %&gt;% min() #Define period to compute average loss ##If 5 pre-treatment periods are available at least, then average pre-treatment deforestation is computed on this 5 years range ## If less than 5 are available, compute on this restricted period ## Note that by construction, treatment.year &gt;= treeloss.ini.year +1 (as yr_min = yr_first+2 in the parameters) if((treatment.year-treeloss.ini.year) &gt;=5) {yr_start = (treatment.year)-5 yr_end = (treatment.year)-1} else if((treatment.year-treeloss.ini.year &lt;5) &amp; (treatment.year-treeloss.ini.year &gt;0)) {yr_start = treeloss.ini.year yr_end = (treatment.year)-1} #Transform it in variable suffix var_start = yr_start - 2000 var_end = yr_end - 2000 #Select only relevant variables df_fl = mf[grepl(&quot;treeloss&quot;, names(mf))][var_start:var_end] %&gt;% st_drop_geometry() #Compute average loss for each pixel and store it in mf. Also add the start and end years of pre-treatment period where average loss is computed. mf$avgLoss_pre_fund = round(rowMeans(df_fl), 2) mf$start_pre_fund = yr_start mf$end_pre_fund = yr_end #Remove NA values mf = mf %&gt;% drop_na(avgLoss_pre_fund) #Append the log cat(&quot;#Add average pre-treatment treecover loss\\n-&gt; OK\\n&quot;, file = log, append = TRUE) #Return output return(list(&quot;mf&quot; = mf, &quot;is_ok&quot; = TRUE)) }, error = function(e) { print(e) cat(paste(&quot;#Add average pre-treatment treecover loss\\n-&gt; Error :\\n&quot;, e, &quot;\\n&quot;), file = log, append = TRUE) return(list(&quot;is_ok&quot; = FALSE)) } # warning = function(w) # { # #Print the warning and append the log # print(w) # #Append the log # cat(paste(&quot;#Add average pre-treatment treecover loss\\n-&gt; Warning :\\n&quot;, w, &quot;\\n&quot;), file = log, append = TRUE) # #Return string to inform user to skip # return(list(&quot;is_ok&quot; = TRUE)) # } ) return(output) } #Perform matching of treated and potential control units. ##INPUTS : ### mf : the matching dataframe ### iso : the ISO code of the country considered ### dummy_int : should we consider the interaction of variables for matching ? Is recommended generally speaking (https://cran.r-project.org/web/packages/MatchIt/vignettes/assessing-balance.html). When using CEM matching, variables are binned then exact matching is performed on binned values. As a first approximation we can argue that if two units have the same binned values for two variables, then they likely have the same binned interaction value. It is not necessarily true though, as binned(A)*binned(B) can be different from binned(A*B). ### match_method : the matching method to use. See https://cran.r-project.org/web/packages/MatchIt/vignettes/matching-methods.html for a list of matching methods we can use with the MatchIT package ### cutoff_method : the method to use for automatic histogram binning of the variables. See Iacus, King and Porro 2011 (https://gking.harvard.edu/files/political_analysis-2011-iacus-pan_mpr013.pdf), 5.5.1, or MathIT documentation. &quot;Sturges&quot; tend to have the best outcomes (number of matched units) in our case (Antoine Vuillot, 28/09/2023) ### is_k2k : boolean. Should we use k2k matching ? If yes, each treated unit is eventually matched with a single control. For CEM matching, a treated unit is potentially associated with more than one control unit (exact matching on binned variables), and then the &quot;closest&#39; one is chosen with a metric defined in k2k_method ### k2k_method : metric to use to choose the closest control among the control units matched with a treated unit in CEM matching. ### th_mean :the maximum acceptable value for absolute standardized mean difference of covariates between matched treated and control units. Typically 0.1 (https://cran.r-project.org/web/packages/MatchIt/vignettes/assessing-balance.html) or 0.25 in conservation literature (e.g https://conbio.onlinelibrary.wiley.com/doi/abs/10.1111/cobi.13728) ### th_var_min, th_var_max : the range of acceptable value for covariate variance ratio between matched treated and control units. Typicall 0.5 and 2, respectively (https://cran.r-project.org/web/packages/MatchIt/vignettes/assessing-balance.html) ### colname.travelTime, colname.clayContent, colname.elevation, colname.tri, colname.fcIni, colname.flAvg : name of the matching covariates ### log : a log file to track progress of the processing ##OUTPUTS : ### out.cem : an object with all information on matching (parameters, results, etc.) ### df.cov.m : for each matching covariate, statistics to assess the quality of the match ### is_ok : a boolean indicating whether or not an error occured inside the function ##NOTES ### The matching method chosen is CEM though other exists. For a presentation of the different matching algorithms, see https://cran.r-project.org/web/packages/MatchIt/vignettes/matching-methods.html fn_post_match_auto = function(mf, iso, dummy_int, match_method, cutoff_method, is_k2k, k2k_method, th_mean, th_var_min, th_var_max, colname.travelTime, colname.clayContent, colname.elevation, colname.tri, colname.fcIni, colname.flAvg, log) { #Append the log file : CEM step cat(&quot;#Run Coarsened Exact Matching\\n&quot;, file = log, append = TRUE) ## Matching handling errors due to absence of matching output = tryCatch( { # Formula formula = eval(bquote(group ~ .(as.name(colname.travelTime)) + .(as.name(colname.clayContent)) + .(as.name(colname.fcIni)) + .(as.name(colname.flAvg)) + .(as.name(colname.tri)) + .(as.name(colname.elevation)))) #Try to perform matching out.cem = matchit(formula, data = mf, method = match_method, cutpoints = cutoff_method, k2k = is_k2k, k2k.method = k2k_method) # Then the performance of the matching is assessed, based on https://cran.r-project.org/web/packages/MatchIt/vignettes/assessing-balance.html ## Covariate balance : standardized mean difference and variance ratio ## For both tests and the joint one, a dummy variable is defined, with value TRUE is the test is passed df.cov.m = summary(out.cem, interactions = dummy_int)$sum.matched %&gt;% as.data.frame() %&gt;% clean_names() %&gt;% mutate(is_var_ok = var_ratio &lt; th_var_max &amp; var_ratio &gt; th_var_min, #Check variance ratio between treated and controls is_mean_ok = abs(std_mean_diff) &lt; th_mean, #Check absolute standardized mean difference is_bal_ok = as.logical(is_var_ok*is_mean_ok), #Binary : TRUE if both variance and mean difference check pass, 0 if at least one does not .after = &quot;std_mean_diff&quot;) #Add a warning if covariate balance tests are not passed if(sum(df.cov.m$is_bal_ok) &lt; nrow(df.cov.m) | is.na(sum(df.cov.m$is_bal_ok)) == TRUE) { message(&quot;Matched control and treated units are not balanced enough. Increase sample size, turn to less restrictive tests or visually check balance.&quot;) cat(&quot;-&gt; Careful : matched control and treated units are not balanced enough. Increase sample size, turn to less restrictive tests or visually check balance.\\n&quot;, file = log, append = TRUE) } #Append the log : note the step has already been appended at the beginning of the function cat(&quot;-&gt; OK\\n&quot;, file = log, append = TRUE) return(list(&quot;out.cem&quot; = out.cem, &quot;df.cov.m&quot; = df.cov.m, &quot;is_ok&quot; = TRUE)) }, error=function(e) { print(e) cat(paste(&quot;-&gt; Error :\\n&quot;, e, &quot;\\n&quot;), file = log, append = TRUE) return(list(&quot;is_ok&quot; = FALSE)) }, warning = function(w) { #Print the warning and append the log #Append the log cat(paste(&quot;-&gt; Warning :\\n&quot;, w, &quot;\\n&quot;), file = log, append = TRUE) return(list(&quot;is_ok&quot; = FALSE)) #Here warning comes from an absence of matching : thus must skip to next country } ) return(output) } #Plot covariates balance (plots and summary table) ## INPUTS : ### out.cem : list of results from the CEM matching ### mf : the matching dataframe ### colname.travelTime, colname.clayContent, colname.elevation, colname.tri, colname.fcIni, colname.flAvg : name of the matching covariates ### iso : ISO code of the country considered ### path_tmp : temporary folder to store figures ### wdpaid : the WDPA ID of the protected area considered ### log : a log file to track progress of the processing ### save_dir : saving directory ##OUTPUTS : ### is_ok : a boolean indicating whether or not an error occured inside the function ## DATA SAVED : ### A covariate love plot ### A table with number of treated and control units, before and after matching ### A table with statistics on matched control and treated units ### A table with statistics on unmatched control and treated units, fn_post_covbal = function(out.cem, mf, colname.travelTime, colname.clayContent, colname.fcIni, colname.flAvg, colname.tri, colname.elevation, iso, path_tmp, wdpaid, log, save_dir) { output = tryCatch( { #Save summary table from matching smry_cem = summary(out.cem) tbl_cem_nn = smry_cem$nn tbl_cem_m = smry_cem$sum.matched tbl_cem_all = smry_cem$sum.all #Extract country name country.name = mf %&gt;% filter(group == 2) %&gt;% slice(1) country.name = country.name$country_en #Extract start and end years of pre-treatment period where average loss is computed year.start.prefund = mf %&gt;% filter(group == 2) %&gt;% slice(1) year.start.prefund = year.start.prefund$start_pre_fund year.end.prefund = mf %&gt;% filter(group == 2) %&gt;% slice(1) year.end.prefund = year.end.prefund$end_pre_fund #Plot covariate balance colname.flAvg.new = paste0(&quot;Avg. Annual Forest \\n Loss &quot;, year.start.prefund, &quot;-&quot;, year.end.prefund) c_name = data.frame(old = c(colname.travelTime, colname.clayContent, colname.tri, colname.elevation, colname.fcIni, colname.flAvg), new = c(&quot;Accessibility&quot;, &quot;Clay Content&quot;, &quot;Terrain Ruggedness Index (TRI)&quot;, &quot;Elevation (m)&quot;, &quot;Forest Cover in 2000&quot;, colname.flAvg.new)) # Refer to cobalt::love.plot() # https://cloud.r-project.org/web/packages/cobalt/vignettes/cobalt.html#love.plot fig_covbal = love.plot(out.cem, binary = &quot;std&quot;, abs = TRUE, #thresholds = c(m = .1), var.order = &quot;unadjusted&quot;, var.names = c_name, title = paste0(&quot;Covariate balance for WDPA ID &quot;, wdpaid, &quot; in &quot;, country.name), sample.names = c(&quot;Discarded&quot;, &quot;Selected&quot;), wrap = 25 # at how many characters does axis label break to new line ) # Finetune Layouts using ggplot fig_covbal + geom_vline(aes(xintercept=0.1, linetype=&quot;Acceptable \\n Balance \\n (x=0.1)&quot;), color=c(&quot;#2ecc71&quot;), linewidth=0.35) + theme_bw() + theme( plot.title = element_text(family=&quot;Arial Black&quot;, size=16, hjust=0.5), legend.title = element_blank(), legend.text=element_text(size=14), legend.spacing.x = unit(0.5, &#39;cm&#39;), legend.spacing.y = unit(0.75, &#39;cm&#39;), axis.text.x = element_text(angle = 20, hjust = 0.5, vjust = 0.5), axis.text=element_text(size=12), axis.title=element_text(size=14), axis.title.y = element_text(margin = margin(unit = &#39;cm&#39;, r = 0.5)), axis.title.x = element_text(margin = margin(unit = &#39;cm&#39;, t = 0.5)), panel.grid.major.x = element_line(color = &#39;grey&#39;, linewidth = 0.3, linetype = 1), panel.grid.minor.x = element_line(color = &#39;grey&#39;, linewidth = 0.3, linetype = 2) ) + guides(linetype = guide_legend(override.aes = list(color = &quot;#2ecc71&quot;))) # Add legend for geom_vline #Saving files ggsave(paste0(path_tmp, &quot;/CovBal/fig_covbal&quot;, &quot;_&quot;, iso, &quot;_&quot;, wdpaid, &quot;.png&quot;), plot = fig_covbal, device = &quot;png&quot;, height = 6, width = 9) print(xtable(tbl_cem_nn, type = &quot;latex&quot;), file = paste0(path_tmp, &quot;/CovBal/tbl_cem_nn&quot;, &quot;_&quot;, iso, &quot;_&quot;, wdpaid, &quot;.tex&quot;)) print(xtable(tbl_cem_m, type = &quot;latex&quot;), file = paste0(path_tmp, &quot;/CovBal/tbl_cem_m&quot;, &quot;_&quot;, iso, &quot;_&quot;, wdpaid, &quot;.tex&quot;)) print(xtable(tbl_cem_all, type = &quot;latex&quot;), file = paste0(path_tmp, &quot;/CovBal/tbl_cem_all&quot;, &quot;_&quot;, iso, &quot;_&quot;, wdpaid, &quot;.tex&quot;)) #Export to S3 storage ##List of files to save in the temp folder files &lt;- list.files(paste(path_tmp, &quot;CovBal&quot;, sep = &quot;/&quot;), full.names = TRUE) ##Add each file in the bucket (same foler for every file in the temp) for(f in files) { cat(&quot;Uploading file&quot;, paste0(&quot;&#39;&quot;, f, &quot;&#39;&quot;), &quot;\\n&quot;) aws.s3::put_object(file = f, bucket = paste(&quot;projet-afd-eva-ap&quot;, save_dir, iso, wdpaid, sep = &quot;/&quot;), region = &quot;&quot;, show_progress = TRUE) } do.call(file.remove, list(list.files(paste(path_tmp, &quot;CovBal&quot;, sep = &quot;/&quot;), full.names = TRUE))) #Append the log cat(&quot;#Plot covariates balance\\n-&gt;OK\\n&quot;, file = log, append = TRUE) return(list(&quot;is_ok&quot; = TRUE)) }, error=function(e) { print(e) cat(paste(&quot;#Plot covariates balance\\n-&gt; Error :\\n&quot;, e, &quot;\\n&quot;), file = log, append = TRUE) return(list(&quot;is_ok&quot; = FALSE)) } # warning = function(w) # { # #Print the warning and append the log # print(w) # #Append the log # cat(paste(&quot;#Plot covariates balance\\n-&gt; Warning :\\n&quot;, w, &quot;\\n&quot;), file = log, append = TRUE) # #Return string to inform user to skip # return(list(&quot;is_ok&quot; = TRUE)) # } ) return(output) } #Density plots of covariates for control and treatment units, before and after matching ## INPUTS : ### out.cem : list of results from the CEM matching ### mf : the matching dataframe ### colname.travelTime, colname.clayContent, colname.elevation, colname.tri, colname.fcIni, colname.flAvg : name of the matching covariates ### iso : ISO code of the country considered ### path_tmp : temporary folder to store figures ### wdpaid : the WDPA ID of the protected area considered ### log : a log file to track progress of the processing ### save_dir : saving directory ## OUTPUTS : ### is_ok : a boolean indicating whether or not an error occured inside the function ## DATA SAVED : ### Density plots of the matching covariates considered, for matched treated and control units fn_post_plot_density = function(out.cem, mf, colname.travelTime, colname.clayContent, colname.fcIni, colname.flAvg, colname.tri, colname.elevation, iso, path_tmp, wdpaid, log, save_dir) { output = tryCatch( { # Define Facet Labels fnl = c(`Unadjusted Sample` = &quot;Before Matching&quot;, `Adjusted Sample` = &quot;After Matching&quot;) #Extract country name country.name = mf %&gt;% filter(group == 2) %&gt;% slice(1) country.name = country.name$country_en #Define plots ## Density plot for Travel Time fig_travel = bal.plot(out.cem, var.name = colname.travelTime, #sample.names = c(&quot;Control&quot;, &quot;Treatment&quot;), which = &quot;both&quot;) + facet_wrap(.~which, labeller = as_labeller(fnl)) + #scale_fill_viridis(discrete = T) + scale_fill_manual(labels = c(&quot;Control&quot;, &quot;Treatment&quot;), values = c(&quot;#f5b041&quot;,&quot;#5dade2&quot;)) + labs(title = &quot;Distributional balance for accessibility&quot;, subtitle = paste0(&quot;Protected area in &quot;, country.name, &quot;, WDPAID &quot;, wdpaid), x = &quot;Accessibility (min)&quot;, fill = &quot;Group&quot;) + theme_bw() + theme( plot.title = element_text(family=&quot;Arial Black&quot;, size=16, hjust = 0), legend.title = element_blank(), legend.text=element_text(size=14), legend.spacing.x = unit(0.5, &#39;cm&#39;), legend.spacing.y = unit(0.75, &#39;cm&#39;), axis.text=element_text(size=12), axis.title=element_text(size=14), axis.title.y = element_text(margin = margin(unit = &#39;cm&#39;, r = 0.5)), axis.title.x = element_text(margin = margin(unit = &#39;cm&#39;, t = 0.5)), strip.text.x = element_text(size = 12) # Facet Label ) ## Density plot for Clay Content fig_clay = bal.plot(out.cem, var.name = colname.clayContent, which = &quot;both&quot;) + facet_wrap(.~which, labeller = as_labeller(fnl)) + #scale_fill_viridis(discrete = T) + scale_fill_manual(labels = c(&quot;Control&quot;, &quot;Treatment&quot;), values = c(&quot;#f5b041&quot;,&quot;#5dade2&quot;)) + labs(title = &quot;Distributional balance for clay content&quot;, subtitle = paste0(&quot;Protected area in &quot;, country.name, &quot;, WDPAID &quot;, wdpaid), x = &quot;Clay content at 0~20cm soil depth (%)&quot;, fill = &quot;Group&quot;) + theme_bw() + theme( plot.title = element_text(family=&quot;Arial Black&quot;, size=16, hjust=0), legend.title = element_blank(), legend.text=element_text(size=14), legend.spacing.x = unit(0.5, &#39;cm&#39;), legend.spacing.y = unit(0.75, &#39;cm&#39;), axis.text=element_text(size=12), axis.title=element_text(size=14), axis.title.y = element_text(margin = margin(unit = &#39;cm&#39;, r = 0.5)), axis.title.x = element_text(margin = margin(unit = &#39;cm&#39;, t = 0.5)), strip.text.x = element_text(size = 12) # Facet Label ) ## Density plot for Elevation fig_elevation = bal.plot(out.cem, var.name = colname.elevation, which = &quot;both&quot;) + facet_wrap(.~which, labeller = as_labeller(fnl)) + #scale_fill_viridis(discrete = T) + scale_fill_manual(labels = c(&quot;Control&quot;, &quot;Treatment&quot;), values = c(&quot;#f5b041&quot;,&quot;#5dade2&quot;)) + labs(title = &quot;Distributional balance for elevation&quot;, subtitle = paste0(&quot;Protected area in &quot;, country.name, &quot;, WDPAID &quot;, wdpaid), x = &quot;Elevation (m)&quot;, fill = &quot;Group&quot;) + theme_bw() + theme( plot.title = element_text(family=&quot;Arial Black&quot;, size=16, hjust=0), legend.title = element_blank(), legend.text=element_text(size=14), legend.spacing.x = unit(0.5, &#39;cm&#39;), legend.spacing.y = unit(0.75, &#39;cm&#39;), axis.text=element_text(size=12), axis.title=element_text(size=14), axis.title.y = element_text(margin = margin(unit = &#39;cm&#39;, r = 0.5)), axis.title.x = element_text(margin = margin(unit = &#39;cm&#39;, t = 0.5)), strip.text.x = element_text(size = 12) # Facet Label ) ## Density plot for TRI fig_tri = bal.plot(out.cem, var.name = colname.tri, which = &quot;both&quot;) + facet_wrap(.~which, labeller = as_labeller(fnl)) + #scale_fill_viridis(discrete = T) + scale_fill_manual(labels = c(&quot;Control&quot;, &quot;Treatment&quot;), values = c(&quot;#f5b041&quot;,&quot;#5dade2&quot;)) + labs(title = &quot;Distributional balance for Terrain Ruggedness Index (TRI)&quot;, subtitle = paste0(&quot;Protected area in &quot;, country.name, &quot;, WDPAID &quot;, wdpaid), x = &quot;TRI&quot;, fill = &quot;Group&quot;) + theme_bw() + theme( plot.title = element_text(family=&quot;Arial Black&quot;, size=16, hjust=0), legend.title = element_blank(), legend.text=element_text(size=14), legend.spacing.x = unit(0.5, &#39;cm&#39;), legend.spacing.y = unit(0.75, &#39;cm&#39;), axis.text=element_text(size=12), axis.title=element_text(size=14), axis.title.y = element_text(margin = margin(unit = &#39;cm&#39;, r = 0.5)), axis.title.x = element_text(margin = margin(unit = &#39;cm&#39;, t = 0.5)), strip.text.x = element_text(size = 12) # Facet Label ) ## Density plot for covariate &quot;forest cover 2000&quot; fig_fc = bal.plot(out.cem, var.name = colname.fcIni, which = &quot;both&quot;) + facet_wrap(.~which, labeller = as_labeller(fnl)) + scale_fill_manual(labels = c(&quot;Control&quot;, &quot;Treatment&quot;), values = c(&quot;#f5b041&quot;,&quot;#5dade2&quot;)) + # scale_x_continuous(trans = &quot;log10&quot;) + labs(title = &quot;Distributional balance for forest cover in 2000&quot;, subtitle = paste0(&quot;Protected area in &quot;, country.name, &quot;, WDPAID &quot;, wdpaid), x = &quot;Forest cover (ha)&quot;, fill = &quot;Group&quot;) + theme_bw() + theme( plot.title = element_text(family=&quot;Arial Black&quot;, size=16, hjust=0), legend.title = element_blank(), legend.text=element_text(size=14), legend.spacing.x = unit(0.5, &#39;cm&#39;), legend.spacing.y = unit(0.75, &#39;cm&#39;), axis.text=element_text(size=12), axis.title=element_text(size=14), axis.title.y = element_text(margin = margin(unit = &#39;cm&#39;, r = 0.5)), axis.title.x = element_text(margin = margin(unit = &#39;cm&#39;, t = 0.5)), strip.text.x = element_text(size = 12) # Facet Label ) ## Density plot for covariate &quot;avg. annual forest loss prior funding&quot; fig_fl = bal.plot(out.cem, var.name = colname.flAvg, which = &quot;both&quot;) + facet_wrap(.~which, labeller = as_labeller(fnl)) + #scale_fill_viridis(discrete = T) + scale_fill_manual(labels = c(&quot;Control&quot;, &quot;Treatment&quot;), values = c(&quot;#f5b041&quot;,&quot;#5dade2&quot;)) + labs(title = &quot;Distributional balance for average pre-treatment forest loss&quot;, subtitle = paste0(&quot;Protected area in &quot;, country.name, &quot;, WDPAID &quot;, wdpaid), x = &quot;Forest loss (%)&quot;, fill = &quot;Group&quot;) + theme_bw() + theme( plot.title = element_text(family=&quot;Arial Black&quot;, size=16, hjust=0), legend.title = element_blank(), legend.text=element_text(size=14), legend.spacing.x = unit(0.5, &#39;cm&#39;), legend.spacing.y = unit(0.75, &#39;cm&#39;), axis.text=element_text(size=12), axis.title=element_text(size=14), axis.title.y = element_text(margin = margin(unit = &#39;cm&#39;, r = 0.5)), axis.title.x = element_text(margin = margin(unit = &#39;cm&#39;, t = 0.5)), strip.text.x = element_text(size = 12) # Facet Label ) #Saving plots tmp = paste(tempdir(), &quot;fig&quot;, sep = &quot;/&quot;) ggsave(paste(tmp, paste0(&quot;fig_travel_dplot_&quot;, iso, &quot;_&quot;, wdpaid, &quot;.png&quot;), sep = &quot;/&quot;), plot = fig_travel, device = &quot;png&quot;, height = 6, width = 9) ggsave(paste(tmp, paste0(&quot;fig_clay_dplot_&quot;, iso, &quot;_&quot;, wdpaid, &quot;.png&quot;), sep = &quot;/&quot;), plot = fig_clay, device = &quot;png&quot;, height = 6, width = 9) ggsave(paste(tmp, paste0(&quot;fig_elevation_dplot_&quot;, iso, &quot;_&quot;, wdpaid, &quot;.png&quot;), sep = &quot;/&quot;), plot = fig_elevation, device = &quot;png&quot;, height = 6, width = 9) ggsave(paste(tmp, paste0(&quot;fig_tri_dplot_&quot;, iso, &quot;_&quot;, wdpaid, &quot;.png&quot;), sep = &quot;/&quot;), plot = fig_tri, device = &quot;png&quot;, height = 6, width = 9) ggsave(paste(tmp, paste0(&quot;fig_fc_dplot_&quot;, iso, &quot;_&quot;, wdpaid, &quot;.png&quot;), sep = &quot;/&quot;), plot = fig_fc, device = &quot;png&quot;, height = 6, width = 9) ggsave(paste(tmp, paste0(&quot;fig_fl_dplot_&quot;, iso, &quot;_&quot;, wdpaid, &quot;.png&quot;), sep = &quot;/&quot;), plot = fig_fl, device = &quot;png&quot;, height = 6, width = 9) files &lt;- list.files(tmp, full.names = TRUE) ##Add each file in the bucket (same foler for every file in the temp) for(f in files) { cat(&quot;Uploading file&quot;, paste0(&quot;&#39;&quot;, f, &quot;&#39;&quot;), &quot;\\n&quot;) aws.s3::put_object(file = f, bucket = paste(&quot;projet-afd-eva-ap&quot;, save_dir, iso, wdpaid, sep = &quot;/&quot;), region = &quot;&quot;, show_progress = TRUE) } do.call(file.remove, list(list.files(tmp, full.names = TRUE))) #Append the log cat(&quot;#Plot covariates density\\n-&gt;OK\\n&quot;, file = log, append = TRUE) return(list(&quot;is_ok&quot; = TRUE)) }, error=function(e) { print(e) cat(paste(&quot;#Plot covariates density\\n-&gt; Error :\\n&quot;, e, &quot;\\n&quot;), file = log, append = TRUE) return(list(&quot;is_ok&quot; = FALSE)) } # warning = function(w) # { # #Print the warning and append the log # print(w) # #Append the log # cat(paste(&quot;#Plot covariates density\\n-&gt; Warning :\\n&quot;, w, &quot;\\n&quot;), file = log, append = TRUE) # #Return string to inform user to skip # return(list(&quot;is_ok&quot; = TRUE)) # } ) return(output) } #Define panel datasets (long, wide format) for control and treatment observation units, before and after matching. ## INPUTS : ### out.cem : list of results from the CEM matching ### mf : the matching dataframe ### ext_output : extension fo the file to import ### iso : ISO code of the country considered ### wdpaid : the WDPA ID of the protected area considered ### log : a log file to track progress of the processing ### save_dir : saving directory ## OUTPUTS : ### a list of dataframes : (un)matched.wide/long. They contain covariates and outcomes for treatment and control units, before and after matching, in a wide or long format ### is_ok : a boolean indicating whether or not an error occured inside the function ## DATA SAVED ### (un)matched.wide/long dataframes. They contain covariates and outcomes for treatment and control units, before and after matching, in a wide or long format fn_post_panel = function(out.cem, mf, ext_output, wdpaid, iso, log, save_dir) { output = tryCatch( { # Convert dataframe of matched objects to pivot wide form matched.wide = match.data(object=out.cem, data=mf) # Pivot Wide ==&gt; Pivot Long matched.long = matched.wide %&gt;% dplyr::select(c(region_afd, region, sub_region, country_en, iso3, group, wdpaid, status_yr, year_funding_first, year_funding_all, assetid, weights, starts_with(&quot;treecover&quot;), res_m)) %&gt;% pivot_longer(cols = c(starts_with(&quot;treecover&quot;)), names_to = c(&quot;var&quot;, &quot;year&quot;), names_sep = &quot;_&quot;, values_to = &quot;fc_ha&quot;) # Pivot wide Dataframe of un-matched objects unmatched.wide = mf # Pivot Wide ==&gt; Pivot Long unmatched.long = unmatched.wide %&gt;% dplyr::select(c(region_afd, region, sub_region, iso3, country_en, group, wdpaid, status_yr, year_funding_first, year_funding_all, assetid, starts_with(treecover), res_m)) %&gt;% pivot_longer(cols = c(starts_with(treecover)), names_to = c(&quot;var&quot;, &quot;year&quot;), names_sep = &quot;_&quot;, values_to = &quot;fc_ha&quot;) #Save the dataframes s3write_using(matched.wide, sf::st_write, object = paste0(save_dir, &quot;/&quot;, iso, &quot;/&quot;, wdpaid, &quot;/&quot;, paste0(&quot;matched_wide&quot;, &quot;_&quot;, iso, &quot;_&quot;, wdpaid, ext_output)), bucket = &quot;projet-afd-eva-ap&quot;, opts = list(&quot;region&quot; = &quot;&quot;)) s3write_using(unmatched.wide, sf::st_write, object = paste0(save_dir, &quot;/&quot;, iso, &quot;/&quot;, wdpaid, &quot;/&quot;, paste0(&quot;unmatched_wide&quot;, &quot;_&quot;, iso, &quot;_&quot;, wdpaid, ext_output)), bucket = &quot;projet-afd-eva-ap&quot;, opts = list(&quot;region&quot; = &quot;&quot;)) s3write_using(matched.long, sf::st_write, object = paste0(save_dir, &quot;/&quot;, iso, &quot;/&quot;, wdpaid, &quot;/&quot;, paste0(&quot;matched_long&quot;, &quot;_&quot;, iso, &quot;_&quot;, wdpaid, ext_output)), bucket = &quot;projet-afd-eva-ap&quot;, opts = list(&quot;region&quot; = &quot;&quot;)) s3write_using(unmatched.long, sf::st_write, object = paste0(save_dir, &quot;/&quot;, iso, &quot;/&quot;, wdpaid, &quot;/&quot;, paste0(&quot;unmatched_long&quot;, &quot;_&quot;, iso, &quot;_&quot;, wdpaid, ext_output)), bucket = &quot;projet-afd-eva-ap&quot;, opts = list(&quot;region&quot; = &quot;&quot;)) #Append the log cat(&quot;#Panelize dataframe\\n-&gt; OK\\n&quot;, file = log, append = TRUE) #Return outputs list_output = list(&quot;matched.wide&quot; = matched.wide, &quot;matched.long&quot; = matched.long, &quot;unmatched.wide&quot; = unmatched.wide, &quot;unmatched.long&quot; = unmatched.long, &quot;is_ok&quot; = TRUE) return(list_output) }, error=function(e) { print(e) cat(paste(&quot;#Panelize dataframe\\n-&gt; Error :\\n&quot;, e, &quot;\\n&quot;), file = log, append = TRUE) return(list(&quot;is_ok&quot; = FALSE)) } # warning = function(w) # { # #Print the warning and append the log # print(w) # #Append the log # cat(paste(&quot;#Panelize dataframe\\n-&gt; Warning :\\n&quot;, w, &quot;\\n&quot;), file = log, append = TRUE) # #Return string to inform user to skip # return(list(&quot;is_ok&quot; = TRUE)) # } ) return(output) } #Plot the average trend of control and treated units in a given country, before and after the matching ## INPUTS : ### (un)matched.long : dataframe with covariates and outcomes for each treatment and control unit, before and after matching, in a long format (one row : pixel+year) ### mf : the matching dataframe ### data_pa : dataframe with information on each PA considered in the analysis ### iso : ISO code of the country considered ### wdpaid : the WDPA ID of the protected area considered ### log : a log file to track progress of the processing ### save_dir : saving directory ## OUTPUTS : ### is_ok : a boolean indicating whether or not an error occured inside the function ## DATA SAVED : ### Evolution of forest cover in a treated and control pixel on average, before and after matching ### Same for total forest cover (pixel*# of pixels in the PA) ### Cumulated deforestation relative to 2000 forest cover, in treated and control pixels, before and after matching fn_post_plot_trend = function(matched.long, unmatched.long, mf, data_pa, iso, wdpaid, log, save_dir) { output = tryCatch( { #First extract some relevant information #Extract spatial resolution of pixels res_m and define pixel area in ha res_m = unique(mf$res_m) res_ha = res_m^2*1e-4 #Extract treatment year treatment.year = mf %&gt;% filter(group == 2) %&gt;% slice(1) treatment.year = treatment.year$status_yr #Extract funding years funding.years = mf %&gt;% filter(group == 2) %&gt;% slice(1) funding.years = funding.years$year_funding_first #funding.years = as.numeric(unlist(strsplit(funding.years$year_funding_all, split = &quot;,&quot;))) #Extract country name country.name = mf %&gt;% filter(group == 2) %&gt;% slice(1) country.name = country.name$country_en ##Area of the PA wdpa_id = wdpaid #Need to give a name to wdpaid (function argument) different from the varaible in the dataset (wdpaid) area_ha = data_pa[data_pa$wdpaid == wdpa_id,]$area_km2*100 #Extract number of pixels in the PA #n_pix_pa = length(unique(filter(unmatched.long, group == 2)$assetid)) n_pix_pa = area_ha/res_ha #This measure is imperfect for extrapolation of total deforestation avoided, as part of a PA can be coastal. Indeed, this extrapolation assumes implicitly that all the PA is covered by forest potentially deforested in absence of the conservation #Open a multisession for dataframe computations #Note the computations on unmatched units are the slowest here due to the number of observations relatively higher than for matched units plan(multisession, gc = TRUE, workers = 6) with_progress({ # Make dataframe for plotting trend ## Matched units df.matched.trend %&lt;-% {matched.long %&gt;% #First, compute deforestation relative to 2000 for each pixel (deforestation as computed in Wolf et al. 2021) group_by(assetid) %&gt;% mutate(FL_2000_cum = (fc_ha-fc_ha[year == 2000])/fc_ha[year == 2000]*100) %&gt;% ungroup() %&gt;% #Then compute the average forest cover and deforestation in each year, for treated and control groups #Standard deviation and 95% confidence interval is also computed for each variable group_by(group, year) %&gt;% summarise(n = n(), avgFC = mean(fc_ha, na.rm=TRUE), #Compute average forest cover in a pixel, its sd and ci sdFC = sd(fc_ha, na.rm = TRUE), ciFC_low = avgFC - qt(0.975,df=n-1)*sdFC/sqrt(n), ciFC_up = avgFC + qt(0.975,df=n-1)*sdFC/sqrt(n), avgFC_tot = n_pix_pa*mean(fc_ha, na.rm=TRUE), #Compute total average forest cover, sd and CI sdFC_tot = n_pix_pa*sdFC, ciFC_tot_low = avgFC_tot - qt(0.975,df=n-1)*sdFC_tot/sqrt(n), ciFC_tot_up = avgFC_tot + qt(0.975,df=n-1)*sdFC_tot/sqrt(n), avgFL_2000_cum = mean(FL_2000_cum, na.rm = TRUE), #Compute average forest loss relative to 2000 (Wolf et al 2021), sd and CI sdFL_2000_cum = sd(FL_2000_cum, na.rm = TRUE), ciFL_low = avgFL_2000_cum - qt(0.975,df=n-1)*sdFL_2000_cum/sqrt(n), ciFL_up = avgFL_2000_cum + qt(0.975,df=n-1)*sdFL_2000_cum/sqrt(n), matched = TRUE) %&gt;% ungroup() %&gt;% st_drop_geometry() } ##Unmatched df.unmatched.trend %&lt;-% {unmatched.long %&gt;% #First, compute deforestation relative to 2000 for each pixel (deforestation as computed in Wolf et al. 2021); compute percentage of forest cover in the pixel in 2000 group_by(assetid) %&gt;% mutate(FL_2000_cum = (fc_ha-fc_ha[year == 2000])/fc_ha[year == 2000]*100) %&gt;% ungroup() %&gt;% #Compute average percentage of FC in a pixel in 2000, for each group. Compute also standard deviation #Then compute the average forest cover, average forest cover percentage, and deforestation in each year, for treated and control groups #Standard deviation and 95% confidence interval is also computed for each variable group_by(group, year) %&gt;% summarise(n = n(), avgFC = mean(fc_ha, na.rm=TRUE), #Compute average forest cover in a pixel, its sd and ci sdFC = sd(fc_ha, na.rm = TRUE), ciFC_low = avgFC - qt(0.975,df=n-1)*sdFC/sqrt(n), ciFC_up = avgFC + qt(0.975,df=n-1)*sdFC/sqrt(n), avgFC_tot = n_pix_pa*mean(fc_ha, na.rm=TRUE), #Compute total average forest cover, sd and CI sdFC_tot = n_pix_pa*sdFC, ciFC_tot_low = avgFC_tot - qt(0.975,df=n-1)*sdFC_tot/sqrt(n), ciFC_tot_up = avgFC_tot + qt(0.975,df=n-1)*sdFC_tot/sqrt(n), avgFL_2000_cum = mean(FL_2000_cum, na.rm = TRUE), #Compute average forest loss relative to 2000 (Wolf et al 2021), sd and CI sdFL_2000_cum = sd(FL_2000_cum, na.rm = TRUE), ciFL_low = avgFL_2000_cum - qt(0.975,df=n-1)*sdFL_2000_cum/sqrt(n), ciFL_up = avgFL_2000_cum + qt(0.975,df=n-1)*sdFL_2000_cum/sqrt(n), matched = FALSE) %&gt;% #Compute total forest cover loss, knowing area of the PA and average forest cover in 2000 in treated pixels ungroup() %&gt;% st_drop_geometry() } }) df.trend = rbind(df.matched.trend, df.unmatched.trend) #Close multisession plan(sequential) #Plot ## Change Facet Labels fct.labs &lt;- c(&quot;Before Matching&quot;, &quot;After Matching&quot;) names(fct.labs) &lt;- c(FALSE, TRUE) ## Trend Plot for unmatched data ### Average forest cover in a pixel fig_trend_unm_fc_pix = ggplot(data = df.trend, aes(x = year, y = avgFC)) + geom_line(aes(group = group, color = as.character(group))) + geom_point(aes(color = as.character(group))) + geom_ribbon(aes(ymin = ciFC_low, ymax = ciFC_up, group = group, fill = as.character(group)), alpha = .1, show.legend = FALSE) + geom_vline(aes(xintercept=as.character(treatment.year), size=&quot;Treatment year&quot;), linetype=1, linewidth=0.5, color=&quot;orange&quot;) + geom_vline(aes(xintercept=as.character(funding.years), size=&quot;Funding year&quot;), linetype=2, linewidth=0.5, color=&quot;grey30&quot;) + scale_x_discrete(breaks=seq(2000,2020,5), labels=paste(seq(2000,2020,5))) + scale_color_hue(labels = c(&quot;Control&quot;, &quot;Treatment&quot;)) + facet_wrap(matched~., ncol = 2, #scales = &#39;free_x&#39;, labeller = labeller(matched = fct.labs)) + labs(title = &quot;Evolution of forest cover in a pixel on average (unmatched units)&quot;, subtitle = paste0(&quot;Protected area in &quot;, country.name, &quot;, WDPAID &quot;, wdpaid), caption = paste(&quot;Ribbons represent 95% confidence intervals.\\nThe protected area has a surface of&quot;, format(area_ha, big.mark = &quot;,&quot;), &quot;ha and pixels have a resolution of&quot;, res_ha, &quot;ha.&quot;), x = &quot;Year&quot;, y = &quot;Forest cover (ha)&quot;, color = &quot;Group&quot;) + theme_bw() + theme( axis.text.x = element_text(angle = -20, hjust = 0.5, vjust = 0.5), axis.text=element_text(size=11), axis.title=element_text(size=14), plot.caption = element_text(hjust = 0), #legend.position = &quot;bottom&quot;, legend.title = element_blank(), legend.text=element_text(size=14), #legend.spacing.x = unit(1.0, &#39;cm&#39;), legend.spacing.y = unit(0.75, &#39;cm&#39;), legend.key.size = unit(2, &#39;line&#39;), panel.grid.major.x = element_line(color = &#39;grey&#39;, linewidth = 0.3, linetype = 1), panel.grid.minor.x = element_line(color = &#39;grey&#39;, linewidth = 0.2, linetype = 2), panel.grid.major.y = element_line(color = &#39;grey&#39;, linewidth = 0.3, linetype = 1), panel.grid.minor.y = element_line(color = &#39;grey&#39;, linewidth = 0.2, linetype = 2), strip.text.x = element_text(size = 12) # Facet Label ) + guides(size = guide_legend(override.aes = list(color = c(&quot;grey30&quot;, &quot;orange&quot;)))) # Add legend for geom_vline ### Total forest cover fig_trend_unm_fc_tot = ggplot(data = df.trend, aes(x = year, y = avgFC_tot)) + geom_line(aes(group = group, color = as.character(group))) + geom_point(aes(color = as.character(group))) + geom_ribbon(aes(ymin = ciFC_tot_low, ymax = ciFC_tot_up, group = group, fill = as.character(group)), alpha = .1, show.legend = FALSE) + geom_vline(aes(xintercept=as.character(treatment.year), size=&quot;Treatment year&quot;), linetype=1, linewidth=0.5, color=&quot;orange&quot;) + geom_vline(aes(xintercept=as.character(funding.years), size=&quot;Funding year&quot;), linetype=2, linewidth=0.5, color=&quot;grey30&quot;) + scale_x_discrete(breaks=seq(2000,2020,5), labels=paste(seq(2000,2020,5))) + scale_color_hue(labels = c(&quot;Control&quot;, &quot;Treatment&quot;)) + facet_wrap(matched~., ncol = 2, #scales = &#39;free_x&#39;, labeller = labeller(matched = fct.labs)) + labs(title = &quot;Evolution of total forest cover (unmatched units)&quot;, subtitle = paste0(&quot;Protected area in &quot;, country.name, &quot;, WDPAID &quot;, wdpaid), caption = paste(&quot;Ribbons represent 95% confidence intervals. The protected area has a surface of&quot;, format(area_ha, big.mark = &quot;,&quot;), &quot;ha.\\nTotal forest cover is extrapolated from average pixel forest cover, multiplied by the number of pixel in the protected area.&quot;), x = &quot;Year&quot;, y = &quot;Forest cover (ha)&quot;, color = &quot;Group&quot;) + theme_bw() + theme( axis.text.x = element_text(angle = -20, hjust = 0.5, vjust = 0.5), axis.text=element_text(size=11), axis.title=element_text(size=14), plot.caption = element_text(hjust = 0), #legend.position = &quot;bottom&quot;, legend.title = element_blank(), legend.text=element_text(size=14), #legend.spacing.x = unit(1.0, &#39;cm&#39;), legend.spacing.y = unit(0.75, &#39;cm&#39;), legend.key.size = unit(2, &#39;line&#39;), panel.grid.major.x = element_line(color = &#39;grey&#39;, linewidth = 0.3, linetype = 1), panel.grid.minor.x = element_line(color = &#39;grey&#39;, linewidth = 0.2, linetype = 2), panel.grid.major.y = element_line(color = &#39;grey&#39;, linewidth = 0.3, linetype = 1), panel.grid.minor.y = element_line(color = &#39;grey&#39;, linewidth = 0.2, linetype = 2), strip.text.x = element_text(size = 12) # Facet Label ) + guides(size = guide_legend(override.aes = list(color = c(&quot;grey30&quot;, &quot;orange&quot;)))) # Add legend for geom_vline ### Cumulative deforestation relative to 2000 fig_trend_unm_defo = ggplot(data = df.trend, aes(x = year, y = avgFL_2000_cum)) + geom_line(aes(group = group, color = as.character(group))) + geom_point(aes(color = as.character(group))) + geom_ribbon(aes(ymin = ciFL_low, ymax = ciFL_up, group = group, fill = as.character(group)), alpha = .1, show.legend = FALSE) + geom_vline(aes(xintercept=as.character(treatment.year), size=&quot;Treatment year&quot;), linetype=1, linewidth=0.5, color=&quot;orange&quot;) + geom_vline(aes(xintercept=as.character(funding.years), size=&quot;Funding year&quot;), linetype=2, linewidth=0.5, color=&quot;grey30&quot;) + scale_x_discrete(breaks=seq(2000,2020,5), labels=paste(seq(2000,2020,5))) + scale_color_hue(labels = c(&quot;Control&quot;, &quot;Treatment&quot;)) + facet_wrap(matched~., ncol = 2, #scales = &#39;free_x&#39;, labeller = labeller(matched = fct.labs)) + labs(title = &quot;Cumulated deforestation relative to 2000 (unmatched units)&quot;, subtitle = paste0(&quot;Protected area in &quot;, country.name, &quot;, WDPAID &quot;, wdpaid), caption = paste(&quot;Ribbons represent 95% confidence intervals. The protected area has a surface of&quot;, format(area_ha, big.mark = &quot;,&quot;), &quot;ha.&quot;), x = &quot;Year&quot;, y = &quot;Forest loss relative to 2000 (%)&quot;, color = &quot;Group&quot;) + theme_bw() + theme( axis.text.x = element_text(angle = -20, hjust = 0.5, vjust = 0.5), axis.text=element_text(size=11), axis.title=element_text(size=14), plot.caption = element_text(hjust = 0), #legend.position = &quot;bottom&quot;, legend.title = element_blank(), legend.text=element_text(size=14), #legend.spacing.x = unit(1.0, &#39;cm&#39;), legend.spacing.y = unit(0.75, &#39;cm&#39;), legend.key.size = unit(2, &#39;line&#39;), panel.grid.major.x = element_line(color = &#39;grey&#39;, linewidth = 0.3, linetype = 1), panel.grid.minor.x = element_line(color = &#39;grey&#39;, linewidth = 0.2, linetype = 2), panel.grid.major.y = element_line(color = &#39;grey&#39;, linewidth = 0.3, linetype = 1), panel.grid.minor.y = element_line(color = &#39;grey&#39;, linewidth = 0.2, linetype = 2), strip.text.x = element_text(size = 12) # Facet Label ) + guides(size = guide_legend(override.aes = list(color = c(&quot;grey30&quot;, &quot;orange&quot;)))) # Add legend for geom_vline # Trend Plot for matched data ### Average forest cover in a pixel fig_trend_m_fc_pix = ggplot(data = df.matched.trend, aes(x = year, y = avgFC)) + geom_line(aes(group = group, color = as.character(group))) + geom_point(aes(color = as.character(group))) + geom_ribbon(aes(ymin = ciFC_low, ymax = ciFC_up, group = group, fill = as.character(group)), alpha = .1, show.legend = FALSE) + geom_vline(aes(xintercept=as.character(treatment.year), size=&quot;Treatment year&quot;), linetype=1, linewidth=0.5, color=&quot;orange&quot;) + geom_vline(aes(xintercept=as.character(funding.years), size=&quot;Funding year&quot;), linetype=2, linewidth=0.5, color=&quot;grey30&quot;) + scale_x_discrete(breaks=seq(2000,2020,5), labels=paste(seq(2000,2020,5))) + scale_color_hue(labels = c(&quot;Control&quot;, &quot;Treatment&quot;)) + labs(title = &quot;Evolution of forest cover in a pixel on average (matched units)&quot;, subtitle = paste0(&quot;Protected area in &quot;, country.name, &quot;, WDPAID &quot;, wdpaid), caption = paste(&quot;Ribbons represent 95% confidence intervals.\\nThe protected area has a surface of&quot;, format(area_ha, big.mark = &quot;,&quot;), &quot;ha and pixels have a resolution of&quot;, res_ha, &quot;ha.&quot;), x = &quot;Year&quot;, y = &quot;Forest cover (ha)&quot;, color = &quot;Group&quot;) + theme_bw() + theme( axis.text.x = element_text(angle = -20, hjust = 0.5, vjust = 0.5), axis.text=element_text(size=11), axis.title=element_text(size=14), plot.caption = element_text(hjust = 0), #legend.position = &quot;bottom&quot;, legend.title = element_blank(), legend.text=element_text(size=14), #legend.spacing.x = unit(1.0, &#39;cm&#39;), legend.spacing.y = unit(0.75, &#39;cm&#39;), legend.key.size = unit(2, &#39;line&#39;), panel.grid.major.x = element_line(color = &#39;grey&#39;, linewidth = 0.3, linetype = 1), panel.grid.minor.x = element_line(color = &#39;grey&#39;, linewidth = 0.2, linetype = 2), panel.grid.major.y = element_line(color = &#39;grey&#39;, linewidth = 0.3, linetype = 1), panel.grid.minor.y = element_line(color = &#39;grey&#39;, linewidth = 0.2, linetype = 2), strip.text.x = element_text(size = 12) # Facet Label ) + guides(size = guide_legend(override.aes = list(color = c(&quot;grey30&quot;, &quot;orange&quot;)))) # Add legend for geom_vline ### Total forest cover fig_trend_m_fc_tot = ggplot(data = df.matched.trend, aes(x = year, y = avgFC_tot)) + geom_line(aes(group = group, color = as.character(group))) + geom_point(aes(color = as.character(group))) + geom_ribbon(aes(ymin = ciFC_tot_low, ymax = ciFC_tot_up, group = group, fill = as.character(group)), alpha = .1, show.legend = FALSE) + geom_vline(aes(xintercept=as.character(treatment.year), size=&quot;Treatment year&quot;), linetype=1, linewidth=0.5, color=&quot;orange&quot;) + geom_vline(aes(xintercept=as.character(funding.years), size=&quot;Funding year&quot;), linetype=2, linewidth=0.5, color=&quot;grey30&quot;) + scale_x_discrete(breaks=seq(2000,2020,5), labels=paste(seq(2000,2020,5))) + scale_color_hue(labels = c(&quot;Control&quot;, &quot;Treatment&quot;)) + labs(title = &quot;Evolution of total forest cover (matched units)&quot;, subtitle = paste0(&quot;Protected area in &quot;, country.name, &quot;, WDPAID &quot;, wdpaid), caption = paste(&quot;Ribbons represent 95% confidence intervals. The protected area has a surface of&quot;, format(area_ha, big.mark = &quot;,&quot;), &quot;ha.\\nTotal forest cover is extrapolated from average pixel forest cover, multiplied by the number of pixel in the protected area.&quot;), x = &quot;Year&quot;, y = &quot;Total forest cover (ha)&quot;, color = &quot;Group&quot;) + theme_bw() + theme( axis.text.x = element_text(angle = -20, hjust = 0.5, vjust = 0.5), axis.text=element_text(size=11), axis.title=element_text(size=14), plot.caption = element_text(hjust = 0), #legend.position = &quot;bottom&quot;, legend.title = element_blank(), legend.text=element_text(size=14), #legend.spacing.x = unit(1.0, &#39;cm&#39;), legend.spacing.y = unit(0.75, &#39;cm&#39;), legend.key.size = unit(2, &#39;line&#39;), panel.grid.major.x = element_line(color = &#39;grey&#39;, linewidth = 0.3, linetype = 1), panel.grid.minor.x = element_line(color = &#39;grey&#39;, linewidth = 0.2, linetype = 2), panel.grid.major.y = element_line(color = &#39;grey&#39;, linewidth = 0.3, linetype = 1), panel.grid.minor.y = element_line(color = &#39;grey&#39;, linewidth = 0.2, linetype = 2), strip.text.x = element_text(size = 12) # Facet Label ) + guides(size = guide_legend(override.aes = list(color = c(&quot;grey30&quot;, &quot;orange&quot;)))) # Add legend for geom_vline ### Cumulative deforestation relative to 2000 fig_trend_m_defo = ggplot(data = df.matched.trend, aes(x = year, y = avgFL_2000_cum)) + geom_line(aes(group = group, color = as.character(group))) + geom_point(aes(color = as.character(group))) + geom_ribbon(aes(ymin = ciFL_low, ymax = ciFL_up, group = group, fill = as.character(group)), alpha = .1, show.legend = FALSE) + geom_vline(aes(xintercept=as.character(treatment.year), size=&quot;Treatment year&quot;), linetype=1, linewidth=0.5, color=&quot;orange&quot;) + geom_vline(aes(xintercept=as.character(funding.years), size=&quot;Funding year&quot;), linetype=2, linewidth=0.5, color=&quot;grey30&quot;) + scale_x_discrete(breaks=seq(2000,2020,5), labels=paste(seq(2000,2020,5))) + scale_color_hue(labels = c(&quot;Control&quot;, &quot;Treatment&quot;)) + labs(title = &quot;Cumulated deforestation relative to 2000 (matched units)&quot;, subtitle = paste0(&quot;Protected area in &quot;, country.name, &quot;, WDPAID &quot;, wdpaid), caption = paste(&quot;Ribbons represent 95% confidence intervals. The protected area has a surface of&quot;, format(area_ha, big.mark = &quot;,&quot;), &quot;ha.&quot;), x = &quot;Year&quot;, y = &quot;Forest loss relative to 2000 (%)&quot;, color = &quot;Group&quot;) + theme_bw() + theme( axis.text.x = element_text(angle = -20, hjust = 0.5, vjust = 0.5), axis.text=element_text(size=11), axis.title=element_text(size=14), plot.caption = element_text(hjust = 0), #legend.position = &quot;bottom&quot;, legend.title = element_blank(), legend.text=element_text(size=14), #legend.spacing.x = unit(1.0, &#39;cm&#39;), legend.spacing.y = unit(0.75, &#39;cm&#39;), legend.key.size = unit(2, &#39;line&#39;), panel.grid.major.x = element_line(color = &#39;grey&#39;, linewidth = 0.3, linetype = 1), panel.grid.minor.x = element_line(color = &#39;grey&#39;, linewidth = 0.2, linetype = 2), panel.grid.major.y = element_line(color = &#39;grey&#39;, linewidth = 0.3, linetype = 1), panel.grid.minor.y = element_line(color = &#39;grey&#39;, linewidth = 0.2, linetype = 2), strip.text.x = element_text(size = 12) # Facet Label ) + guides(size = guide_legend(override.aes = list(color = c(&quot;grey30&quot;, &quot;orange&quot;)))) # Add legend for geom_vline ##Saving plots tmp = paste(tempdir(), &quot;fig&quot;, sep = &quot;/&quot;) ggsave(paste(tmp, paste0(&quot;fig_trend_unmatched_avgFC_&quot;, iso, &quot;_&quot;, wdpaid, &quot;.png&quot;), sep = &quot;/&quot;), plot = fig_trend_unm_fc_pix, device = &quot;png&quot;, height = 6, width = 9) ggsave(paste(tmp, paste0(&quot;fig_trend_matched_avgFC_&quot;, iso, &quot;_&quot;, wdpaid, &quot;.png&quot;), sep = &quot;/&quot;), plot = fig_trend_m_fc_pix, device = &quot;png&quot;, height = 6, width = 9) ggsave(paste(tmp, paste0(&quot;fig_trend_unmatched_avgFC_tot_&quot;, iso, &quot;_&quot;, wdpaid, &quot;.png&quot;), sep = &quot;/&quot;), plot = fig_trend_unm_fc_tot, device = &quot;png&quot;, height = 6, width = 9) ggsave(paste(tmp, paste0(&quot;fig_trend_matched_avgFC_tot_&quot;, iso, &quot;_&quot;, wdpaid, &quot;.png&quot;), sep = &quot;/&quot;), plot = fig_trend_m_fc_tot, device = &quot;png&quot;, height = 6, width = 9) ggsave(paste(tmp, paste0(&quot;fig_trend_unmatched_avgFL_cum_2000_&quot;, iso, &quot;_&quot;, wdpaid, &quot;.png&quot;), sep = &quot;/&quot;), plot = fig_trend_unm_defo, device = &quot;png&quot;, height = 6, width = 9) ggsave(paste(tmp, paste0(&quot;fig_trend_matched_avgFL_cum_2000_&quot;, iso, &quot;_&quot;, wdpaid, &quot;.png&quot;), sep = &quot;/&quot;), plot = fig_trend_m_defo, device = &quot;png&quot;, height = 6, width = 9) files &lt;- list.files(tmp, full.names = TRUE) ##Add each file in the bucket (same foler for every file in the temp) for(f in files) { cat(&quot;Uploading file&quot;, paste0(&quot;&#39;&quot;, f, &quot;&#39;&quot;), &quot;\\n&quot;) aws.s3::put_object(file = f, bucket = paste(&quot;projet-afd-eva-ap&quot;, save_dir, iso, wdpaid, sep = &quot;/&quot;), region = &quot;&quot;, show_progress = TRUE) } do.call(file.remove, list(list.files(tmp, full.names = TRUE))) #Append the log cat(&quot;#Plot matched and unmatched trends\\n-&gt; OK\\n\\n&quot;, file = log, append = TRUE) return(list(&quot;is_ok&quot; = TRUE)) }, error=function(e) { print(e) cat(paste(&quot;#Plot matched and unmatched trends\\n-&gt; Error :\\n&quot;, e, &quot;\\n\\n&quot;), file = log, append = TRUE) return(list(&quot;is_ok&quot; = FALSE)) } # warning = function(w) # { # #Print the warning and append the log # print(w) # #Append the log # cat(paste(&quot;#Plot matched and unmatched trends\\n-&gt; Warning :\\n&quot;, w, &quot;\\n&quot;), file = log, append = TRUE) # #Return string to inform user to skip # return(list(&quot;is_ok&quot; = TRUE)) # } ) return(output) } # Plot the country grid with matched control and treated, for a given protected area (PA) or all protected areas in a country ##INPUTS ### iso : the ISO3 code of the country considered ### wdpaid : the WDPA ID of the PA considered ### is_pa : logical, whether the plotted grid is for a unique PA or all the PAs in the country considered ### df_pix_matched : dataframe with ID of matched pixels (ID from mapme.biodiversity portfolio) ### path_tmp : temporary folder to store figures ### log : a log file to track progress of the processing ### save_dir : saving directory ##OUTPUTS ### is_ok : a boolean indicating whether or not an error occured inside the function ##DATA SAVED ### Country grid with matched control and treated, for a given protected area (PA) or all protected areas in a country fn_post_plot_grid = function(iso, wdpaid, is_pa, df_pix_matched, path_tmp, log, save_dir) { output = tryCatch( { #Import dataframe where each pixel in the grid has both its grid ID and asset ID from the portfolio creation df_gridID_assetID = s3read_using(data.table::fread, object = paste0(save_dir, &quot;/&quot;, iso, &quot;/&quot;, paste0(&quot;df_gridID_assetID_&quot;, iso, &quot;.csv&quot;)), bucket = &quot;projet-afd-eva-ap&quot;, opts = list(&quot;region&quot; = &quot;&quot;)) #Importing the gridding of the country (funded and analyzed PAs, funded not analyzed PAs, non-funded PAs, buffer, control) #Merge with a dataframe so that each pixel in the grid has both its grid ID and asset ID from the portfolio creation #Merge with matched pixels dataframe grid = s3read_using(sf::read_sf, object = paste0(save_dir, &quot;/&quot;, iso, &quot;/&quot;, paste0(&quot;grid_param_&quot;, iso, &quot;.gpkg&quot;)), bucket = &quot;projet-afd-eva-ap&quot;, opts = list(&quot;region&quot; = &quot;&quot;)) %&gt;% left_join(df_gridID_assetID, by = &quot;gridID&quot;) %&gt;% left_join(df_pix_matched, by = &quot;assetid&quot;) %&gt;% mutate(group_plot = case_when(group_matched == 1 ~ &quot;Control (matched)&quot;, group_matched == 2 ~ &quot;Treatment (matched)&quot;, TRUE ~ group_name)) #Extract country name country.name = grid %&gt;% filter(group == 2) %&gt;% slice(1) country.name = country.name$country_en # Visualize and save grouped grid cells fig_grid = ggplot(grid) + #The original gridding as a first layer geom_sf(aes(fill = as.factor(group_plot)), color = NA) + scale_fill_brewer(name = &quot;Group&quot;, type = &quot;qual&quot;, palette = &quot;BrBG&quot;, direction = 1) + labs(title = paste(&quot;Gridding of&quot;, country.name, &quot;: matched units&quot;), subtitle = ifelse(is_pa == TRUE, yes = paste(&quot;Focus on WDPAID&quot;, wdpaid), no = &quot;All protected areas analyzed&quot;)) + theme_bw() fig_save = ifelse(is_pa == TRUE, yes = paste0(path_tmp, &quot;/fig_grid_group_&quot;, iso, &quot;_matched_&quot;, wdpaid, &quot;.png&quot;), no = paste0(path_tmp, &quot;/fig_grid_group_&quot;, iso, &quot;_matched_all&quot;, &quot;.png&quot;)) ggsave(fig_save, plot = fig_grid, device = &quot;png&quot;, height = 6, width = 9) aws.s3::put_object(file = fig_save, bucket = ifelse(is_pa == TRUE, yes = paste(&quot;projet-afd-eva-ap&quot;, save_dir, iso, wdpaid, sep = &quot;/&quot;), no = paste(&quot;projet-afd-eva-ap&quot;, save_dir, iso, sep = &quot;/&quot;)), region = &quot;&quot;, show_progress = FALSE) #Append the log if(is_pa == TRUE) { cat(&quot;#Plot the grid with matched control and treated for the PA \\n-&gt; OK\\n&quot;, file = log, append = TRUE) } else cat(&quot;#Plot the grid with matched control and treated for all PAs in the country \\n-&gt; OK\\n&quot;, file = log, append = TRUE) return(list(&quot;is_ok&quot; = TRUE)) }, error = function(e) { print(e) if(is_pa == TRUE) { cat(paste(&quot;#Plot the grid with matched control and treated for the PA \\n-&gt; Error :\\n&quot;, e, &quot;\\n&quot;), file = log, append = TRUE) } else cat(paste(&quot;#Plot the grid with matched control and treated for all the PAs in the country \\n-&gt; Error :\\n&quot;, e, &quot;\\n&quot;), file = log, append = TRUE) return(list(&quot;is_ok&quot; = FALSE)) } # warning = function(w) # { # #Print the warning and append the log # print(w) # if(is_pa == TRUE) # { # cat(paste(&quot;#Plot the grid with matched control and treated for the PA \\n-&gt; Warning :\\n&quot;, w, &quot;\\n&quot;), file = log, append = TRUE) # } else cat(paste(&quot;#Plot the grid with matched control and treated for all the PAs in the country \\n-&gt; Warning :\\n&quot;, w, &quot;\\n&quot;), file = log, append = TRUE) # return(list(&quot;is_ok&quot; = TRUE)) # } ) return(output) } "],["functions-for-difference-in-difference-computations.html", "B Functions for difference-in-difference computations", " B Functions for difference-in-difference computations ##### #Functions to perform difference-in-difference and plot results ##### #For each function, the aim of the function, inputs, outputs, data saved and notes are detailed. This takes the following form : #Aim of the function ##INPUTS : the arguments needed in the function ###INPUT 1 to N ##OUTPUTS : the information returned by the function (data frames, numeric, characters, etc.) and necessary to pursue to processing ### OUTPUT 1 to N ##DATA SAVED : information put in the storage but not necessarily need to pursue the processing (figures, tables, data frames, etc.) ### ... ##NOTES : any useful remark ### ... #Remarks : ##most functions are adapted for errors handling using base::withCallingHandlers(). Basically, the computation steps are declared in a block of withCallingHandlers function, while two other blocks specify what to do in case the first block face a warning or error. In our case, errors led to return a boolean indicating an error has occured and append the log with the error message. Warnings return a boolean but do not block the iteration. They also edit the log with the warning message. ##PA is used for &quot;protected area(s)&quot;. ##To save plots and tables : save on temporary folder in the R session then put the saved object in the storage. Indeed print() and ggplot::ggsave() cannot write directly on s3 storage ### #Load the list of PA matched during the matchign process ##INPUTS : ### iso : the ISO code of the country considered ##OUTPUTS : ### list_pa : a dataframe with the PA matched ### is_ok : a boolean indicating whether or not an error occured inside the function fn_did_list_pa = function(iso, load_dir) { output = tryCatch( { list_pa = s3read_using(data.table::fread, bucket = &quot;projet-afd-eva-ap&quot;, object = paste(load_dir, iso, paste0(&quot;list_pa_matched_&quot;, iso, &quot;.csv&quot;), sep = &quot;/&quot;), opts = list(&quot;region&quot; = &quot;&quot;)) list_pa = unique(list_pa$wdpaid) return(list(&quot;list_pa&quot; = list_pa, &quot;is_ok&quot; = TRUE)) }, error = function(e) { print(e) #cat(paste(&quot;Error in loading the list of protected areas :\\n&quot;, e, &quot;\\n&quot;), file = log, append = TRUE) print(paste(&quot;Error in loading the list of protected areas :\\n&quot;, e, &quot;\\n&quot;)) return(list(&quot;is_ok&quot; = FALSE)) } ) return(output) } #For a protected area, compute annual deforestation rates à la Wolf et al. 2021, before and after treatment ## INPUTS ### iso : the iso3 code for the country considered ### wdpaid : the WDPAID of the PA considered ### alpha : the margin of error to define confidence interval ### load_dir : a path to load matching frame ### ext_output : the output extension ## OUTPUTS ### df_fl_annual_wolf : a dataframe with statistics on annual deforestation in matched treated and control units, computed à la Wolf et al. 2021 ### is_ok : a boolean indicating whether or not an error occured inside the function fn_fl_wolf = function(iso, wdpaid, alpha, load_dir, ext_input) { output = tryCatch( { #Import matched units df_long = s3read_using(data.table::fread, object = paste0(load_dir, &quot;/&quot;, iso, &quot;/&quot;, wdpaid, &quot;/&quot;, paste0(&quot;matched_long&quot;, &quot;_&quot;, iso, &quot;_&quot;, wdpaid, ext_input)), bucket = &quot;projet-afd-eva-ap&quot;, opts = list(&quot;region&quot; = &quot;&quot;)) %&gt;% dplyr::select(c(region, iso3, wdpaid, group, assetid, status_yr, year_funding_first, year_funding_all, res_m, year, var, fc_ha)) #select(c(region, country_en, iso3, wdpaid, group, status_yr, year_funding_first, year_funding_all, year, var, fc_ha)) ##Extract country iso country.iso = df_long %&gt;% filter(group == 2) %&gt;% slice(1) country.iso = country.iso$iso3 ##Extract region name region.name = df_long %&gt;% filter(group == 2) %&gt;% slice(1) region.name = region.name$region #Compute annual deforestation rates à la Wolf et al. 2021 before and after treatment for treated, and for all the period for controls. This is averaged across pixels. df_fl_annual_wolf = df_long %&gt;% mutate(treatment_year = case_when(group == 1 ~0, group == 2 ~status_yr), #Set treatment year to 0 for control units (required by did::att_gt) time = ifelse(group == 2, yes = year-treatment_year, no = NA), .after = status_yr) %&gt;% group_by(assetid) %&gt;% # mutate(FL_2000_cum = (fc_ha-fc_ha[year == 2000])/fc_ha[year == 2000]*100, # fc_2000 = fc_ha[year == 2000]) %&gt;% mutate(FL_annual_wolf_pre = ifelse(group == 2, yes = ((fc_ha[time == -1]/fc_ha[year == 2000])^(1/(year[time == -1] - 2000))-1)*100, no = NA), FL_annual_wolf_post = ifelse(group == 2, yes = ((fc_ha[time == max(time)]/fc_ha[time == 0])^(1/max(time))-1)*100, no = NA), FL_annual_wolf_tot = ((fc_ha[year == 2021]/fc_ha[year == 2000])^(1/(2021-2000))-1)*100) %&gt;% slice(1) %&gt;% ungroup() %&gt;% group_by(group) %&gt;% summarize(avgFL_annual_wolf_pre = mean(FL_annual_wolf_pre, na.rm = TRUE), avgFL_annual_wolf_post = mean(FL_annual_wolf_post, na.rm = TRUE), avgFL_annual_wolf_tot = mean(FL_annual_wolf_tot, na.rm = TRUE), medFL_annual_wolf_pre = median(FL_annual_wolf_pre, na.rm = TRUE), medFL_annual_wolf_post = median(FL_annual_wolf_post, na.rm = TRUE), medFL_annual_wolf_tot = median(FL_annual_wolf_tot, na.rm = TRUE), sdFL_annual_wolf_pre = sd(FL_annual_wolf_pre, na.rm = TRUE), sdFL_annual_wolf_post = sd(FL_annual_wolf_post, na.rm = TRUE), sdFL_annual_wolf_tot = sd(FL_annual_wolf_tot, na.rm = TRUE)) %&gt;% ungroup() %&gt;% mutate(region = region.name, iso3 = country.iso, wdpaid = wdpaid, .before = &quot;group&quot;) %&gt;% mutate(group = case_when(group == 1 ~ &quot;Control&quot;, group == 2 ~ &quot;Treated&quot;)) return(list(&quot;df_fl_annual_wolf&quot; = df_fl_annual_wolf, &quot;is_ok&quot; = TRUE)) }, error = function(e) { print(e) #cat(paste(&quot;Error while computing annual deforestation à la Wolf et al. 2021 :\\n&quot;, e, &quot;\\n&quot;), file = log, append = TRUE) print(paste(&quot;Error while annual deforestation à la Wolf et al. 2021 :\\n&quot;, e, &quot;\\n&quot;)) return(list(&quot;is_ok&quot; = FALSE)) } ) } #Compute the treatment effect for a given protected area that is supported by the AFD. This function specifically includes information related to funding we obtain from AFD internal services. ## INPUTS : ### iso : the iso3 code for the country considered ### wdpaid : the WDPAID of the PA considered ### data_pa : dataset with information on protected areas, and especially their surfaces ### data_fund : information on funding from AFD internal datasets, on AFD funded projects related to protected areas. ### data_report : list of projects related to protected areas in AFD, reported by technical departments ### alpha : the threshold for confidence interval ### is_m : boolean stating whether we compute treatment effects from matched (TRUE) or unmatched treated and control units (FALSE) ### save_dir : the saving directory in the remote storage ### load_dir : the loading directory in the remote storage ### ext_input : the extension of input dataframe ## OUTPUTS : ### df_fc_attgt : treatment effect computed for the protected area considered, expressed in avoided deforestation (hectare) ### df_fl_attgt : treatment effect computed for the protected area considered, expressed in change of deforestation rate ### is_ok : a boolean indicating whether or not an error occured inside the function ## DATA SAVED : ### Dynamic treatment effects : avoided deforestation in an average pixel (in ha), avoided deforestation relative to 2000 forest cover, avoided deforestation extrapolated to the entire protected area (in ha), change in deforestation rate (in percentage points) fn_did_att_afd = function(iso, wdpaid, data_pa, data_fund, data_report, alpha, is_m, load_dir, ext_input, save_dir) { output = tryCatch( { #Loading matched and unmatched datasets df_long_m = s3read_using(data.table::fread, object = paste0(load_dir, &quot;/&quot;, iso, &quot;/&quot;, wdpaid, &quot;/&quot;, paste0(&quot;matched_long&quot;, &quot;_&quot;, iso, &quot;_&quot;, wdpaid, ext_input)), bucket = &quot;projet-afd-eva-ap&quot;, opts = list(&quot;region&quot; = &quot;&quot;)) %&gt;% dplyr::select(c(region, iso3, wdpaid, group, assetid, status_yr, year_funding_first, year_funding_all, res_m, year, var, fc_ha)) #dplyr::select(c(region, country_en, iso3, wdpaid, group, status_yr, year_funding_first, year_funding_all, year, var, fc_ha)) df_long_unm = s3read_using(data.table::fread, object = paste0(load_dir, &quot;/&quot;, iso, &quot;/&quot;, wdpaid, &quot;/&quot;, paste0(&quot;unmatched_long&quot;, &quot;_&quot;, iso, &quot;_&quot;, wdpaid, ext_input)), bucket = &quot;projet-afd-eva-ap&quot;, opts = list(&quot;region&quot; = &quot;&quot;)) %&gt;% dplyr::select(c(region, iso3, wdpaid, group, assetid, status_yr, year_funding_first, year_funding_all, year, res_m, var, fc_ha)) #dplyr::select(c(region, country_en, iso3, wdpaid, group, status_yr, year_funding_first, year_funding_all, year, var, fc_ha)) # Define the working datasets depending on the is_m value if(is_m == TRUE) { df_long = df_long_m } else{df_long = df_long_unm } #Extract some relevant variables for later plots and treatment effect computations ##Extract spatial resolution of pixels res_m and define pixel area in ha res_m = unique(df_long$res_m) res_ha = res_m^2*1e-4 ##Extract treatment year treatment.year = df_long %&gt;% filter(group == 2) %&gt;% slice(1) treatment.year = treatment.year$status_yr ##Extract funding years df_fund_yr = df_long %&gt;% filter(group == 2) %&gt;% slice(1) funding.years = df_fund_yr$year_funding_first list.funding.years = df_fund_yr$year_funding_all ##Extract country name # country.name = df_long %&gt;% # filter(group == 2) %&gt;% # slice(1) # country.name = country.name$country_en ##Extract country iso country.iso = df_long %&gt;% filter(group == 2) %&gt;% slice(1) country.iso = country.iso$iso3 ##Extract region name region.name = df_long %&gt;% filter(group == 2) %&gt;% slice(1) region.name = region.name$region ##Extract more information not in the matched dataframe ### Area wdpa_id = wdpaid #Need to give a name to wdpaid (function argument) different from the varaible in the dataset (wdpaid) area_ha = data_pa[data_pa$wdpaid == wdpa_id,]$area_km2*100 ### Name of the PA pa.name = data_pa %&gt;% filter(wdpaid == wdpa_id) %&gt;% slice(1) pa.name = pa.name$name_pa ### Country name country.name = data_pa %&gt;% filter(wdpaid == wdpa_id) %&gt;% slice(1) country.name = country.name$country_en ### AFD project ID # id.project = data_pa %&gt;% # filter(wdpaid == wdpa_id) %&gt;% # slice(1) # id.project = id.project$id_projet ### WDPA status status.wdpa = data_pa %&gt;% filter(wdpaid == wdpa_id) %&gt;% slice(1) status.wdpa = status.wdpa$status ### IUCN category and description iucn.wdpa = data_pa %&gt;% filter(wdpaid == wdpa_id) %&gt;% slice(1) iucn.cat = iucn.wdpa$iucn_cat iucn.des = iucn.wdpa$iucn_des_en ### Ecosystem eco.wdpa = data_pa %&gt;% filter(wdpaid == wdpa_id) %&gt;% slice(1) eco.wdpa = eco.wdpa$marine ### Governance gov.wdpa = data_pa %&gt;% filter(wdpaid == wdpa_id) %&gt;% slice(1) gov.wdpa = gov.wdpa$gov_type ### Owner own.wdpa = data_pa %&gt;% filter(wdpaid == wdpa_id) %&gt;% slice(1) own.wdpa = own.wdpa$own_type ## Extract information on funding ### Type of funding fund.type = data_fund %&gt;% filter(id_projet == id.project) %&gt;% slice(1) fund.type = fund.type$libelle_produit ### Cofunders cofund = data_fund %&gt;% filter(id_projet == id.project) %&gt;% slice(1) cofund = cofund$cofinanciers ### KfW ? kfw = data_fund %&gt;% filter(id_projet == id.project) %&gt;% slice(1) kfw = kfw$kfw ### FFEM ? ffem = data_fund %&gt;% filter(id_projet == id.project) %&gt;% slice(1) ffem = ffem$ffem ## Extract reporting department reporter = data_report %&gt;% filter(wdpaid == wdpa_id &amp; id_projet == id.project &amp; nom_ap == pa.name) %&gt;% slice(1) reporter = reporter$auteur_entree #Extract number of pixels in the PA #n_pix_pa = length(unique(filter(df_long_unm, group == 2)$assetid)) n_pix_pa = area_ha/res_ha #Average forest cover in a treated pixel in 2000 ## For matched avgFC_2000_m = df_long_m %&gt;% filter(group == 2 &amp; year == 2000) avgFC_2000_m = mean(avgFC_2000_m$fc_ha, na.rm = TRUE) ## For unmatched avgFC_2000_unm = df_long_unm %&gt;% filter(group == 2 &amp; year == 2000) avgFC_2000_unm = mean(avgFC_2000_unm$fc_ha, na.rm = TRUE) #Then modify the dataframe before difference-in-difference computations ## Set treatment year = 0 for controls (necessary for did package to consider &quot;never treated&quot; units) ## Compute cumulative deforestation relative to 2000 forest cover (outcome where TE is computed) df_did = df_long %&gt;% mutate(treatment_year = case_when(group == 1 ~0, group == 2 ~status_yr), #Set treatment year to 0 for control units (required by did::att_gt) time = ifelse(group == 2, yes = year-treatment_year, no = NA), .after = status_yr) %&gt;% group_by(assetid) %&gt;% # mutate(FL_2000_cum = (fc_ha-fc_ha[year == 2000])/fc_ha[year == 2000]*100, # fc_2000 = fc_ha[year == 2000]) %&gt;% mutate(FL_2000_cum = case_when(fc_ha[year == 2000] &gt; 0 ~ (fc_ha-fc_ha[year == 2000])/fc_ha[year == 2000]*100, TRUE ~ NA)) %&gt;% ungroup() ##Average forest cover in 2000 in a pixel, and average share of forest cover in a pixel # fc_2000_avg = mean(df_did[df_did$group == 2,]$fc_2000, na.rm = TRUE) # per_fc_2000_avg = min(fc_2000_avg/res_ha, 1) #Take the min as in some cases, reported forest cover is higher than pixel area #Compute dynamic treatment effect with did package. ## Control are &quot;never treated&quot; units, no covariate is added in the regression estimated with doubly-robust method ## standard errors are computed with bootstrap, and confidence intervals computed from it. ## No clustering is performed as it does not seem relevant in our case (https://blogs.worldbank.org/impactevaluations/when-should-you-cluster-standard-errors-new-wisdom-econometrics-oracle) ## Pseudo treatment effects are computed for each pre-treatment year (varying base period) ##For forest cover (ha and %) ### treatment effect computation fc_attgt = did::att_gt(yname = &quot;fc_ha&quot;, gname = &quot;treatment_year&quot;, idname = &quot;assetid&quot;, tname = &quot;year&quot;, control_group = &quot;nevertreated&quot;, #Thsi corresponds to control pixels as defined in the matching , with treatment year set to 0 xformla = ~1, alp = alpha, #For 95% confidence interval allow_unbalanced_panel = TRUE, #Ensure no unit is dropped, though every pixel should have data for all years in the period bstrap=TRUE, #Compute bootstrap CI biters = 1000, #The number of bootstrap iteration, 1000 is default cband = TRUE, #Compute CI clustervars = NULL, #No clustering seems relevant to me base_period = &quot;varying&quot;, data = df_did, print_details = F) ##For change in deforestation rate (percentage points) ### treatment effect computation fl_attgt = did::att_gt(yname = &quot;FL_2000_cum&quot;, gname = &quot;treatment_year&quot;, idname = &quot;assetid&quot;, tname = &quot;year&quot;, control_group = &quot;nevertreated&quot;, #Thsi corresponds to control pixels as defined in the matching , with treatment year set to 0 xformla = ~1, alp = alpha, #For 95% confidence interval allow_unbalanced_panel = TRUE, #Ensure no unit is dropped, though every pixel should have data for all years in the period bstrap=TRUE, #Compute bootstrap CI biters = 1000, #The number of bootstrap iteration, 1000 is default cband = TRUE, #Compute CI clustervars = NULL, #No clustering seems relevant to me base_period = &quot;varying&quot;, data = df_did, print_details = F) ### Report results in a dataframe ### The computed is at pixel level ### This treatment effect is aggregated to protected area by multiplying treatment effect by the number of pixel in the PA. It is also expressed in percentage of pixel area (avoided deforestation in share of pixel area) ### confidence intervals (at pixel level) are computed from bootstrap standard errors after a coefficient is applied. ### This computation takes the one from did:::summary.MP function, line 15 and 16. ### They are multiplied by the number of pixels to compute confidence intervals for treatment effect at protected area level ### They are divided by the pixel area to compute CI for treatment effect in percentage of pixel area df_fc_attgt = data.frame(&quot;treatment_year&quot; = fc_attgt$group, &quot;year&quot; = fc_attgt$t, &quot;att_pix&quot; = fc_attgt$att, &quot;c&quot; = fc_attgt$c, &quot;se&quot; = fc_attgt$se, &quot;n&quot; = fc_attgt$n) %&gt;% #Compute treatment effect at PA level and in share of pixel area ## att_pa : the total avoided deforestation is the avoided deforestation in ha in a given pixel, multiplied by the number of pixel in the PA. ## att_per : avoided deforestation in a pixel, as a share of average forest cover in 2000 in matched treated. Can be extrapolated to full PA in principle (avoided deforestation in share of 2000 forest cover) mutate(att_pa = att_pix*n_pix_pa, att_per = att_pix/avgFC_2000_m*100) %&gt;% #Compute time relative to treatment year mutate(time = year - treatment_year, .before = year) %&gt;% #Compute confidence intervals mutate(cband_lower_pix = round(att_pix-c*se, 4), cband_upper_pix = round(att_pix+c*se, 4), cband_lower_pa = cband_lower_pix*n_pix_pa, cband_upper_pa = cband_upper_pix*n_pix_pa, cband_lower_per = cband_lower_pix/avgFC_2000_m*100, cband_upper_per = cband_upper_pix/avgFC_2000_m*100, sig = sign(cband_lower_pix) == sign(cband_upper_pix), sig_5 = ifelse(max(time) &gt;=5, yes = sig[time == 5] == TRUE, no = NA), sig_10 = ifelse(max(time) &gt;= 10, yes = sig[time == 10] == TRUE, no = NA), sig_end = sig[time == max(time)] == TRUE, alpha = alpha) %&gt;% #Add relevant information mutate(region = region.name, country_en = country.name, iso3 = country.iso, name_pa = pa.name, wdpaid = wdpaid, res_ha = res_ha, id_projet = id.project, status_wdpa = status.wdpa, iucn_cat = iucn.cat, iucn_des_en = iucn.des, gov_type = gov.wdpa, own_type = own.wdpa, marine = eco.wdpa, cofund = cofund, kfw = kfw, ffem = ffem, fund_type = fund.type, dept_report = reporter, funding_year = funding.years, funding_year_list = list.funding.years, .before = &quot;treatment_year&quot;) # Same for change in deforestation rate df_fl_attgt = data.frame(&quot;treatment_year&quot; = fl_attgt$group, &quot;year&quot; = fl_attgt$t, &quot;att&quot; = fl_attgt$att, &quot;c&quot; = fl_attgt$c, &quot;se&quot; = fl_attgt$se, &quot;n&quot; = fl_attgt$n) %&gt;% #Compute time relative to treatment year mutate(time = year - treatment_year, .before = year) %&gt;% mutate(cband_lower = round(att-c*se, 4), cband_upper = round(att+c*se, 4), sig = sign(cband_lower) == sign(cband_upper), sig_5 = ifelse(max(time) &gt;=5, yes = sig[time == 5] == TRUE, no = NA), sig_10 = ifelse(max(time) &gt;= 10, yes = sig[time == 10] == TRUE, no = NA), sig_end = sig[time == max(time)] == TRUE, alpha = alpha) %&gt;% #Compute time relative to treatment year mutate(time = year - treatment_year, .before = year) %&gt;% #Add relevant information mutate(region = region.name, country_en = country.name, iso3 = country.iso, name_pa = pa.name, wdpaid = wdpaid, res_ha = res_ha, id_projet = id.project, status_wdpa = status.wdpa, iucn_cat = iucn.cat, iucn_des_en = iucn.des, gov_type = gov.wdpa, own_type = own.wdpa, marine = eco.wdpa, cofund = cofund, kfw = kfw, ffem = ffem, fund_type = fund.type, dept_report = reporter, funding_year = funding.years, funding_year_list = list.funding.years, .before = &quot;treatment_year&quot;) ###Plot results ## treatment effect : avoided deforestation at pixel level (in ha) fig_att_pix = ggplot(data = df_fc_attgt, aes(x = time, y = att_pix)) %&gt;% + geom_line(color = &quot;#08519C&quot;) %&gt;% + geom_point(color = &quot;#08519C&quot;) %&gt;% + geom_ribbon(aes(ymin = cband_lower_pix, ymax = cband_upper_pix), alpha=0.1, fill = &quot;#FB6A4A&quot;, color = &quot;black&quot;, linetype = &quot;dotted&quot;) %&gt;% + labs(title = ifelse(is_m == TRUE, yes = &quot;Deforestation avoided in a pixel,on average (matched)&quot;, no = &quot;Deforestation avoided in a pixel,on average (unmatched)&quot;), subtitle = paste0(pa.name, &quot;, &quot;, country.name, &quot;, implemented in &quot;, treatment.year), caption = paste(&quot;WDPA ID :&quot;, wdpa_id, &quot;|&quot;, format(area_ha, big.mark = &quot;,&quot;), &quot;ha |&quot;, &quot;Pixel resolution :&quot;, res_ha, &quot;ha&quot;, &quot;\\nRibbon represents&quot;, (1-alpha)*100, &quot;% confidence interval.\\nTreatment effect is interpreted as the deforestation avoided at pixel level in hectare, due to the conservation program.\\nA negative effect means the conservation program has caused higher deforestation.&quot;), y = &quot;Area (ha)&quot;, x = &quot;Year relative to treatment (t = 0)&quot;) %&gt;% + scale_x_continuous(breaks=seq(min(df_fc_attgt$time),max(df_fc_attgt$time),by=1)) %&gt;% + theme_minimal() %&gt;% + theme( axis.text.x = element_text(angle = 0, hjust = 0.5, vjust = 0.5), axis.text=element_text(size=11, color = &quot;black&quot;), axis.title=element_text(size=14, color = &quot;black&quot;, face = &quot;plain&quot;), plot.caption = element_text(hjust = 0), plot.title = element_text(size=16, color = &quot;black&quot;, face = &quot;plain&quot;, hjust = 0), plot.subtitle = element_text(size=12, color = &quot;black&quot;, face = &quot;plain&quot;, hjust = 0), strip.text = element_blank(), #legend.position = &quot;bottom&quot;, legend.title = element_blank(), legend.text=element_text(size=10), #legend.spacing.x = unit(1.0, &#39;cm&#39;), legend.spacing.y = unit(0.75, &#39;cm&#39;), legend.key.size = unit(2, &#39;line&#39;), panel.grid.major.x = element_line(color = &#39;grey80&#39;, linewidth = 0.3, linetype = 1), panel.grid.minor.x = element_line(color = &#39;grey80&#39;, linewidth = 0.2, linetype = 2), panel.grid.major.y = element_line(color = &#39;grey80&#39;, linewidth = 0.3, linetype = 1), panel.grid.minor.y = element_line(color = &#39;grey80&#39;, linewidth = 0.2, linetype = 2) ) # treatment effect : avoided deforestation in terms of 2000 forest cover fig_att_per = ggplot(data = df_fc_attgt, aes(x = time, y = att_per)) %&gt;% + geom_line(color = &quot;#08519C&quot;) %&gt;% + geom_point(color = &quot;#08519C&quot;) %&gt;% + geom_ribbon(aes(ymin = cband_lower_per, ymax = cband_upper_per), alpha=0.1, fill = &quot;#FB6A4A&quot;, color = &quot;black&quot;, linetype = &quot;dotted&quot;) %&gt;% + labs(title = ifelse(is_m == TRUE, yes = &quot;Average deforestation avoided relative to 2000 forest cover (matched)&quot;, no = &quot;Average deforestation avoided relative to 2000 forest cover (unmatched)&quot;), subtitle = paste0(pa.name, &quot;, &quot;, country.name, &quot;, implemented in &quot;, treatment.year), caption = paste(&quot;WDPA ID :&quot;, wdpa_id, &quot;|&quot;, format(area_ha, big.mark = &quot;,&quot;), &quot;ha |&quot;, &quot;Pixel resolution :&quot;, res_ha, &quot;ha&quot;, &quot;\\nRibbon represents&quot;, (1-alpha)*100, &quot;% confidence interval.\\nTreatment effect is interpreted as the deforestation avoided in percentage of 2000 forest cover.\\nA negative effect means the conservation program has caused higher deforestation.&quot;), y = &quot;%&quot;, x = &quot;Year relative to treatment (t = 0)&quot;) %&gt;% + scale_x_continuous(breaks=seq(min(df_fc_attgt$time),max(df_fc_attgt$time),by=1)) %&gt;% + theme_minimal() %&gt;% + theme( axis.text.x = element_text(angle = 0, hjust = 0.5, vjust = 0.5), axis.text=element_text(size=11, color = &quot;black&quot;), axis.title=element_text(size=14, color = &quot;black&quot;, face = &quot;plain&quot;), plot.caption = element_text(hjust = 0), plot.title = element_text(size=16, color = &quot;black&quot;, face = &quot;plain&quot;, hjust = 0), plot.subtitle = element_text(size=12, color = &quot;black&quot;, face = &quot;plain&quot;, hjust = 0), strip.text = element_blank(), #legend.position = &quot;bottom&quot;, legend.title = element_blank(), legend.text=element_text(size=10), #legend.spacing.x = unit(1.0, &#39;cm&#39;), legend.spacing.y = unit(0.75, &#39;cm&#39;), legend.key.size = unit(2, &#39;line&#39;), panel.grid.major.x = element_line(color = &#39;grey80&#39;, linewidth = 0.3, linetype = 1), panel.grid.minor.x = element_line(color = &#39;grey80&#39;, linewidth = 0.2, linetype = 2), panel.grid.major.y = element_line(color = &#39;grey80&#39;, linewidth = 0.3, linetype = 1), panel.grid.minor.y = element_line(color = &#39;grey80&#39;, linewidth = 0.2, linetype = 2) ) # treatment effect : avoided deforestation in the PA fig_att_pa = ggplot(data = df_fc_attgt, aes(x = time, y = att_pa)) %&gt;% + geom_line(color = &quot;#08519C&quot;) %&gt;% + geom_point(color = &quot;#08519C&quot;) %&gt;% + geom_ribbon(aes(ymin = cband_lower_pa, ymax = cband_upper_pa), alpha=0.1, fill = &quot;#FB6A4A&quot;, color = &quot;black&quot;, linetype = &quot;dotted&quot;) %&gt;% + labs(title = ifelse(is_m == TRUE, yes = &quot;Total deforestation avoided (matched)&quot;, no = &quot;Total deforestation avoided (unmatched)&quot;), subtitle = paste0(pa.name, &quot;, &quot;, country.name, &quot;, implemented in &quot;, treatment.year), caption = paste(&quot;WDPA ID :&quot;, wdpa_id, &quot;|&quot;, format(area_ha, big.mark = &quot;,&quot;), &quot;ha |&quot;, &quot;Pixel resolution :&quot;, res_ha, &quot;ha&quot;, &quot;\\nRibbon represents&quot;, (1-alpha)*100, &quot;% confidence interval.\\nTreatment effect is interpreted as the total deforestation avoided in the protected areas, in hectare (ha).\\nThis measure is an extrapolation to the full protected area of average avoided deforestation at pixel level.\\nA negative effect means the conservation program has caused higher deforestation.&quot;), y = &quot;Forest area (ha)&quot;, x = &quot;Year relative to treatment (t = 0)&quot;) %&gt;% + scale_x_continuous(breaks=seq(min(df_fc_attgt$time),max(df_fc_attgt$time),by=1)) %&gt;% + theme_minimal() %&gt;% + theme( axis.text.x = element_text(angle = 0, hjust = 0.5, vjust = 0.5), axis.text=element_text(size=11, color = &quot;black&quot;), axis.title=element_text(size=14, color = &quot;black&quot;, face = &quot;plain&quot;), plot.caption = element_text(hjust = 0), plot.title = element_text(size=16, color = &quot;black&quot;, face = &quot;plain&quot;, hjust = 0), plot.subtitle = element_text(size=12, color = &quot;black&quot;, face = &quot;plain&quot;, hjust = 0), strip.text = element_blank(), #legend.position = &quot;bottom&quot;, legend.title = element_blank(), legend.text=element_text(size=10), #legend.spacing.x = unit(1.0, &#39;cm&#39;), legend.spacing.y = unit(0.75, &#39;cm&#39;), legend.key.size = unit(2, &#39;line&#39;), panel.grid.major.x = element_line(color = &#39;grey80&#39;, linewidth = 0.3, linetype = 1), panel.grid.minor.x = element_line(color = &#39;grey80&#39;, linewidth = 0.2, linetype = 2), panel.grid.major.y = element_line(color = &#39;grey80&#39;, linewidth = 0.3, linetype = 1), panel.grid.minor.y = element_line(color = &#39;grey80&#39;, linewidth = 0.2, linetype = 2) ) # treatment effect : change in deforestation rate fig_fl_att = ggplot(data = df_fl_attgt, aes(x = time, y = att)) %&gt;% + geom_line(color = &quot;#08519C&quot;) %&gt;% + geom_point(color = &quot;#08519C&quot;) %&gt;% + geom_ribbon(aes(ymin = cband_lower, ymax = cband_upper), alpha=0.1, fill = &quot;#FB6A4A&quot;, color = &quot;black&quot;, linetype = &quot;dotted&quot;) %&gt;% + labs(title = &quot;Effect of the conservation on the deforestation rate, relative to 2000&quot;, subtitle = paste0(pa.name, &quot;, &quot;, country.name, &quot;, implemented in &quot;, treatment.year), caption = paste(&quot;WDPA ID :&quot;, wdpa_id, &quot;|&quot;, format(area_ha, big.mark = &quot;,&quot;), &quot;ha |&quot;, &quot;Pixel resolution :&quot;, res_ha, &quot;ha&quot;, &quot;\\nRibbon represents &quot;, (1-alpha)*100, &quot; % confidence interval.\\nTreatment effect is interpreted as the reduction of cumulated deforestation rate (relative to 2000 forest cover) in percentage points (pp).\\nA negative effect means the conservation program has caused higher deforestation.&quot;), y = &quot;Reduction of deforestation (p.p)&quot;, x = &quot;Year relative to treatment (t = 0)&quot;) %&gt;% + scale_x_continuous(breaks=seq(min(df_fc_attgt$time),max(df_fc_attgt$time),by=1)) %&gt;% + theme_minimal() %&gt;% + theme( axis.text.x = element_text(angle = 0, hjust = 0.5, vjust = 0.5), axis.text=element_text(size=11, color = &quot;black&quot;), axis.title=element_text(size=14, color = &quot;black&quot;, face = &quot;plain&quot;), plot.caption = element_text(hjust = 0), plot.title = element_text(size=16, color = &quot;black&quot;, face = &quot;plain&quot;, hjust = 0), plot.subtitle = element_text(size=12, color = &quot;black&quot;, face = &quot;plain&quot;, hjust = 0), strip.text = element_blank(), #legend.position = &quot;bottom&quot;, legend.title = element_blank(), legend.text=element_text(size=10), #legend.spacing.x = unit(1.0, &#39;cm&#39;), legend.spacing.y = unit(0.75, &#39;cm&#39;), legend.key.size = unit(2, &#39;line&#39;), panel.grid.major.x = element_line(color = &#39;grey80&#39;, linewidth = 0.3, linetype = 1), panel.grid.minor.x = element_line(color = &#39;grey80&#39;, linewidth = 0.2, linetype = 2), panel.grid.major.y = element_line(color = &#39;grey80&#39;, linewidth = 0.3, linetype = 1), panel.grid.minor.y = element_line(color = &#39;grey80&#39;, linewidth = 0.2, linetype = 2) ) ##Saving plots tmp = paste(tempdir(), &quot;fig&quot;, sep = &quot;/&quot;) ggsave(ifelse(is_m == TRUE, yes = paste(tmp, paste0(&quot;fig_att_pix_&quot;, iso, &quot;_&quot;, wdpaid, &quot;_m&quot;, &quot;.png&quot;), sep = &quot;/&quot;), no = paste(tmp, paste0(&quot;fig_att_pix_&quot;, iso, &quot;_&quot;, wdpaid, &quot;_unm&quot;, &quot;.png&quot;), sep = &quot;/&quot;)), plot = fig_att_pix, device = &quot;png&quot;, height = 6, width = 9) ggsave(ifelse(is_m == TRUE, yes = paste(tmp, paste0(&quot;fig_att_pa_&quot;, iso, &quot;_&quot;, wdpaid, &quot;_m&quot;, &quot;.png&quot;), sep = &quot;/&quot;), no = paste(tmp, paste0(&quot;fig_att_pa_&quot;, iso, &quot;_&quot;, wdpaid, &quot;_unm&quot;, &quot;.png&quot;), sep = &quot;/&quot;)), plot = fig_att_pa, device = &quot;png&quot;, height = 6, width = 9) ggsave(ifelse(is_m == TRUE, yes = paste(tmp, paste0(&quot;fig_att_per_&quot;, iso, &quot;_&quot;, wdpaid, &quot;_m&quot;, &quot;.png&quot;), sep = &quot;/&quot;), no = paste(tmp, paste0(&quot;fig_att_per_&quot;, iso, &quot;_&quot;, wdpaid, &quot;_unm&quot;, &quot;.png&quot;), sep = &quot;/&quot;)), plot = fig_att_per, device = &quot;png&quot;, height = 6, width = 9) ggsave(paste(tmp, paste0(&quot;fig_fl_att_&quot;, iso, &quot;_&quot;, wdpaid, &quot;.png&quot;), sep = &quot;/&quot;), plot = fig_fl_att, device = &quot;png&quot;, height = 6, width = 9) files &lt;- list.files(tmp, full.names = TRUE) ##Add each file in the bucket (same foler for every file in the temp) for(f in files) { cat(&quot;Uploading file&quot;, paste0(&quot;&#39;&quot;, f, &quot;&#39;&quot;), &quot;\\n&quot;) aws.s3::put_object(file = f, bucket = paste(&quot;projet-afd-eva-ap&quot;, save_dir, iso, wdpaid, sep = &quot;/&quot;), region = &quot;&quot;, show_progress = TRUE) } do.call(file.remove, list(list.files(tmp, full.names = TRUE))) #Return outputs return(list(&quot;df_fc_att&quot; = df_fc_attgt, &quot;df_fl_att&quot; = df_fl_attgt, &quot;is_ok&quot; = TRUE)) }, error = function(e) { print(e) #cat(paste(&quot;Error while computing/plotting DiD :\\n&quot;, e, &quot;\\n&quot;), file = log, append = TRUE) print(paste(&quot;Error while computing/plotting DiD :\\n&quot;, e, &quot;\\n&quot;)) return(list(&quot;is_ok&quot; = FALSE)) } ) return(output) #TEST : is treatment effect computed by the did package coherent with manual computations ? # --&gt; YES :D # test = df_did %&gt;% # group_by(group, year) %&gt;% # summarize(avgFL_2000_cum = mean(FL_2000_cum, na.rm = TRUE), # avgFC_ha = mean(fc_ha, na.rm = TRUE)) %&gt;% # ungroup() %&gt;% # mutate(fc_te2 = (avgFC_ha[year == 2009 &amp; group == 2] - avgFC_ha[year == 2006 &amp; group == 2]) - (avgFC_ha[year == 2009 &amp; group == 1] - avgFC_ha[year == 2006 &amp; group == 1]), # fl_te2 = (avgFL_2000_cum[year == 2009 &amp; group == 2] - avgFL_2000_cum[year == 2006 &amp; group == 2]) - (avgFL_2000_cum[year == 2009 &amp; group == 1] - avgFL_2000_cum[year == 2006 &amp; group == 1])) # } #Compute the treatment effect for a given protected area. This function can be used on any protected area for which, though no funding information will be displayed contrary to fn_did_att_afd. ## INPUTS ### iso : the iso3 code for the country considered ### wdpaid : the WDPAID of the PA considered ### data_pa : dataset with information on protected areas, and especially their surfaces ### alpha : the threshold for confidence interval ### is_m : boolean stating whether we compute treatment effects from matched (TRUE) or unmatched treated and control units (FALSE) ### save_dir : the saving directory in the remote storage ### load_dir : the loading directory in the remote storage ### ext_input : the extension of input dataframe ## OUTPUTS ### df_fc_attgt : treatment effect computed for the protected area considered, expressed in avoided deforestation (hectare) ### df_fl_attgt : treatment effect computed for the protected area considered, expressed in change of deforestation rate ### is_ok : a boolean indicating whether or not an error occured inside the function ## DATA SAVED : ### Dynamic treatment effects : avoided deforestation in an average pixel (in ha), avoided deforestation relative to 2000 forest cover, avoided deforestation extrapolated to the entire protected area (in ha), change in deforestation rate (in percentage points) fn_did_att_general = function(iso, wdpaid, data_pa, alpha, is_m, load_dir, ext_input, save_dir) { output = tryCatch( { #Loading matched and unmatched datasets df_long_m = s3read_using(data.table::fread, object = paste0(load_dir, &quot;/&quot;, iso, &quot;/&quot;, wdpaid, &quot;/&quot;, paste0(&quot;matched_long&quot;, &quot;_&quot;, iso, &quot;_&quot;, wdpaid, ext_input)), bucket = &quot;projet-afd-eva-ap&quot;, opts = list(&quot;region&quot; = &quot;&quot;)) %&gt;% dplyr::select(c(region, iso3, wdpaid, group, assetid, status_yr, year_funding_first, year_funding_all, res_m, year, var, fc_ha)) #dplyr::select(c(region, country_en, iso3, wdpaid, group, status_yr, year_funding_first, year_funding_all, year, var, fc_ha)) df_long_unm = s3read_using(data.table::fread, object = paste0(load_dir, &quot;/&quot;, iso, &quot;/&quot;, wdpaid, &quot;/&quot;, paste0(&quot;unmatched_long&quot;, &quot;_&quot;, iso, &quot;_&quot;, wdpaid, ext_input)), bucket = &quot;projet-afd-eva-ap&quot;, opts = list(&quot;region&quot; = &quot;&quot;)) %&gt;% dplyr::select(c(region, iso3, wdpaid, group, assetid, status_yr, year_funding_first, year_funding_all, year, res_m, var, fc_ha)) #dplyr::select(c(region, country_en, iso3, wdpaid, group, status_yr, year_funding_first, year_funding_all, year, var, fc_ha)) # Define the working datasets depending on the is_m value if(is_m == TRUE) { df_long = df_long_m } else{df_long = df_long_unm } #Extract some relevant variables ##Extract spatial resolution of pixels res_m and define pixel area in ha res_m = unique(df_long$res_m) res_ha = res_m^2*1e-4 ##Extract treatment year treatment.year = df_long %&gt;% filter(group == 2) %&gt;% slice(1) treatment.year = treatment.year$status_yr ##Extract funding years df_fund_yr = df_long %&gt;% filter(group == 2) %&gt;% slice(1) funding.years = df_fund_yr$year_funding_first list.funding.years = df_fund_yr$year_funding_all ##Extract country name # country.name = df_long %&gt;% # filter(group == 2) %&gt;% # slice(1) # country.name = country.name$country_en ##Extract country iso country.iso = df_long %&gt;% filter(group == 2) %&gt;% slice(1) country.iso = country.iso$iso3 ##Extract region name region.name = df_long %&gt;% filter(group == 2) %&gt;% slice(1) region.name = region.name$region ##Extract more information not in the matched dataframe ### Area wdpa_id = wdpaid #Need to give a name to wdpaid (function argument) different from the varaible in the dataset (wdpaid) area_ha = data_pa[data_pa$wdpaid == wdpa_id,]$area_km2*100 ### Name of the PA pa.name = data_pa %&gt;% filter(wdpaid == wdpa_id) %&gt;% slice(1) pa.name = pa.name$name_pa ### Country name country.name = data_pa %&gt;% filter(wdpaid == wdpa_id) %&gt;% slice(1) country.name = country.name$country_en ### WDPA status status.wdpa = data_pa %&gt;% filter(wdpaid == wdpa_id) %&gt;% slice(1) status.wdpa = status.wdpa$status ### IUCN category and description iucn.wdpa = data_pa %&gt;% filter(wdpaid == wdpa_id) %&gt;% slice(1) iucn.cat = iucn.wdpa$iucn_cat iucn.des = iucn.wdpa$iucn_des_en ### Ecosystem eco.wdpa = data_pa %&gt;% filter(wdpaid == wdpa_id) %&gt;% slice(1) eco.wdpa = eco.wdpa$marine ### Governance gov.wdpa = data_pa %&gt;% filter(wdpaid == wdpa_id) %&gt;% slice(1) gov.wdpa = gov.wdpa$gov_type ### Owner own.wdpa = data_pa %&gt;% filter(wdpaid == wdpa_id) %&gt;% slice(1) own.wdpa = own.wdpa$own_type #Extract number of pixels in the PA #n_pix_pa = length(unique(filter(df_long_unm, group == 2)$assetid)) n_pix_pa = area_ha/res_ha #Average forest cover in a treated pixel in 2000 ## For matched avgFC_2000_m = df_long_m %&gt;% filter(group == 2 &amp; year == 2000) avgFC_2000_m = mean(avgFC_2000_m$fc_ha, na.rm = TRUE) ## For unmatched avgFC_2000_unm = df_long_unm %&gt;% filter(group == 2 &amp; year == 2000) avgFC_2000_unm = mean(avgFC_2000_unm$fc_ha, na.rm = TRUE) #Then modify the dataframe before DiD computations ## Set treatment year = 0 for controls (necessary for did package to consider &quot;never treated&quot; units) ## Compute cumulative deforestation relative to 2000 forest cover (outcome where TE is computed) df_did = df_long %&gt;% mutate(treatment_year = case_when(group == 1 ~0, group == 2 ~status_yr), #Set treatment year to 0 for control units (required by did::att_gt) time = ifelse(group == 2, yes = year-treatment_year, no = NA), .after = status_yr) %&gt;% group_by(assetid) %&gt;% # mutate(FL_2000_cum = (fc_ha-fc_ha[year == 2000])/fc_ha[year == 2000]*100, # fc_2000 = fc_ha[year == 2000]) %&gt;% mutate(FL_2000_cum = case_when(fc_ha[year == 2000] &gt; 0 ~ (fc_ha-fc_ha[year == 2000])/fc_ha[year == 2000]*100, TRUE ~ NA)) %&gt;% ungroup() ##Average forest cover in 2000 in a pixel, and average share of forest cover in a pixel # fc_2000_avg = mean(df_did[df_did$group == 2,]$fc_2000, na.rm = TRUE) # per_fc_2000_avg = min(fc_2000_avg/res_ha, 1) #Take the min as in some cases, reported forest cover is higher than pixel area #Compute dynamic TE with did package. ## Control are &quot;never treated&quot; units, no covariate is added in the regression estimated with doubly-robust method ## standard errors are computed with bootstrap, and confidence intervals computed from it. ## No clustering is performed as it does not seem relevant in our case (https://blogs.worldbank.org/impactevaluations/when-should-you-cluster-standard-errors-new-wisdom-econometrics-oracle) ## Pseudo treatment effect are computed for each pre-treatment year (varying base period) ##For forest cover (ha and %) ### treatment effect computation fc_attgt = did::att_gt(yname = &quot;fc_ha&quot;, gname = &quot;treatment_year&quot;, idname = &quot;assetid&quot;, tname = &quot;year&quot;, control_group = &quot;nevertreated&quot;, #Thsi corresponds to control pixels as defined in the matching , with treatment year set to 0 xformla = ~1, alp = alpha, #For 95% confidence interval allow_unbalanced_panel = TRUE, #Ensure no unit is dropped, though every pixel should have data for all years in the period bstrap=TRUE, #Compute bootstrap CI biters = 1000, #The number of bootstrap iteration, 1000 is default cband = TRUE, #Compute CI clustervars = NULL, #No clustering seems relevant to me base_period = &quot;varying&quot;, data = df_did, print_details = F) ##For change in deforestation rate (percentage points) fl_attgt = did::att_gt(yname = &quot;FL_2000_cum&quot;, gname = &quot;treatment_year&quot;, idname = &quot;assetid&quot;, tname = &quot;year&quot;, control_group = &quot;nevertreated&quot;, #Thsi corresponds to control pixels as defined in the matching , with treatment year set to 0 xformla = ~1, alp = alpha, #For 95% confidence interval allow_unbalanced_panel = TRUE, #Ensure no unit is dropped, though every pixel should have data for all years in the period bstrap=TRUE, #Compute bootstrap CI biters = 1000, #The number of bootstrap iteration, 1000 is default cband = TRUE, #Compute CI clustervars = NULL, #No clustering seems relevant to me base_period = &quot;varying&quot;, data = df_did, print_details = F) ### Report results in a dataframe ### The treatment effect computed is at pixel level (avoided deforestation in a pixel, in ha) ### This treatment effect is aggregated to PA by multiplying treatment effect by the number of pixel in the PA. It is also expressed in percentage of pixel area (avoided deforestation in share of pixel area) ### confidence intervals (at pixel level) are computed from bootstrap standard errors after a coefficient is applied. ### This computation takes the one from did:::summary.MP function, line 15 and 16. ### They are multiplied by the number of pixels to compute CI for treatment effect at PA level ### They are divided by the pixel area to compute CI for treatment effect in percentage of pixel area df_fc_attgt = data.frame(&quot;treatment_year&quot; = fc_attgt$group, &quot;year&quot; = fc_attgt$t, &quot;att_pix&quot; = fc_attgt$att, &quot;c&quot; = fc_attgt$c, &quot;se&quot; = fc_attgt$se, &quot;n&quot; = fc_attgt$n) %&gt;% #Compute treatment effect at PA level and in share of pixel area ## att_pa : the total avoided deforestation is the avoided deforestation in ha in a given pixel, multiplied by the number of pixel in the PA. ## att_per : avoided deforestation in a pixel, as a share of average forest cover in 2000 in matched treated. Can be extrapolated to full PA in principle (avoided deforestation in share of 2000 forest cover) mutate(att_pa = att_pix*n_pix_pa, att_per = att_pix/avgFC_2000_m*100) %&gt;% #Compute time relative to treatment year mutate(time = year - treatment_year, .before = year) %&gt;% #Compute confidence intervals mutate(cband_lower_pix = round(att_pix-c*se, 4), cband_upper_pix = round(att_pix+c*se, 4), cband_lower_pa = cband_lower_pix*n_pix_pa, cband_upper_pa = cband_upper_pix*n_pix_pa, cband_lower_per = cband_lower_pix/avgFC_2000_m*100, cband_upper_per = cband_upper_pix/avgFC_2000_m*100, sig = sign(cband_lower_pix) == sign(cband_upper_pix), sig_5 = ifelse(max(time) &gt;=5, yes = sig[time == 5] == TRUE, no = NA), sig_10 = ifelse(max(time) &gt;= 10, yes = sig[time == 10] == TRUE, no = NA), sig_end = sig[time == max(time)] == TRUE, alpha = alpha) %&gt;% #Add relevant information mutate(region = region.name, country_en = country.name, iso3 = country.iso, name_pa = pa.name, wdpaid = wdpaid, res_ha = res_ha, status_wdpa = status.wdpa, iucn_cat = iucn.cat, iucn_des_en = iucn.des, gov_type = gov.wdpa, own_type = own.wdpa, marine = eco.wdpa, funding_year = funding.years, funding_year_list = list.funding.years, .before = &quot;treatment_year&quot;) # Same for treatment effect expressed as a change in deforestation rate df_fl_attgt = data.frame(&quot;treatment_year&quot; = fl_attgt$group, &quot;year&quot; = fl_attgt$t, &quot;att&quot; = fl_attgt$att, &quot;c&quot; = fl_attgt$c, &quot;se&quot; = fl_attgt$se, &quot;n&quot; = fl_attgt$n) %&gt;% #Compute time relative to treatment year mutate(time = year - treatment_year, .before = year) %&gt;% mutate(cband_lower = round(att-c*se, 4), cband_upper = round(att+c*se, 4), sig = sign(cband_lower) == sign(cband_upper), sig_5 = ifelse(max(time) &gt;=5, yes = sig[time == 5] == TRUE, no = NA), sig_10 = ifelse(max(time) &gt;= 10, yes = sig[time == 10] == TRUE, no = NA), sig_end = sig[time == max(time)] == TRUE, alpha = alpha) %&gt;% #Compute time relative to treatment year mutate(time = year - treatment_year, .before = year) %&gt;% #Add relevant information mutate(region = region.name, country_en = country.name, iso3 = country.iso, name_pa = pa.name, wdpaid = wdpaid, res_ha = res_ha, status_wdpa = status.wdpa, iucn_cat = iucn.cat, iucn_des_en = iucn.des, gov_type = gov.wdpa, own_type = own.wdpa, marine = eco.wdpa, funding_year = funding.years, funding_year_list = list.funding.years, .before = &quot;treatment_year&quot;) ###Plot results ## treatment effect : avoided deforestation at pixel level (in ha) fig_att_pix = ggplot(data = df_fc_attgt, aes(x = time, y = att_pix)) %&gt;% + geom_line(color = &quot;#08519C&quot;) %&gt;% + geom_point(color = &quot;#08519C&quot;) %&gt;% + geom_ribbon(aes(ymin = cband_lower_pix, ymax = cband_upper_pix), alpha=0.1, fill = &quot;#FB6A4A&quot;, color = &quot;black&quot;, linetype = &quot;dotted&quot;) %&gt;% + labs(title = ifelse(is_m == TRUE, yes = &quot;Deforestation avoided in a pixel,on average (matched)&quot;, no = &quot;Deforestation avoided in a pixel,on average (unmatched)&quot;), subtitle = paste0(pa.name, &quot;, &quot;, country.name, &quot;, implemented in &quot;, treatment.year), caption = paste(&quot;WDPA ID :&quot;, wdpa_id, &quot;|&quot;, format(area_ha, big.mark = &quot;,&quot;), &quot;ha |&quot;, &quot;Pixel resolution :&quot;, res_ha, &quot;ha&quot;, &quot;\\nRibbon represents&quot;, (1-alpha)*100, &quot;% confidence interval.\\nTreatment effect is interpreted as the deforestation avoided at pixel level in hectare, due to the conservation program.\\nA negative effect means the conservation program has caused higher deforestation.&quot;), y = &quot;Area (ha)&quot;, x = &quot;Year relative to treatment (t = 0)&quot;) %&gt;% + scale_x_continuous(breaks=seq(min(df_fc_attgt$time),max(df_fc_attgt$time),by=1)) %&gt;% + theme_minimal() %&gt;% + theme( axis.text.x = element_text(angle = 0, hjust = 0.5, vjust = 0.5), axis.text=element_text(size=11, color = &quot;black&quot;), axis.title=element_text(size=14, color = &quot;black&quot;, face = &quot;plain&quot;), plot.caption = element_text(hjust = 0), plot.title = element_text(size=16, color = &quot;black&quot;, face = &quot;plain&quot;, hjust = 0), plot.subtitle = element_text(size=12, color = &quot;black&quot;, face = &quot;plain&quot;, hjust = 0), strip.text = element_blank(), #legend.position = &quot;bottom&quot;, legend.title = element_blank(), legend.text=element_text(size=10), #legend.spacing.x = unit(1.0, &#39;cm&#39;), legend.spacing.y = unit(0.75, &#39;cm&#39;), legend.key.size = unit(2, &#39;line&#39;), panel.grid.major.x = element_line(color = &#39;grey80&#39;, linewidth = 0.3, linetype = 1), panel.grid.minor.x = element_line(color = &#39;grey80&#39;, linewidth = 0.2, linetype = 2), panel.grid.major.y = element_line(color = &#39;grey80&#39;, linewidth = 0.3, linetype = 1), panel.grid.minor.y = element_line(color = &#39;grey80&#39;, linewidth = 0.2, linetype = 2) ) # treatment effect : avoided deforestation in terms of 2000 forest cover fig_att_per = ggplot(data = df_fc_attgt, aes(x = time, y = att_per)) %&gt;% + geom_line(color = &quot;#08519C&quot;) %&gt;% + geom_point(color = &quot;#08519C&quot;) %&gt;% + geom_ribbon(aes(ymin = cband_lower_per, ymax = cband_upper_per), alpha=0.1, fill = &quot;#FB6A4A&quot;, color = &quot;black&quot;, linetype = &quot;dotted&quot;) %&gt;% + labs(title = ifelse(is_m == TRUE, yes = &quot;Average deforestation avoided relative to 2000 forest cover (matched)&quot;, no = &quot;Average deforestation avoided relative to 2000 forest cover (unmatched)&quot;), subtitle = paste0(pa.name, &quot;, &quot;, country.name, &quot;, implemented in &quot;, treatment.year), caption = paste(&quot;WDPA ID :&quot;, wdpa_id, &quot;|&quot;, format(area_ha, big.mark = &quot;,&quot;), &quot;ha |&quot;, &quot;Pixel resolution :&quot;, res_ha, &quot;ha&quot;, &quot;\\nRibbon represents&quot;, (1-alpha)*100, &quot;% confidence interval.\\nTreatment effect is interpreted as the deforestation avoided in percentage of 2000 forest cover.\\nA negative effect means the conservation program has caused higher deforestation.&quot;), y = &quot;%&quot;, x = &quot;Year relative to treatment (t = 0)&quot;) %&gt;% + scale_x_continuous(breaks=seq(min(df_fc_attgt$time),max(df_fc_attgt$time),by=1)) %&gt;% + theme_minimal() %&gt;% + theme( axis.text.x = element_text(angle = 0, hjust = 0.5, vjust = 0.5), axis.text=element_text(size=11, color = &quot;black&quot;), axis.title=element_text(size=14, color = &quot;black&quot;, face = &quot;plain&quot;), plot.caption = element_text(hjust = 0), plot.title = element_text(size=16, color = &quot;black&quot;, face = &quot;plain&quot;, hjust = 0), plot.subtitle = element_text(size=12, color = &quot;black&quot;, face = &quot;plain&quot;, hjust = 0), strip.text = element_blank(), #legend.position = &quot;bottom&quot;, legend.title = element_blank(), legend.text=element_text(size=10), #legend.spacing.x = unit(1.0, &#39;cm&#39;), legend.spacing.y = unit(0.75, &#39;cm&#39;), legend.key.size = unit(2, &#39;line&#39;), panel.grid.major.x = element_line(color = &#39;grey80&#39;, linewidth = 0.3, linetype = 1), panel.grid.minor.x = element_line(color = &#39;grey80&#39;, linewidth = 0.2, linetype = 2), panel.grid.major.y = element_line(color = &#39;grey80&#39;, linewidth = 0.3, linetype = 1), panel.grid.minor.y = element_line(color = &#39;grey80&#39;, linewidth = 0.2, linetype = 2) ) # treatment effect : avoided deforestation in the PA fig_att_pa = ggplot(data = df_fc_attgt, aes(x = time, y = att_pa)) %&gt;% + geom_line(color = &quot;#08519C&quot;) %&gt;% + geom_point(color = &quot;#08519C&quot;) %&gt;% + geom_ribbon(aes(ymin = cband_lower_pa, ymax = cband_upper_pa), alpha=0.1, fill = &quot;#FB6A4A&quot;, color = &quot;black&quot;, linetype = &quot;dotted&quot;) %&gt;% + labs(title = ifelse(is_m == TRUE, yes = &quot;Total deforestation avoided (matched)&quot;, no = &quot;Total deforestation avoided (unmatched)&quot;), subtitle = paste0(pa.name, &quot;, &quot;, country.name, &quot;, implemented in &quot;, treatment.year), caption = paste(&quot;WDPA ID :&quot;, wdpa_id, &quot;|&quot;, format(area_ha, big.mark = &quot;,&quot;), &quot;ha |&quot;, &quot;Pixel resolution :&quot;, res_ha, &quot;ha&quot;, &quot;\\nRibbon represents&quot;, (1-alpha)*100, &quot;% confidence interval.\\nTreatment effect is interpreted as the total deforestation avoided in the protected areas, in hectare (ha).\\nThis measure is an extrapolation to the full protected area of average avoided deforestation at pixel level.\\nA negative effect means the conservation program has caused higher deforestation.&quot;), y = &quot;Forest area (ha)&quot;, x = &quot;Year relative to treatment (t = 0)&quot;) %&gt;% + scale_x_continuous(breaks=seq(min(df_fc_attgt$time),max(df_fc_attgt$time),by=1)) %&gt;% + theme_minimal() %&gt;% + theme( axis.text.x = element_text(angle = 0, hjust = 0.5, vjust = 0.5), axis.text=element_text(size=11, color = &quot;black&quot;), axis.title=element_text(size=14, color = &quot;black&quot;, face = &quot;plain&quot;), plot.caption = element_text(hjust = 0), plot.title = element_text(size=16, color = &quot;black&quot;, face = &quot;plain&quot;, hjust = 0), plot.subtitle = element_text(size=12, color = &quot;black&quot;, face = &quot;plain&quot;, hjust = 0), strip.text = element_blank(), #legend.position = &quot;bottom&quot;, legend.title = element_blank(), legend.text=element_text(size=10), #legend.spacing.x = unit(1.0, &#39;cm&#39;), legend.spacing.y = unit(0.75, &#39;cm&#39;), legend.key.size = unit(2, &#39;line&#39;), panel.grid.major.x = element_line(color = &#39;grey80&#39;, linewidth = 0.3, linetype = 1), panel.grid.minor.x = element_line(color = &#39;grey80&#39;, linewidth = 0.2, linetype = 2), panel.grid.major.y = element_line(color = &#39;grey80&#39;, linewidth = 0.3, linetype = 1), panel.grid.minor.y = element_line(color = &#39;grey80&#39;, linewidth = 0.2, linetype = 2) ) # treatment effect : change in deforestation rate fig_fl_att = ggplot(data = df_fl_attgt, aes(x = time, y = att)) %&gt;% + geom_line(color = &quot;#08519C&quot;) %&gt;% + geom_point(color = &quot;#08519C&quot;) %&gt;% + geom_ribbon(aes(ymin = cband_lower, ymax = cband_upper), alpha=0.1, fill = &quot;#FB6A4A&quot;, color = &quot;black&quot;, linetype = &quot;dotted&quot;) %&gt;% + labs(title = &quot;Effect of the conservation on the deforestation rate, relative to 2000&quot;, subtitle = paste0(pa.name, &quot;, &quot;, country.name, &quot;, implemented in &quot;, treatment.year), caption = paste(&quot;WDPA ID :&quot;, wdpa_id, &quot;|&quot;, format(area_ha, big.mark = &quot;,&quot;), &quot;ha |&quot;, &quot;Pixel resolution :&quot;, res_ha, &quot;ha&quot;, &quot;\\nRibbon represents &quot;, (1-alpha)*100, &quot; % confidence interval.\\nTreatment effect is interpreted as the reduction of cumulated deforestation rate (relative to 2000 forest cover) in percentage points (pp).\\nA negative effect means the conservation program has caused higher deforestation.&quot;), y = &quot;Reduction of deforestation (p.p)&quot;, x = &quot;Year relative to treatment (t = 0)&quot;) %&gt;% + scale_x_continuous(breaks=seq(min(df_fc_attgt$time),max(df_fc_attgt$time),by=1)) %&gt;% + theme_minimal() %&gt;% + theme( axis.text.x = element_text(angle = 0, hjust = 0.5, vjust = 0.5), axis.text=element_text(size=11, color = &quot;black&quot;), axis.title=element_text(size=14, color = &quot;black&quot;, face = &quot;plain&quot;), plot.caption = element_text(hjust = 0), plot.title = element_text(size=16, color = &quot;black&quot;, face = &quot;plain&quot;, hjust = 0), plot.subtitle = element_text(size=12, color = &quot;black&quot;, face = &quot;plain&quot;, hjust = 0), strip.text = element_blank(), #legend.position = &quot;bottom&quot;, legend.title = element_blank(), legend.text=element_text(size=10), #legend.spacing.x = unit(1.0, &#39;cm&#39;), legend.spacing.y = unit(0.75, &#39;cm&#39;), legend.key.size = unit(2, &#39;line&#39;), panel.grid.major.x = element_line(color = &#39;grey80&#39;, linewidth = 0.3, linetype = 1), panel.grid.minor.x = element_line(color = &#39;grey80&#39;, linewidth = 0.2, linetype = 2), panel.grid.major.y = element_line(color = &#39;grey80&#39;, linewidth = 0.3, linetype = 1), panel.grid.minor.y = element_line(color = &#39;grey80&#39;, linewidth = 0.2, linetype = 2) ) ##Saving plots tmp = paste(tempdir(), &quot;fig&quot;, sep = &quot;/&quot;) ggsave(ifelse(is_m == TRUE, yes = paste(tmp, paste0(&quot;fig_att_pix_&quot;, iso, &quot;_&quot;, wdpaid, &quot;_m&quot;, &quot;.png&quot;), sep = &quot;/&quot;), no = paste(tmp, paste0(&quot;fig_att_pix_&quot;, iso, &quot;_&quot;, wdpaid, &quot;_unm&quot;, &quot;.png&quot;), sep = &quot;/&quot;)), plot = fig_att_pix, device = &quot;png&quot;, height = 6, width = 9) ggsave(ifelse(is_m == TRUE, yes = paste(tmp, paste0(&quot;fig_att_pa_&quot;, iso, &quot;_&quot;, wdpaid, &quot;_m&quot;, &quot;.png&quot;), sep = &quot;/&quot;), no = paste(tmp, paste0(&quot;fig_att_pa_&quot;, iso, &quot;_&quot;, wdpaid, &quot;_unm&quot;, &quot;.png&quot;), sep = &quot;/&quot;)), plot = fig_att_pa, device = &quot;png&quot;, height = 6, width = 9) ggsave(ifelse(is_m == TRUE, yes = paste(tmp, paste0(&quot;fig_att_per_&quot;, iso, &quot;_&quot;, wdpaid, &quot;_m&quot;, &quot;.png&quot;), sep = &quot;/&quot;), no = paste(tmp, paste0(&quot;fig_att_per_&quot;, iso, &quot;_&quot;, wdpaid, &quot;_unm&quot;, &quot;.png&quot;), sep = &quot;/&quot;)), plot = fig_att_per, device = &quot;png&quot;, height = 6, width = 9) ggsave(paste(tmp, paste0(&quot;fig_fl_att_&quot;, iso, &quot;_&quot;, wdpaid, &quot;.png&quot;), sep = &quot;/&quot;), plot = fig_fl_att, device = &quot;png&quot;, height = 6, width = 9) files &lt;- list.files(tmp, full.names = TRUE) ##Add each file in the bucket (same foler for every file in the temp) for(f in files) { cat(&quot;Uploading file&quot;, paste0(&quot;&#39;&quot;, f, &quot;&#39;&quot;), &quot;\\n&quot;) aws.s3::put_object(file = f, bucket = paste(&quot;projet-afd-eva-ap&quot;, save_dir, iso, wdpaid, sep = &quot;/&quot;), region = &quot;&quot;, show_progress = TRUE) } do.call(file.remove, list(list.files(tmp, full.names = TRUE))) #Return outputs return(list(&quot;df_fc_att&quot; = df_fc_attgt, &quot;df_fl_att&quot; = df_fl_attgt, &quot;is_ok&quot; = TRUE)) }, error = function(e) { print(e) #cat(paste(&quot;Error while computing/plotting DiD :\\n&quot;, e, &quot;\\n&quot;), file = log, append = TRUE) print(paste(&quot;Error while computing/plotting DiD :\\n&quot;, e, &quot;\\n&quot;)) return(list(&quot;is_ok&quot; = FALSE)) } ) return(output) #TEST : is treatment effect computed by the did package coherent with manual computations ? # --&gt; YES :D # test = df_did %&gt;% # group_by(group, year) %&gt;% # summarize(avgFL_2000_cum = mean(FL_2000_cum, na.rm = TRUE), # avgFC_ha = mean(fc_ha, na.rm = TRUE)) %&gt;% # ungroup() %&gt;% # mutate(fc_te2 = (avgFC_ha[year == 2009 &amp; group == 2] - avgFC_ha[year == 2006 &amp; group == 2]) - (avgFC_ha[year == 2009 &amp; group == 1] - avgFC_ha[year == 2006 &amp; group == 1]), # fl_te2 = (avgFL_2000_cum[year == 2009 &amp; group == 2] - avgFL_2000_cum[year == 2006 &amp; group == 2]) - (avgFL_2000_cum[year == 2009 &amp; group == 1] - avgFL_2000_cum[year == 2006 &amp; group == 1])) # } #Plot the forest cover loss with 2000 as a base year in treated and control units, before and after matching ##INPUTS ### iso : the iso3 code for the country considered ### wdpaid : the WDPAID of the PA considered ### data_pa : dataset with information on protected areas, and especially their surfaces ### alpha : the threshold for confidence interval ### save_dir : the saving directory in the remote storage ### load_dir : the loading directory in the remote storage ### ext_input : the extension of input dataframe ## DATA SAVED ### Plot of forest cover loss with 2000 as a base year in treated and control units, before and after matching fn_plot_forest_loss = function(iso, wdpaid, data_pa, alpha, load_dir, ext_input, save_dir) { #Loading matched and unmatched data frames df_long_m_raw = s3read_using(data.table::fread, object = paste0(load_dir, &quot;/&quot;, iso, &quot;/&quot;, wdpaid, &quot;/&quot;, paste0(&quot;matched_long&quot;, &quot;_&quot;, iso, &quot;_&quot;, wdpaid, ext_input)), bucket = &quot;projet-afd-eva-ap&quot;, opts = list(&quot;region&quot; = &quot;&quot;)) %&gt;% dplyr::select(c(region, iso3, wdpaid, group, assetid, status_yr, year_funding_first, year_funding_all, res_m, year, var, fc_ha)) df_long_unm_raw = s3read_using(data.table::fread, object = paste0(load_dir, &quot;/&quot;, iso, &quot;/&quot;, wdpaid, &quot;/&quot;, paste0(&quot;unmatched_long&quot;, &quot;_&quot;, iso, &quot;_&quot;, wdpaid, ext_input)), bucket = &quot;projet-afd-eva-ap&quot;, opts = list(&quot;region&quot; = &quot;&quot;)) %&gt;% dplyr::select(c(region, iso3, wdpaid, group, assetid, status_yr, year_funding_first, year_funding_all, year, res_m, var, fc_ha)) wdpa_id = wdpaid #Extract relevant information ##Spatial resolution of pixels res_m and define pixel area in ha res_m = unique(df_long_m_raw$res_m) res_ha = res_m^2*1e-4 ##treatment year treatment.year = df_long_m_raw %&gt;% filter(group == 2) %&gt;% slice(1) treatment.year = treatment.year$status_yr ##funding years funding.years = df_long_m_raw %&gt;% filter(group == 2) %&gt;% slice(1) funding.years = funding.years$year_funding_first #funding.years = as.numeric(unlist(strsplit(funding.years$year_funding_all, split = &quot;,&quot;))) ##country iso country.iso = df_long_m_raw %&gt;% filter(group == 2) %&gt;% slice(1) country.iso = country.iso$iso3 ##region name region.name = df_long_m_raw %&gt;% filter(group == 2) %&gt;% slice(1) region.name = region.name$region ##Area of the PA and PA/country name area_ha = data_pa[data_pa$wdpaid == wdpa_id,]$area_km2*100 country.name = data_pa %&gt;% filter(iso3 == iso) %&gt;% slice(1) country.name = country.name$country_en pa.name = data_pa %&gt;% filter(wdpaid == wdpa_id) %&gt;% slice(1) pa.name = pa.name$name_pa #Forest cover loss is computed for each pixel relative to 2000, then average forest cover evolution and loss is computed for treated and controls df_long_m = df_long_m_raw %&gt;% #Compute forest loss relative to 2000 in ha for each pixel group_by(assetid) %&gt;% mutate(fc_rel00_ha = fc_ha - fc_ha[year == 2000], .after = &quot;fc_ha&quot;) %&gt;% ungroup() %&gt;% #Compute average forest cover and forest cover loss relative to 2000 for each group, year group_by(group, year) %&gt;% summarise(n= n(), avgfc_ha = mean(fc_ha, na.rm = TRUE), sdfc_ha = sd(fc_ha, na.rm = TRUE), avgfc_rel00_ha = mean(fc_rel00_ha, na.rm = TRUE), sdfc_rel00_ha = sd(fc_rel00_ha, na.rm = TRUE), fc_ha_ci_upper = avgfc_ha + qt((1-alpha)/2,df=n-1)*sdfc_ha/sqrt(n), fc_ha_ci_lower = avgfc_ha - qt((1-alpha)/2,df=n-1)*sdfc_ha/sqrt(n), fc_rel00_ha_ci_upper = avgfc_rel00_ha + qt((1-alpha)/2,df=n-1)*sdfc_rel00_ha/sqrt(n), fc_rel00_ha_ci_lower = avgfc_rel00_ha - qt((1-alpha)/2,df=n-1)*sdfc_rel00_ha/sqrt(n), matched = T) %&gt;% #Compute total forest cover and forest loss relative to 2000, knowing area of the PA and average forest share in a pixel in 2000 #CI are computed at 95% confidence level ungroup() %&gt;% mutate(#per_fc_2000_avg = min(fc_ha[year == 2000]/res_ha, 1), #fc_tot_ha = fc_ha*(area_ha*per_fc_2000_avg/res_ha), fc_tot_ha = avgfc_ha*(area_ha/res_ha), #fc_tot_rel00_ha = avgfc_rel00_ha*(area_ha*per_fc_2000_avg/res_ha), fc_tot_rel00_ha = avgfc_rel00_ha*(area_ha/res_ha), fc_tot_ha_ci_upper = fc_ha_ci_upper*(area_ha/res_ha), fc_tot_ha_ci_upper = fc_ha_ci_lower*(area_ha/res_ha), fc_tot_rel00_ha_ci_upper = fc_rel00_ha_ci_upper*(area_ha/res_ha), fc_tot_rel00_ha_ci_lower = fc_rel00_ha_ci_lower*(area_ha/res_ha), alpha = alpha) df_long_unm = df_long_unm_raw %&gt;% #Compute forest loss relative to 2000 in ha for each pixel group_by(assetid) %&gt;% mutate(fc_rel00_ha = fc_ha - fc_ha[year == 2000], .after = &quot;fc_ha&quot;) %&gt;% ungroup() %&gt;% #Compute average forest cover and forest cover loss relative to 2000 for each group, year group_by(group, year) %&gt;% summarise(n= n(), avgfc_ha = mean(fc_ha, na.rm = TRUE), sdfc_ha = sd(fc_ha, na.rm = TRUE), avgfc_rel00_ha = mean(fc_rel00_ha, na.rm = TRUE), sdfc_rel00_ha = sd(fc_rel00_ha, na.rm = TRUE), fc_ha_ci_upper = avgfc_ha + qt((1-alpha)/2,df=n-1)*sdfc_ha/sqrt(n), fc_ha_ci_lower = avgfc_ha - qt((1-alpha)/2,df=n-1)*sdfc_ha/sqrt(n), fc_rel00_ha_ci_upper = avgfc_rel00_ha + qt((1-alpha)/2,df=n-1)*sdfc_rel00_ha/sqrt(n), fc_rel00_ha_ci_lower = avgfc_rel00_ha - qt((1-alpha)/2,df=n-1)*sdfc_rel00_ha/sqrt(n), matched = F) %&gt;% #Compute total forest cover and forest loss relative to 2000, knowing area of the PA and average forest share in a pixel in 2000 #CI are computed at 95% confidence level ungroup() %&gt;% mutate(#per_fc_2000_avg = min(fc_ha[year == 2000]/res_ha, 1), #fc_tot_ha = fc_ha*(area_ha*per_fc_2000_avg/res_ha), fc_tot_ha = avgfc_ha*(area_ha/res_ha), #fc_tot_rel00_ha = avgfc_rel00_ha*(area_ha*per_fc_2000_avg/res_ha), fc_tot_rel00_ha = avgfc_rel00_ha*(area_ha/res_ha), fc_tot_ha_ci_upper = fc_ha_ci_upper*(area_ha/res_ha), fc_tot_ha_ci_upper = fc_ha_ci_lower*(area_ha/res_ha), fc_tot_rel00_ha_ci_upper = fc_rel00_ha_ci_upper*(area_ha/res_ha), fc_tot_rel00_ha_ci_lower = fc_rel00_ha_ci_lower*(area_ha/res_ha), alpha = alpha) #Define plotting dataset df_plot = rbind(df_long_m, df_long_unm) %&gt;% mutate(group = case_when(group == 1 ~&quot;Control&quot;, group == 2 ~&quot;Treated&quot;), region = region.name, country_en = country.name, iso3 = country.iso, wdpaid = wdpaid, name_pa = pa.name, area_ha = area_ha) #The period where deforestation is plotted year.max = max(df_long_m$year) #Plot fct.labs &lt;- c(&quot;Before Matching&quot;, &quot;After Matching&quot;) names(fct.labs) &lt;- c(FALSE, TRUE) fig = ggplot(data = filter(df_plot, year == year.max), aes(y = abs(fc_tot_rel00_ha), fill = as.factor(group), x = group)) %&gt;% + geom_bar(position = position_dodge(width = 0.8), stat = &quot;identity&quot;, show.legend = FALSE) %&gt;% + geom_errorbar(aes(ymax=abs(fc_tot_rel00_ha_ci_upper), ymin=abs(fc_tot_rel00_ha_ci_lower)), width=0.4, colour=&quot;grey60&quot;, alpha=0.9, size=1.3) %&gt;% + geom_label(aes(label = format(round(abs(fc_tot_rel00_ha), 0), big.mark = &quot;,&quot;), y = abs(fc_tot_rel00_ha)), color = &quot;black&quot;, show.legend = FALSE) %&gt;% + scale_fill_brewer(name = &quot;Group&quot;, palette = &quot;Blues&quot;) %&gt;% + labs(x = &quot;&quot;, y = &quot;Forest cover loss (ha)&quot;, title = paste(&quot;Average area deforested between 2000 and&quot;, year.max), subtitle = paste(&quot;WDPA ID&quot;, wdpaid, &quot;in&quot;, country.iso, &quot;,implemented in&quot;, treatment.year, &quot;and covering&quot;, format(area_ha, big.mark = &quot;,&quot;), &quot;ha&quot;), caption = paste((1-alpha)*100, &quot;% confidence intervals.&quot;)) %&gt;% + facet_wrap(~matched, labeller = labeller(matched = fct.labs)) %&gt;% + theme_minimal() %&gt;% + theme( axis.text.x = element_text(angle = 0, hjust = 0.5, vjust = 0.5), axis.text=element_text(size=11, color = &quot;black&quot;), axis.title=element_text(size=14, color = &quot;black&quot;, face = &quot;plain&quot;), plot.caption = element_text(hjust = 0), plot.title = element_text(size=16, color = &quot;black&quot;, face = &quot;plain&quot;, hjust = 0), plot.subtitle = element_text(size=12, color = &quot;black&quot;, face = &quot;plain&quot;, hjust = 0), strip.text = element_text(color = &quot;black&quot;, size = 12), #legend.position = &quot;bottom&quot;, #legend.title = element_blank(), legend.text=element_text(size=10), #legend.spacing.x = unit(1.0, &#39;cm&#39;), legend.spacing.y = unit(0.75, &#39;cm&#39;), legend.key.size = unit(2, &#39;line&#39;), panel.grid.major.x = element_line(color = &#39;grey80&#39;, linewidth = 0.3, linetype = 1), panel.grid.minor.x = element_line(color = &#39;grey80&#39;, linewidth = 0.2, linetype = 2), panel.grid.major.y = element_line(color = &#39;grey80&#39;, linewidth = 0.3, linetype = 1), panel.grid.minor.y = element_line(color = &#39;grey80&#39;, linewidth = 0.2, linetype = 2) ) ##Saving plots tmp = paste(tempdir(), &quot;fig&quot;, sep = &quot;/&quot;) ggsave(paste(tmp, paste0(&quot;fig_fl_2000_&quot;, year.max, &quot;_m_unm_&quot;, iso, &quot;_&quot;, wdpaid, &quot;.png&quot;), sep = &quot;/&quot;), plot = fig, device = &quot;png&quot;, height = 6, width = 9) files &lt;- list.files(tmp, full.names = TRUE) ##Add each file in the bucket (same foler for every file in the temp) for(f in files) { cat(&quot;Uploading file&quot;, paste0(&quot;&#39;&quot;, f, &quot;&#39;&quot;), &quot;\\n&quot;) aws.s3::put_object(file = f, bucket = paste(&quot;projet-afd-eva-ap&quot;, save_dir, iso, wdpaid, sep = &quot;/&quot;), region = &quot;&quot;, show_progress = TRUE) } do.call(file.remove, list(list.files(tmp, full.names = TRUE))) return(df_plot) } # Plotting the treatment effect of each protected area analyzed in the same graph. This function suits for AFD supported protected areas : it includes funding information to the table and figures ## INPUTS ### df_fc_att : a dataset with treatment effects for each protected area in the sample, expressed as avoided deforestation (hectare) ### df_fl_att : a dataset with treatment effects for each protected area in the sample, expressed as change in deforestation rate ### alpha : the threshold for confidence interval ### save_dir : the saving directory in the remote storage ## DATA SAVED ### Tables and figures : treatment effects computed for each protected area in the sample, expressed as avoided deforestaion (hectare and percentage of 2000 forest cover) and change in deforestation rate. fn_plot_att_afd = function(df_fc_att, df_fl_att, alpha = alpha, save_dir) { #list of PAs and two time periods list_ctry_plot = df_fc_att %&gt;% dplyr::select(iso3, country_en, wdpaid, iucn_cat) %&gt;% unique() %&gt;% group_by(iso3, country_en, wdpaid) %&gt;% summarize(time = c(5, 10), iucn_wolf = case_when(iucn_cat %in% c(&quot;I&quot;, &quot;II&quot;, &quot;III&quot;, &quot;IV&quot;) ~ &quot;Strict&quot;, iucn_cat %in% c(&quot;V&quot;, &quot;VI&quot;) ~ &quot;Non strict&quot;, grepl(&quot;not&quot;, iucn_cat, ignore.case = TRUE) ~ &quot;Unknown&quot;)) %&gt;% ungroup() #treatment effect for each wdpa (some have not on the two time periods) temp_fc = df_fc_att %&gt;% dplyr::select(c(region, iso3, country_en, wdpaid, name_pa, iucn_cat, treatment_year, time, year, att_per, cband_lower_per, cband_upper_per, att_pa, cband_lower_pa, cband_upper_pa)) %&gt;% mutate(sig_pa = sign(cband_lower_pa) == sign(cband_upper_pa), sig_per = sign(cband_lower_per) == sign(cband_upper_per)) %&gt;% filter(time %in% c(5, 10)) temp_fl = df_fl_att %&gt;% dplyr::select(c(region, iso3, country_en, wdpaid, name_pa, iucn_cat, treatment_year, time, year, att, cband_lower, cband_upper)) %&gt;% mutate(sig = sign(cband_lower) == sign(cband_upper)) %&gt;% filter(time %in% c(5, 10)) #Att for each WDPAID, for each period (NA if no value) df_plot_fc_att = left_join(list_ctry_plot, temp_fc, by = c(&quot;iso3&quot;, &quot;country_en&quot;, &quot;wdpaid&quot;, &quot;time&quot;)) %&gt;% group_by(time, country_en) %&gt;% arrange(country_en) %&gt;% mutate(country_en = paste0(country_en, &quot; (&quot;, LETTERS[row_number()], &quot;)&quot;)) %&gt;% ungroup() df_plot_fl_att = left_join(list_ctry_plot, temp_fl, by = c(&quot;iso3&quot;, &quot;country_en&quot;, &quot;wdpaid&quot;, &quot;time&quot;))%&gt;% group_by(time, country_en) %&gt;% arrange(country_en) %&gt;% mutate(country_en = paste0(country_en, &quot; (&quot;, LETTERS[row_number()], &quot;)&quot;)) %&gt;% ungroup() #Plots names = c(`5` = &quot;5 years after treatment&quot;, `10` = &quot;10 years after treatment&quot;, `Strict` = &quot;Strict\\nIUCN cat. I-IV&quot;, `Non strict` = &quot;Non strict\\nIUCN V-VI&quot;, `Unknown` = &quot;Unknown&quot;) ## Att in share of 2000 forest cover fig_att_per = ggplot(df_plot_fc_att, aes(x = att_per, y = factor(country_en, levels = unique(rev(sort(country_en)))), xmin = cband_lower_per, xmax = cband_upper_per)) %&gt;% + geom_point(aes(color = sig_per)) %&gt;% + geom_vline(xintercept = 0) %&gt;% + geom_errorbarh(aes(color = sig_per)) %&gt;% + scale_color_discrete(name = paste0(&quot;Significance\\n(&quot;, (1-alpha)*100, &quot;% level)&quot;), na.translate = F) %&gt;% # + scale_x_continuous(breaks=seq(min(df_plot_fc_att$att_per, na.rm = TRUE),max(df_plot_fc_att$att_per, na.rm = TRUE),by=1)) %&gt;% + facet_grid(~time,scales=&quot;free&quot;, space=&quot;free&quot;, labeller= as_labeller(names)) %&gt;% + labs(title = &quot;Deforestation avoided relative to 2000 forest cover&quot;, x = &quot;%&quot;, y = &quot;&quot;) %&gt;% + theme_minimal() %&gt;% + theme( axis.text.x = element_text(angle = 0, hjust = 0.5, vjust = 0.5), axis.text=element_text(size=11, color = &quot;black&quot;), axis.title=element_text(size=14, color = &quot;black&quot;, face = &quot;plain&quot;), plot.caption = element_text(hjust = 0), plot.title = element_text(size=16, color = &quot;black&quot;, face = &quot;plain&quot;, hjust = 0), plot.subtitle = element_text(size=12, color = &quot;black&quot;, face = &quot;plain&quot;, hjust = 0), strip.text = element_text(color = &quot;black&quot;, size = 12), strip.clip = &quot;off&quot;, panel.spacing = unit(2, &quot;lines&quot;), #legend.position = &quot;bottom&quot;, legend.text=element_text(size=10), #legend.spacing.x = unit(1.0, &#39;cm&#39;), #legend.spacing.y = unit(0.75, &#39;cm&#39;), legend.key.size = unit(2, &#39;line&#39;), panel.grid.major.x = element_line(color = &#39;grey80&#39;, linewidth = 0.3, linetype = 1), panel.grid.minor.x = element_line(color = &#39;grey80&#39;, linewidth = 0.2, linetype = 2), panel.grid.major.y = element_line(color = &#39;grey80&#39;, linewidth = 0.3, linetype = 1), panel.grid.minor.y = element_line(color = &#39;grey80&#39;, linewidth = 0.2, linetype = 2) ) fig_att_per_iucn = ggplot(df_plot_fc_att, aes(x = att_per, y = factor(country_en, levels = unique(rev(sort(country_en)))), xmin = cband_lower_per, xmax = cband_upper_per)) %&gt;% + geom_point(aes(color = sig_per)) %&gt;% + geom_vline(xintercept = 0) %&gt;% + geom_errorbarh(aes(color = sig_per)) %&gt;% + scale_color_discrete(name = paste0(&quot;Significance\\n(&quot;, (1-alpha)*100, &quot;% level)&quot;), na.translate = F) %&gt;% # + scale_x_continuous(breaks=seq(min(df_plot_fc_att$att_per, na.rm = TRUE),max(df_plot_fc_att$att_per, na.rm = TRUE),by=1)) %&gt;% + facet_grid(iucn_wolf~time,scales=&quot;free&quot;, space=&quot;free&quot;, labeller= as_labeller(names)) %&gt;% + labs(title = &quot;Deforestation avoided relative to 2000 forest cover&quot;, x = &quot;%&quot;, y = &quot;&quot;) %&gt;% + theme_minimal() %&gt;% + theme( axis.text.x = element_text(angle = 0, hjust = 0.5, vjust = 0.5), axis.text=element_text(size=11, color = &quot;black&quot;), axis.title=element_text(size=14, color = &quot;black&quot;, face = &quot;plain&quot;), plot.caption = element_text(hjust = 0), plot.title = element_text(size=16, color = &quot;black&quot;, face = &quot;plain&quot;, hjust = 0), plot.subtitle = element_text(size=12, color = &quot;black&quot;, face = &quot;plain&quot;, hjust = 0), strip.text = element_text(color = &quot;black&quot;, size = 12), strip.clip = &quot;off&quot;, panel.spacing = unit(2, &quot;lines&quot;), #legend.position = &quot;bottom&quot;, legend.text=element_text(size=10), #legend.spacing.x = unit(1.0, &#39;cm&#39;), #legend.spacing.y = unit(0.75, &#39;cm&#39;), legend.key.size = unit(2, &#39;line&#39;), panel.grid.major.x = element_line(color = &#39;grey80&#39;, linewidth = 0.3, linetype = 1), panel.grid.minor.x = element_line(color = &#39;grey80&#39;, linewidth = 0.2, linetype = 2), panel.grid.major.y = element_line(color = &#39;grey80&#39;, linewidth = 0.3, linetype = 1), panel.grid.minor.y = element_line(color = &#39;grey80&#39;, linewidth = 0.2, linetype = 2) ) ##treatment effect : total deforestation avoided fig_att_pa = ggplot(df_plot_fc_att, aes(x = att_pa, y = factor(country_en, levels = unique(rev(sort(country_en)))), xmin = cband_lower_pa, xmax = cband_upper_pa)) %&gt;% + geom_point(aes(color = sig_pa)) %&gt;% + geom_vline(xintercept = 0) %&gt;% + geom_errorbarh(aes(color = sig_pa)) %&gt;% + scale_color_discrete(name = paste0(&quot;Significance\\n(&quot;, (1-alpha)*100, &quot;% level)&quot;), na.translate = F) %&gt;% + facet_grid(~time,scales=&quot;free&quot;, space=&quot;free&quot;, labeller= as_labeller(names)) %&gt;% + labs(title = &quot;Total deforestation avoided&quot;, x = &quot;ha&quot;, y = &quot;&quot;) %&gt;% + theme_minimal() %&gt;% + theme( axis.text.x = element_text(angle = 0, hjust = 0.5, vjust = 0.5), axis.text=element_text(size=11, color = &quot;black&quot;), axis.title=element_text(size=14, color = &quot;black&quot;, face = &quot;plain&quot;), plot.caption = element_text(hjust = 0), plot.title = element_text(size=16, color = &quot;black&quot;, face = &quot;plain&quot;, hjust = 0), plot.subtitle = element_text(size=12, color = &quot;black&quot;, face = &quot;plain&quot;, hjust = 0), strip.text = element_text(color = &quot;black&quot;, size = 12), strip.clip = &quot;off&quot;, panel.spacing = unit(2, &quot;lines&quot;), #legend.position = &quot;bottom&quot;, legend.text=element_text(size=10), #legend.spacing.x = unit(1.0, &#39;cm&#39;), #legend.spacing.y = unit(0.75, &#39;cm&#39;), legend.key.size = unit(2, &#39;line&#39;), panel.grid.major.x = element_line(color = &#39;grey80&#39;, linewidth = 0.3, linetype = 1), panel.grid.minor.x = element_line(color = &#39;grey80&#39;, linewidth = 0.2, linetype = 2), panel.grid.major.y = element_line(color = &#39;grey80&#39;, linewidth = 0.3, linetype = 1), panel.grid.minor.y = element_line(color = &#39;grey80&#39;, linewidth = 0.2, linetype = 2) ) fig_att_pa_iucn = ggplot(df_plot_fc_att, aes(x = att_pa, y = factor(country_en, levels = unique(rev(sort(country_en)))), xmin = cband_lower_pa, xmax = cband_upper_pa)) %&gt;% + geom_point(aes(color = sig_pa)) %&gt;% + geom_vline(xintercept = 0) %&gt;% + geom_errorbarh(aes(color = sig_pa)) %&gt;% + scale_color_discrete(name = paste0(&quot;Significance\\n(&quot;, (1-alpha)*100, &quot;% level)&quot;), na.translate = F) %&gt;% + facet_grid(iucn_wolf~time,scales=&quot;free&quot;, space=&quot;free&quot;, labeller= as_labeller(names)) %&gt;% + labs(title = &quot;Total deforestation avoided&quot;, x = &quot;ha&quot;, y = &quot;&quot;) %&gt;% + theme_minimal() %&gt;% + theme( axis.text.x = element_text(angle = 0, hjust = 0.5, vjust = 0.5), axis.text=element_text(size=11, color = &quot;black&quot;), axis.title=element_text(size=14, color = &quot;black&quot;, face = &quot;plain&quot;), plot.caption = element_text(hjust = 0), plot.title = element_text(size=16, color = &quot;black&quot;, face = &quot;plain&quot;, hjust = 0), plot.subtitle = element_text(size=12, color = &quot;black&quot;, face = &quot;plain&quot;, hjust = 0), strip.text = element_text(color = &quot;black&quot;, size = 12), strip.clip = &quot;off&quot;, panel.spacing = unit(2, &quot;lines&quot;), #legend.position = &quot;bottom&quot;, legend.text=element_text(size=10), #legend.spacing.x = unit(1.0, &#39;cm&#39;), #legend.spacing.y = unit(0.75, &#39;cm&#39;), legend.key.size = unit(2, &#39;line&#39;), panel.grid.major.x = element_line(color = &#39;grey80&#39;, linewidth = 0.3, linetype = 1), panel.grid.minor.x = element_line(color = &#39;grey80&#39;, linewidth = 0.2, linetype = 2), panel.grid.major.y = element_line(color = &#39;grey80&#39;, linewidth = 0.3, linetype = 1), panel.grid.minor.y = element_line(color = &#39;grey80&#39;, linewidth = 0.2, linetype = 2) ) ##treatment effect : avoided deforestation in percentage points fig_att_fl = ggplot(df_plot_fl_att, aes(x = att, y = factor(country_en, levels = unique(rev(sort(country_en)))), xmin = cband_lower, xmax = cband_upper)) %&gt;% + geom_point(aes(color = sig)) %&gt;% + geom_vline(xintercept = 0) %&gt;% + geom_errorbarh(aes(color = sig)) %&gt;% + scale_color_discrete(name = paste0(&quot;Significance\\n(&quot;, (1-alpha)*100, &quot;% level)&quot;), na.translate = F) %&gt;% + facet_grid(~time,scales=&quot;free&quot;, space=&quot;free&quot;, labeller= as_labeller(names)) %&gt;% + labs(title = &quot;Reduction of deforestation due to the conservation&quot;, x = &quot;p.p.&quot;, y = &quot;&quot;) %&gt;% + theme_minimal() %&gt;% + theme( axis.text.x = element_text(angle = 0, hjust = 0.5, vjust = 0.5), axis.text=element_text(size=11, color = &quot;black&quot;), axis.title=element_text(size=14, color = &quot;black&quot;, face = &quot;plain&quot;), plot.caption = element_text(hjust = 0), plot.title = element_text(size=16, color = &quot;black&quot;, face = &quot;plain&quot;, hjust = 0), plot.subtitle = element_text(size=12, color = &quot;black&quot;, face = &quot;plain&quot;, hjust = 0), strip.text = element_text(color = &quot;black&quot;, size = 12), strip.clip = &quot;off&quot;, panel.spacing = unit(2, &quot;lines&quot;), #legend.position = &quot;bottom&quot;, legend.text=element_text(size=10), #legend.spacing.x = unit(1.0, &#39;cm&#39;), #legend.spacing.y = unit(0.75, &#39;cm&#39;), legend.key.size = unit(2, &#39;line&#39;), panel.grid.major.x = element_line(color = &#39;grey80&#39;, linewidth = 0.3, linetype = 1), panel.grid.minor.x = element_line(color = &#39;grey80&#39;, linewidth = 0.2, linetype = 2), panel.grid.major.y = element_line(color = &#39;grey80&#39;, linewidth = 0.3, linetype = 1), panel.grid.minor.y = element_line(color = &#39;grey80&#39;, linewidth = 0.2, linetype = 2) ) fig_att_fl_iucn = ggplot(df_plot_fl_att, aes(x = att, y = factor(country_en, levels = unique(rev(sort(country_en)))), xmin = cband_lower, xmax = cband_upper)) %&gt;% + geom_point(aes(color = sig)) %&gt;% + geom_vline(xintercept = 0) %&gt;% + geom_errorbarh(aes(color = sig)) %&gt;% + scale_color_discrete(name = paste0(&quot;Significance\\n(&quot;, (1-alpha)*100, &quot;% level)&quot;), na.translate = F) %&gt;% + facet_grid(iucn_wolf~time, scales=&quot;free&quot;, space=&quot;free&quot;, labeller= as_labeller(names)) %&gt;% + labs(title = &quot;Reduction of deforestation due to the conservation&quot;, x = &quot;p.p.&quot;, y = &quot;&quot;) %&gt;% + theme_minimal() %&gt;% + theme( axis.text.x = element_text(angle = 0, hjust = 0.5, vjust = 0.5), axis.text=element_text(size=11, color = &quot;black&quot;), axis.title=element_text(size=14, color = &quot;black&quot;, face = &quot;plain&quot;), plot.caption = element_text(hjust = 0), plot.title = element_text(size=16, color = &quot;black&quot;, face = &quot;plain&quot;, hjust = 0), plot.subtitle = element_text(size=12, color = &quot;black&quot;, face = &quot;plain&quot;, hjust = 0), strip.text = element_text(color = &quot;black&quot;, size = 12), strip.clip = &quot;off&quot;, panel.spacing = unit(2, &quot;lines&quot;), #legend.position = &quot;bottom&quot;, legend.text=element_text(size=10), #legend.spacing.x = unit(1.0, &#39;cm&#39;), #legend.spacing.y = unit(0.75, &#39;cm&#39;), legend.key.size = unit(2, &#39;line&#39;), panel.grid.major.x = element_line(color = &#39;grey80&#39;, linewidth = 0.3, linetype = 1), panel.grid.minor.x = element_line(color = &#39;grey80&#39;, linewidth = 0.2, linetype = 2), panel.grid.major.y = element_line(color = &#39;grey80&#39;, linewidth = 0.3, linetype = 1), panel.grid.minor.y = element_line(color = &#39;grey80&#39;, linewidth = 0.2, linetype = 2) ) #Tables ## treatment effect : percentage of deforestation avoided tbl_fc_att_per = df_fc_att %&gt;% mutate(sig_per = case_when(sign(cband_lower_per) == sign(cband_upper_per) ~ &quot;Yes&quot;, sign(cband_lower_per) != sign(cband_upper_per) ~ &quot;No&quot;), iucn_wolf = case_when(iucn_cat %in% c(&quot;I&quot;, &quot;II&quot;, &quot;III&quot;, &quot;IV&quot;) ~ &quot;Strict&quot;, iucn_cat %in% c(&quot;V&quot;, &quot;VI&quot;) ~ &quot;Non strict&quot;, grepl(&quot;not&quot;, iucn_cat, ignore.case = TRUE) ~ &quot;Unknown&quot;), dept_report = case_when(dept_report == &quot;Léa Poulin,Pierre-Yves Durand,Ingrid Dallmann&quot; ~ &quot;Unknown&quot;, TRUE ~ dept_report), kfw = case_when(kfw == TRUE ~ &quot;Yes&quot;, kfw == FALSE ~ &quot;No&quot;), ffem = case_when(ffem == TRUE ~ &quot;Yes&quot;, ffem == FALSE ~ &quot;No&quot;), funding_year_list = case_when(is.na(funding_year_list) == TRUE ~ &quot;Unknown&quot;, TRUE ~ funding_year_list), name_pa = case_when(nchar(name_pa) &lt;= 25 ~ stri_trans_general(name_pa, id = &quot;Latin-ASCII&quot;), nchar(name_pa) &gt; 25 ~ stri_trans_general(paste0(substr(name_pa, 1, 25), &quot;...&quot;), id = &quot;Latin-ASCII&quot;)) ) %&gt;% dplyr::select(c(name_pa, id_projet, dept_report, country_en, treatment_year, funding_year_list, fund_type, kfw, ffem, iucn_wolf, gov_type, time, att_per, sig_per)) %&gt;% filter(time %in% c(5, 10)) %&gt;% pivot_wider(values_from = c(&quot;att_per&quot;, &quot;sig_per&quot;), names_from = c(&quot;time&quot;, &quot;time&quot;)) %&gt;% dplyr::select(c(name_pa, id_projet, dept_report, country_en, treatment_year, funding_year_list, kfw, ffem, iucn_wolf, att_per_5, sig_per_5, att_per_10, sig_per_10)) %&gt;% #dplyr::select(c(name_pa, id_projet, dept_report, country_en, treatment_year, funding_year_list, fund_type, kfw, ffem, iucn_wolf, gov_type, att_per_5, sig_per_5, att_per_10, sig_per_10)) %&gt;% mutate(across(.cols = starts_with(c(&quot;att&quot;, &quot;sig&quot;)), .fns = \\(x) case_when(is.na(x) == TRUE ~ &quot;/&quot;, TRUE ~ as.character(format(x, digit = 1))))) %&gt;% rename(&quot;Effect (5 y., %)&quot; = &quot;att_per_5&quot;, &quot;Signi. (5 y.)&quot; = &quot;sig_per_5&quot;, &quot;Effect (10 y., %)&quot; = &quot;att_per_10&quot;, &quot;Signi. (10 y.)&quot; = &quot;sig_per_10&quot;) # names(tbl_fc_att_per) = c(&quot;Name&quot;, &quot;Project ID&quot;, &quot;Tech. div.&quot;, &quot;Country&quot;, &quot;Creation&quot;, &quot;Funding year&quot;, &quot;Type of funding&quot;, &quot;KfW&quot;, &quot;FFEM&quot;, &quot;Protection&quot;, # &quot;Governance&quot;, &quot;Effect (5 y., %)&quot;, &quot;Significance (5 y.)&quot;,&quot;Effect (10 y., %)&quot;, &quot;Significance (10 y.)&quot;) names(tbl_fc_att_per) = c(&quot;Name&quot;, &quot;Project ID&quot;, &quot;Tech. div.&quot;, &quot;Country&quot;, &quot;Creation&quot;, &quot;Funding year&quot;, &quot;KfW&quot;, &quot;FFEM&quot;, &quot;Protection&quot;, &quot;Effect (5 y., %)&quot;, &quot;Signi. (5 y.)&quot;,&quot;Effect (10 y., %)&quot;, &quot;Signi. (10 y.)&quot;) # treatment effect : total deforestation avoided tbl_fc_att_pa = df_fc_att %&gt;% mutate(sig_pa = case_when(sign(cband_lower_pa) == sign(cband_upper_pa) ~ &quot;Yes&quot;, sign(cband_lower_pa) != sign(cband_upper_pa) ~ &quot;No&quot;), iucn_wolf = case_when(iucn_cat %in% c(&quot;I&quot;, &quot;II&quot;, &quot;III&quot;, &quot;IV&quot;) ~ &quot;Strict&quot;, iucn_cat %in% c(&quot;V&quot;, &quot;VI&quot;) ~ &quot;Non strict&quot;, grepl(&quot;not&quot;, iucn_cat, ignore.case = TRUE) ~ &quot;Unknown&quot;), dept_report = case_when(dept_report == &quot;Léa Poulin,Pierre-Yves Durand,Ingrid Dallmann&quot; ~ &quot;Unknown&quot;, TRUE ~ dept_report), kfw = case_when(kfw == TRUE ~ &quot;Yes&quot;, kfw == FALSE ~ &quot;No&quot;), ffem = case_when(ffem == TRUE ~ &quot;Yes&quot;, ffem == FALSE ~ &quot;No&quot;), funding_year_list = case_when(is.na(funding_year_list) == TRUE ~ &quot;Unknown&quot;, TRUE ~ funding_year_list), name_pa = case_when(nchar(name_pa) &lt;= 25 ~ stri_trans_general(name_pa, id = &quot;Latin-ASCII&quot;), nchar(name_pa) &gt; 25 ~ stri_trans_general(paste0(substr(name_pa, 1, 25), &quot;...&quot;), id = &quot;Latin-ASCII&quot;)) ) %&gt;% dplyr::select(c(name_pa, id_projet, dept_report, country_en, treatment_year, funding_year_list, fund_type, kfw, ffem, iucn_wolf, gov_type, time, att_pa, sig_pa)) %&gt;% filter(time %in% c(5, 10)) %&gt;% pivot_wider(values_from = c(&quot;att_pa&quot;, &quot;sig_pa&quot;), names_from = c(&quot;time&quot;, &quot;time&quot;)) %&gt;% # dplyr::select(c(name_pa, id_projet, dept_report, country_en, treatment_year, funding_year_list, fund_type, kfw, ffem, iucn_wolf, gov_type, att_pa_5, sig_pa_5, att_pa_10, sig_pa_10)) %&gt;% dplyr::select(c(name_pa, id_projet, dept_report, country_en, treatment_year, funding_year_list, kfw, ffem, iucn_wolf, att_pa_5, sig_pa_5, att_pa_10, sig_pa_10)) %&gt;% mutate(across(.cols = starts_with(c(&quot;att&quot;, &quot;sig&quot;)), .fns = \\(x) case_when(is.na(x) == TRUE ~ &quot;/&quot;, TRUE ~ as.character(format(x, digit = 1))))) %&gt;% rename(&quot;Effect (5 y., %)&quot; = &quot;att_pa_5&quot;, &quot;Signi. (5 y.)&quot; = &quot;sig_pa_5&quot;, &quot;Effect (10 y., %)&quot; = &quot;att_pa_10&quot;, &quot;Signi. (10 y.)&quot; = &quot;sig_pa_10&quot;) # names(tbl_fc_att_pa) = c(&quot;Name&quot;, &quot;Project ID&quot;, &quot;Tech. div.&quot;, &quot;Country&quot;, &quot;Creation&quot;, &quot;Funding year&quot;, &quot;Type of funding&quot;, &quot;KfW&quot;, &quot;FFEM&quot;, &quot;Protection&quot;, # &quot;Governance&quot;, &quot;Effect (5 y., ha)&quot;, &quot;Significance (5 y.)&quot;,&quot;Effect (10 y., ha)&quot;, &quot;Significance (10 y.)&quot;) names(tbl_fc_att_pa) = c(&quot;Name&quot;, &quot;Project ID&quot;, &quot;Tech. div.&quot;, &quot;Country&quot;, &quot;Creation&quot;, &quot;Funding year&quot;, &quot;KfW&quot;, &quot;FFEM&quot;, &quot;Protection&quot;, &quot;Effect (5 y., ha)&quot;, &quot;Signi. (5 y.)&quot;,&quot;Effect (10 y., ha)&quot;, &quot;Signi. (10 y.)&quot;) #Saving plots ##Saving plots tmp = paste(tempdir(), &quot;fig&quot;, sep = &quot;/&quot;) ggsave(paste(tmp, &quot;fig_att_per.png&quot;, sep = &quot;/&quot;), plot = fig_att_per, device = &quot;png&quot;, height = 6, width = 9) ggsave(paste(tmp, &quot;fig_att_per_iucn.png&quot;, sep = &quot;/&quot;), plot = fig_att_per_iucn, device = &quot;png&quot;, height = 6, width = 9) ggsave(paste(tmp, &quot;fig_att_pa.png&quot;, sep = &quot;/&quot;), plot = fig_att_pa, device = &quot;png&quot;, height = 6, width = 9) ggsave(paste(tmp, &quot;fig_att_pa_iucn.png&quot;, sep = &quot;/&quot;), plot = fig_att_pa_iucn, device = &quot;png&quot;, height = 6, width = 9) ggsave(paste(tmp, &quot;fig_att_fl.png&quot;, sep = &quot;/&quot;), plot = fig_att_fl, device = &quot;png&quot;, height = 6, width = 9) ggsave(paste(tmp, &quot;fig_att_fl_iucn.png&quot;, sep = &quot;/&quot;), plot = fig_att_fl_iucn, device = &quot;png&quot;, height = 6, width = 9) print(xtable(tbl_fc_att_pa, type = &quot;latex&quot;), file = paste(tmp, &quot;tbl_fc_att_pa.tex&quot;, sep = &quot;/&quot;)) print(xtable(tbl_fc_att_per, type = &quot;latex&quot;), file = paste(tmp, &quot;tbl_fc_att_per.tex&quot;, sep = &quot;/&quot;)) files &lt;- list.files(tmp, full.names = TRUE) ##Add each file in the bucket (same foler for every file in the temp) for(f in files) { cat(&quot;Uploading file&quot;, paste0(&quot;&#39;&quot;, f, &quot;&#39;&quot;), &quot;\\n&quot;) aws.s3::put_object(file = f, bucket = paste(&quot;projet-afd-eva-ap&quot;, save_dir, sep = &quot;/&quot;), region = &quot;&quot;, show_progress = TRUE) } do.call(file.remove, list(list.files(tmp, full.names = TRUE))) } # Plotting the treatment effect of each protected area analyzed in the same graph. This function suits for all protected areas in general, and does not include any information on funding. ## INPUTS ### df_fc_att : a dataset with treatment effects for each protected area in the sample, expressed as avoided deforestation (hectare) ### df_fl_att : a dataset with treatment effects for each protected area in the sample, expressed as change in deforestation rate ### alpha : the threshold for confidence interval ### save_dir : the saving directory in the remote storage ## DATA SAVED ### Tables and figures : treatment effects computed for each protected area in the sample, expressed as avoided deforestaion (hectare and percentage of 2000 forest cover) and change in deforestation rate. fn_plot_att_general = function(df_fc_att, df_fl_att, list_focus, alpha = alpha, save_dir) { #list of PAs and two time periods list_ctry_plot = df_fc_att %&gt;% dplyr::select(iso3, country_en, wdpaid, name_pa, iucn_cat, gov_type, own_type, treatment_year, status_wdpa) %&gt;% unique() %&gt;% group_by(iso3, country_en, wdpaid, name_pa) %&gt;% summarize(time = c(5, 10), iucn_cat = iucn_cat, iucn_wolf = case_when(iucn_cat %in% c(&quot;I&quot;, &quot;II&quot;, &quot;III&quot;, &quot;IV&quot;) ~ &quot;Strict&quot;, iucn_cat %in% c(&quot;V&quot;, &quot;VI&quot;) ~ &quot;Non strict&quot;, grepl(&quot;not&quot;, iucn_cat, ignore.case = TRUE) ~ &quot;Unknown&quot;), treatment_year = treatment_year, gov_type = gov_type, own_type = own_type, status_wdpa = status_wdpa) %&gt;% ungroup() #treatment effect for each wdpa (some have not on the two time periods) temp_fc = df_fc_att %&gt;% dplyr::select(c(region, iso3, country_en, wdpaid, name_pa, time, year, att_per, cband_lower_per, cband_upper_per, att_pa, cband_lower_pa, cband_upper_pa)) %&gt;% mutate(sig_pa = sign(cband_lower_pa) == sign(cband_upper_pa), sig_per = sign(cband_lower_per) == sign(cband_upper_per)) %&gt;% filter(time %in% c(5, 10)) temp_fl = df_fl_att %&gt;% dplyr::select(c(region, iso3, country_en, wdpaid, name_pa, time, year, att, cband_lower, cband_upper)) %&gt;% mutate(sig = sign(cband_lower) == sign(cband_upper)) %&gt;% filter(time %in% c(5, 10)) #Att for each WDPAID, for each period (NA if no value) ## For figures df_plot_fc_att = left_join(list_ctry_plot, temp_fc, by = c(&quot;iso3&quot;, &quot;country_en&quot;, &quot;wdpaid&quot;, &quot;name_pa&quot;, &quot;time&quot;)) %&gt;% mutate(focus = case_when(wdpaid %in% list_focus ~ &quot;focus&quot;, !(wdpaid %in% list_focus) ~ &quot;not focus&quot;)) %&gt;% group_by(time, country_en) %&gt;% arrange(country_en, focus) %&gt;% mutate(country_en = paste0(country_en, &quot; (&quot;, row_number(), &quot;)&quot;), n = row_number()) %&gt;% ungroup() df_plot_fl_att = left_join(list_ctry_plot, temp_fl, by = c(&quot;iso3&quot;, &quot;country_en&quot;, &quot;wdpaid&quot;, &quot;name_pa&quot;, &quot;time&quot;))%&gt;% mutate(focus = case_when(wdpaid %in% list_focus ~ &quot;focus&quot;, !(wdpaid %in% list_focus) ~ &quot;not focus&quot;)) %&gt;% group_by(time, country_en) %&gt;% arrange(country_en, focus) %&gt;% mutate(country_en = paste0(country_en, &quot; (&quot;, row_number(), &quot;)&quot;), n = row_number()) %&gt;% ungroup() #Plots names = c(`5` = &quot;5 years after treatment&quot;, `10` = &quot;10 years after treatment&quot;, `Strict` = &quot;Strict\\nIUCN cat. I-IV&quot;, `Non strict` = &quot;Non strict\\nIUCN V-VI&quot;, `Unknown` = &quot;Unknown&quot;, `focus` = &quot;FAPBM funded&quot;, `not focus` = &quot;Others&quot;) # df_colors = df_plot_fc_att %&gt;% group_by(n) %&gt;% slice(1) # colors = ifelse(df_colors$wdpaid %in% list_focus,&quot;#3182BD&quot;,&quot;black&quot;) ## Att in share of 2000 forest cover fig_att_per = ggplot(df_plot_fc_att, aes(x = att_per, y = factor(name_pa, levels = unique(rev(sort(name_pa)))), xmin = cband_lower_per, xmax = cband_upper_per)) %&gt;% + geom_point(aes(color = sig_per)) %&gt;% + geom_vline(xintercept = 0) %&gt;% + geom_errorbarh(aes(color = sig_per)) %&gt;% + scale_color_discrete(name = paste0(&quot;Significance\\n(&quot;, (1-alpha)*100, &quot;% level)&quot;), na.translate = F) %&gt;% # + scale_x_continuous(breaks=seq(min(df_plot_fc_att$att_per, na.rm = TRUE),max(df_plot_fc_att$att_per, na.rm = TRUE),by=1)) %&gt;% + facet_grid(~time,scales=&quot;free&quot;, space=&quot;free&quot;, labeller= as_labeller(names)) %&gt;% + labs(title = &quot;Deforestation avoided relative to 2000 forest cover&quot;, #caption = &quot;FAPBM funded protected areas are in blue, others are in black.&quot;, x = &quot;%&quot;, y = &quot;&quot;) %&gt;% + theme_minimal() %&gt;% + theme( axis.text.x = element_text(angle = 0, hjust = 0.5, vjust = 0.5), #axis.text.y = element_text(color = rev(colors)), axis.text=element_text(size=11, color = &quot;black&quot;), axis.title=element_text(size=14, color = &quot;black&quot;, face = &quot;plain&quot;), plot.caption = element_text(hjust = 0), plot.title = element_text(size=16, color = &quot;black&quot;, face = &quot;plain&quot;, hjust = 0), plot.subtitle = element_text(size=12, color = &quot;black&quot;, face = &quot;plain&quot;, hjust = 0), strip.text = element_text(color = &quot;black&quot;, size = 12), strip.clip = &quot;off&quot;, panel.spacing = unit(2, &quot;lines&quot;), #legend.position = &quot;bottom&quot;, legend.text=element_text(size=10), #legend.spacing.x = unit(1.0, &#39;cm&#39;), #legend.spacing.y = unit(0.75, &#39;cm&#39;), legend.key.size = unit(2, &#39;line&#39;), panel.grid.major.x = element_line(color = &#39;grey80&#39;, linewidth = 0.3, linetype = 1), panel.grid.minor.x = element_line(color = &#39;grey80&#39;, linewidth = 0.2, linetype = 2), panel.grid.major.y = element_line(color = &#39;grey80&#39;, linewidth = 0.3, linetype = 1), panel.grid.minor.y = element_line(color = &#39;grey80&#39;, linewidth = 0.2, linetype = 2) ) fig_att_per_focus_others = ggplot(df_plot_fc_att, aes(x = att_per, y = factor(name_pa, levels = unique(rev(sort(name_pa)))), xmin = cband_lower_per, xmax = cband_upper_per)) %&gt;% + geom_point(aes(color = sig_per)) %&gt;% + geom_vline(xintercept = 0) %&gt;% + geom_errorbarh(aes(color = sig_per)) %&gt;% + scale_color_discrete(name = paste0(&quot;Significance\\n(&quot;, (1-alpha)*100, &quot;% level)&quot;), na.translate = F) %&gt;% # + scale_x_continuous(breaks=seq(min(df_plot_fc_att$att_per, na.rm = TRUE),max(df_plot_fc_att$att_per, na.rm = TRUE),by=1)) %&gt;% + facet_grid(focus~time,scales=&quot;free&quot;, space=&quot;free&quot;, labeller= as_labeller(names)) %&gt;% + labs(title = &quot;Deforestation avoided relative to 2000 forest cover&quot;, x = &quot;%&quot;, y = &quot;&quot;) %&gt;% + theme_minimal() %&gt;% + theme( axis.text.x = element_text(angle = 0, hjust = 0.5, vjust = 0.5), axis.text=element_text(size=11, color = &quot;black&quot;), axis.title=element_text(size=14, color = &quot;black&quot;, face = &quot;plain&quot;), plot.caption = element_text(hjust = 0), plot.title = element_text(size=16, color = &quot;black&quot;, face = &quot;plain&quot;, hjust = 0), plot.subtitle = element_text(size=12, color = &quot;black&quot;, face = &quot;plain&quot;, hjust = 0), strip.text = element_text(color = &quot;black&quot;, size = 12), strip.clip = &quot;off&quot;, panel.spacing = unit(2, &quot;lines&quot;), #legend.position = &quot;bottom&quot;, legend.text=element_text(size=10), #legend.spacing.x = unit(1.0, &#39;cm&#39;), #legend.spacing.y = unit(0.75, &#39;cm&#39;), legend.key.size = unit(2, &#39;line&#39;), panel.grid.major.x = element_line(color = &#39;grey80&#39;, linewidth = 0.3, linetype = 1), panel.grid.minor.x = element_line(color = &#39;grey80&#39;, linewidth = 0.2, linetype = 2), panel.grid.major.y = element_line(color = &#39;grey80&#39;, linewidth = 0.3, linetype = 1), panel.grid.minor.y = element_line(color = &#39;grey80&#39;, linewidth = 0.2, linetype = 2) ) fig_att_per_focus = ggplot(filter(df_plot_fc_att, focus == &quot;focus&quot;), aes(x = att_per, y = factor(name_pa, levels = unique(rev(sort(name_pa)))), xmin = cband_lower_per, xmax = cband_upper_per)) %&gt;% + geom_point(aes(color = sig_per)) %&gt;% + geom_vline(xintercept = 0) %&gt;% + geom_errorbarh(aes(color = sig_per)) %&gt;% + scale_color_discrete(name = paste0(&quot;Significance\\n(&quot;, (1-alpha)*100, &quot;% level)&quot;), na.translate = F) %&gt;% # + scale_x_continuous(breaks=seq(min(df_plot_fc_att$att_per, na.rm = TRUE),max(df_plot_fc_att$att_per, na.rm = TRUE),by=1)) %&gt;% + facet_grid(~time,scales=&quot;free&quot;, space=&quot;free&quot;, labeller= as_labeller(names)) %&gt;% + labs(title = &quot;Deforestation avoided relative to 2000 forest cover&quot;, subtitle = &quot;Protected areas funded by the FAPBM only&quot;, x = &quot;%&quot;, y = &quot;&quot;) %&gt;% + theme_minimal() %&gt;% + theme( axis.text.x = element_text(angle = 0, hjust = 0.5, vjust = 0.5), axis.text=element_text(size=11, color = &quot;black&quot;), axis.title=element_text(size=14, color = &quot;black&quot;, face = &quot;plain&quot;), plot.caption = element_text(hjust = 0), plot.title = element_text(size=16, color = &quot;black&quot;, face = &quot;plain&quot;, hjust = 0), plot.subtitle = element_text(size=12, color = &quot;black&quot;, face = &quot;plain&quot;, hjust = 0), strip.text = element_text(color = &quot;black&quot;, size = 12), strip.clip = &quot;off&quot;, panel.spacing = unit(2, &quot;lines&quot;), #legend.position = &quot;bottom&quot;, legend.text=element_text(size=10), #legend.spacing.x = unit(1.0, &#39;cm&#39;), #legend.spacing.y = unit(0.75, &#39;cm&#39;), legend.key.size = unit(2, &#39;line&#39;), panel.grid.major.x = element_line(color = &#39;grey80&#39;, linewidth = 0.3, linetype = 1), panel.grid.minor.x = element_line(color = &#39;grey80&#39;, linewidth = 0.2, linetype = 2), panel.grid.major.y = element_line(color = &#39;grey80&#39;, linewidth = 0.3, linetype = 1), panel.grid.minor.y = element_line(color = &#39;grey80&#39;, linewidth = 0.2, linetype = 2) ) fig_att_per_iucn = ggplot(df_plot_fc_att, aes(x = att_per, y = factor(name_pa, levels = unique(rev(sort(name_pa)))), xmin = cband_lower_per, xmax = cband_upper_per)) %&gt;% + geom_point(aes(color = sig_per)) %&gt;% + geom_vline(xintercept = 0) %&gt;% + geom_errorbarh(aes(color = sig_per)) %&gt;% + scale_color_discrete(name = paste0(&quot;Significance\\n(&quot;, (1-alpha)*100, &quot;% level)&quot;), na.translate = F) %&gt;% # + scale_x_continuous(breaks=seq(min(df_plot_fc_att$att_per, na.rm = TRUE),max(df_plot_fc_att$att_per, na.rm = TRUE),by=1)) %&gt;% + facet_grid(iucn_wolf~time,scales=&quot;free&quot;, space=&quot;free&quot;, labeller= as_labeller(names)) %&gt;% + labs(title = &quot;Deforestation avoided relative to 2000 forest cover&quot;, x = &quot;%&quot;, y = &quot;&quot;) %&gt;% + theme_minimal() %&gt;% + theme( axis.text.x = element_text(angle = 0, hjust = 0.5, vjust = 0.5), #axis.text.y = element_text(color = rev(colors)), axis.text=element_text(size=11, color = &quot;black&quot;), axis.title=element_text(size=14, color = &quot;black&quot;, face = &quot;plain&quot;), plot.caption = element_text(hjust = 0), plot.title = element_text(size=16, color = &quot;black&quot;, face = &quot;plain&quot;, hjust = 0), plot.subtitle = element_text(size=12, color = &quot;black&quot;, face = &quot;plain&quot;, hjust = 0), strip.text = element_text(color = &quot;black&quot;, size = 12), strip.clip = &quot;off&quot;, panel.spacing = unit(2, &quot;lines&quot;), #legend.position = &quot;bottom&quot;, legend.text=element_text(size=10), #legend.spacing.x = unit(1.0, &#39;cm&#39;), #legend.spacing.y = unit(0.75, &#39;cm&#39;), legend.key.size = unit(2, &#39;line&#39;), panel.grid.major.x = element_line(color = &#39;grey80&#39;, linewidth = 0.3, linetype = 1), panel.grid.minor.x = element_line(color = &#39;grey80&#39;, linewidth = 0.2, linetype = 2), panel.grid.major.y = element_line(color = &#39;grey80&#39;, linewidth = 0.3, linetype = 1), panel.grid.minor.y = element_line(color = &#39;grey80&#39;, linewidth = 0.2, linetype = 2) ) ##treatment effect : total deforestation avoided fig_att_pa = ggplot(df_plot_fc_att, aes(x = att_pa, y = factor(name_pa, levels = unique(rev(sort(name_pa)))), xmin = cband_lower_pa, xmax = cband_upper_pa)) %&gt;% + geom_point(aes(color = sig_pa)) %&gt;% + geom_vline(xintercept = 0) %&gt;% + geom_errorbarh(aes(color = sig_pa)) %&gt;% + scale_color_discrete(name = paste0(&quot;Significance\\n(&quot;, (1-alpha)*100, &quot;% level)&quot;), na.translate = F) %&gt;% + facet_grid(~time,scales=&quot;free&quot;, space=&quot;free&quot;, labeller= as_labeller(names)) %&gt;% + labs(title = &quot;Total deforestation avoided&quot;, x = &quot;ha&quot;, y = &quot;&quot;) %&gt;% + theme_minimal() %&gt;% + theme( axis.text.x = element_text(angle = 0, hjust = 0.5, vjust = 0.5), axis.text=element_text(size=11, color = &quot;black&quot;), axis.title=element_text(size=14, color = &quot;black&quot;, face = &quot;plain&quot;), plot.caption = element_text(hjust = 0), plot.title = element_text(size=16, color = &quot;black&quot;, face = &quot;plain&quot;, hjust = 0), plot.subtitle = element_text(size=12, color = &quot;black&quot;, face = &quot;plain&quot;, hjust = 0), strip.text = element_text(color = &quot;black&quot;, size = 12), strip.clip = &quot;off&quot;, panel.spacing = unit(2, &quot;lines&quot;), #legend.position = &quot;bottom&quot;, legend.text=element_text(size=10), #legend.spacing.x = unit(1.0, &#39;cm&#39;), #legend.spacing.y = unit(0.75, &#39;cm&#39;), legend.key.size = unit(2, &#39;line&#39;), panel.grid.major.x = element_line(color = &#39;grey80&#39;, linewidth = 0.3, linetype = 1), panel.grid.minor.x = element_line(color = &#39;grey80&#39;, linewidth = 0.2, linetype = 2), panel.grid.major.y = element_line(color = &#39;grey80&#39;, linewidth = 0.3, linetype = 1), panel.grid.minor.y = element_line(color = &#39;grey80&#39;, linewidth = 0.2, linetype = 2) ) fig_att_pa_focus_others = ggplot(df_plot_fc_att, aes(x = att_pa, y = factor(name_pa, levels = unique(rev(sort(name_pa)))), xmin = cband_lower_pa, xmax = cband_upper_pa)) %&gt;% + geom_point(aes(color = sig_pa)) %&gt;% + geom_vline(xintercept = 0) %&gt;% + geom_errorbarh(aes(color = sig_pa)) %&gt;% + scale_color_discrete(name = paste0(&quot;Significance\\n(&quot;, (1-alpha)*100, &quot;% level)&quot;), na.translate = F) %&gt;% + facet_grid(focus~time,scales=&quot;free&quot;, space=&quot;free&quot;, labeller= as_labeller(names)) %&gt;% + labs(title = &quot;Total deforestation avoided&quot;, x = &quot;ha&quot;, y = &quot;&quot;) %&gt;% + theme_minimal() %&gt;% + theme( axis.text.x = element_text(angle = 0, hjust = 0.5, vjust = 0.5), axis.text=element_text(size=11, color = &quot;black&quot;), axis.title=element_text(size=14, color = &quot;black&quot;, face = &quot;plain&quot;), plot.caption = element_text(hjust = 0), plot.title = element_text(size=16, color = &quot;black&quot;, face = &quot;plain&quot;, hjust = 0), plot.subtitle = element_text(size=12, color = &quot;black&quot;, face = &quot;plain&quot;, hjust = 0), strip.text = element_text(color = &quot;black&quot;, size = 12), strip.clip = &quot;off&quot;, panel.spacing = unit(2, &quot;lines&quot;), #legend.position = &quot;bottom&quot;, legend.text=element_text(size=10), #legend.spacing.x = unit(1.0, &#39;cm&#39;), #legend.spacing.y = unit(0.75, &#39;cm&#39;), legend.key.size = unit(2, &#39;line&#39;), panel.grid.major.x = element_line(color = &#39;grey80&#39;, linewidth = 0.3, linetype = 1), panel.grid.minor.x = element_line(color = &#39;grey80&#39;, linewidth = 0.2, linetype = 2), panel.grid.major.y = element_line(color = &#39;grey80&#39;, linewidth = 0.3, linetype = 1), panel.grid.minor.y = element_line(color = &#39;grey80&#39;, linewidth = 0.2, linetype = 2) ) fig_att_pa_focus = ggplot(filter(df_plot_fc_att, focus == &quot;focus&quot;), aes(x = att_pa, y = factor(name_pa, levels = unique(rev(sort(name_pa)))), xmin = cband_lower_pa, xmax = cband_upper_pa)) %&gt;% + geom_point(aes(color = sig_pa)) %&gt;% + geom_vline(xintercept = 0) %&gt;% + geom_errorbarh(aes(color = sig_pa)) %&gt;% + scale_color_discrete(name = paste0(&quot;Significance\\n(&quot;, (1-alpha)*100, &quot;% level)&quot;), na.translate = F) %&gt;% + facet_grid(focus~time,scales=&quot;free&quot;, space=&quot;free&quot;, labeller= as_labeller(names)) %&gt;% + labs(title = &quot;Total deforestation avoided&quot;, subtitle = &quot;Protected areas funded by the FAPBM only&quot;, x = &quot;ha&quot;, y = &quot;&quot;) %&gt;% + theme_minimal() %&gt;% + theme( axis.text.x = element_text(angle = 0, hjust = 0.5, vjust = 0.5), axis.text=element_text(size=11, color = &quot;black&quot;), axis.title=element_text(size=14, color = &quot;black&quot;, face = &quot;plain&quot;), plot.caption = element_text(hjust = 0), plot.title = element_text(size=16, color = &quot;black&quot;, face = &quot;plain&quot;, hjust = 0), plot.subtitle = element_text(size=12, color = &quot;black&quot;, face = &quot;plain&quot;, hjust = 0), strip.text = element_text(color = &quot;black&quot;, size = 12), strip.clip = &quot;off&quot;, panel.spacing = unit(2, &quot;lines&quot;), #legend.position = &quot;bottom&quot;, legend.text=element_text(size=10), #legend.spacing.x = unit(1.0, &#39;cm&#39;), #legend.spacing.y = unit(0.75, &#39;cm&#39;), legend.key.size = unit(2, &#39;line&#39;), panel.grid.major.x = element_line(color = &#39;grey80&#39;, linewidth = 0.3, linetype = 1), panel.grid.minor.x = element_line(color = &#39;grey80&#39;, linewidth = 0.2, linetype = 2), panel.grid.major.y = element_line(color = &#39;grey80&#39;, linewidth = 0.3, linetype = 1), panel.grid.minor.y = element_line(color = &#39;grey80&#39;, linewidth = 0.2, linetype = 2) ) fig_att_pa_iucn = ggplot(df_plot_fc_att, aes(x = att_pa, y = factor(name_pa, levels = unique(rev(sort(name_pa)))), xmin = cband_lower_pa, xmax = cband_upper_pa)) %&gt;% + geom_point(aes(color = sig_pa)) %&gt;% + geom_vline(xintercept = 0) %&gt;% + geom_errorbarh(aes(color = sig_pa)) %&gt;% + scale_color_discrete(name = paste0(&quot;Significance\\n(&quot;, (1-alpha)*100, &quot;% level)&quot;), na.translate = F) %&gt;% + facet_grid(iucn_wolf~time,scales=&quot;free&quot;, space=&quot;free&quot;, labeller= as_labeller(names)) %&gt;% + labs(title = &quot;Total deforestation avoided&quot;, x = &quot;ha&quot;, y = &quot;&quot;) %&gt;% + theme_minimal() %&gt;% + theme( axis.text.x = element_text(angle = 0, hjust = 0.5, vjust = 0.5), axis.text=element_text(size=11, color = &quot;black&quot;), axis.title=element_text(size=14, color = &quot;black&quot;, face = &quot;plain&quot;), plot.caption = element_text(hjust = 0), plot.title = element_text(size=16, color = &quot;black&quot;, face = &quot;plain&quot;, hjust = 0), plot.subtitle = element_text(size=12, color = &quot;black&quot;, face = &quot;plain&quot;, hjust = 0), strip.text = element_text(color = &quot;black&quot;, size = 12), strip.clip = &quot;off&quot;, panel.spacing = unit(2, &quot;lines&quot;), #legend.position = &quot;bottom&quot;, legend.text=element_text(size=10), #legend.spacing.x = unit(1.0, &#39;cm&#39;), #legend.spacing.y = unit(0.75, &#39;cm&#39;), legend.key.size = unit(2, &#39;line&#39;), panel.grid.major.x = element_line(color = &#39;grey80&#39;, linewidth = 0.3, linetype = 1), panel.grid.minor.x = element_line(color = &#39;grey80&#39;, linewidth = 0.2, linetype = 2), panel.grid.major.y = element_line(color = &#39;grey80&#39;, linewidth = 0.3, linetype = 1), panel.grid.minor.y = element_line(color = &#39;grey80&#39;, linewidth = 0.2, linetype = 2) ) ##treatment effect : avoided deforestation in percentage points fig_att_fl = ggplot(df_plot_fl_att, aes(x = att, y = factor(name_pa, levels = unique(rev(sort(name_pa)))), xmin = cband_lower, xmax = cband_upper)) %&gt;% + geom_point(aes(color = sig)) %&gt;% + geom_vline(xintercept = 0) %&gt;% + geom_errorbarh(aes(color = sig)) %&gt;% + scale_color_discrete(name = paste0(&quot;Significance\\n(&quot;, (1-alpha)*100, &quot;% level)&quot;), na.translate = F) %&gt;% + facet_grid(~time,scales=&quot;free&quot;, space=&quot;free&quot;, labeller= as_labeller(names)) %&gt;% + labs(title = &quot;Reduction of deforestation due to the conservation&quot;, x = &quot;p.p.&quot;, y = &quot;&quot;) %&gt;% + theme_minimal() %&gt;% + theme( axis.text.x = element_text(angle = 0, hjust = 0.5, vjust = 0.5), axis.text=element_text(size=11, color = &quot;black&quot;), axis.title=element_text(size=14, color = &quot;black&quot;, face = &quot;plain&quot;), plot.caption = element_text(hjust = 0), plot.title = element_text(size=16, color = &quot;black&quot;, face = &quot;plain&quot;, hjust = 0), plot.subtitle = element_text(size=12, color = &quot;black&quot;, face = &quot;plain&quot;, hjust = 0), strip.text = element_text(color = &quot;black&quot;, size = 12), strip.clip = &quot;off&quot;, panel.spacing = unit(2, &quot;lines&quot;), #legend.position = &quot;bottom&quot;, legend.text=element_text(size=10), #legend.spacing.x = unit(1.0, &#39;cm&#39;), #legend.spacing.y = unit(0.75, &#39;cm&#39;), legend.key.size = unit(2, &#39;line&#39;), panel.grid.major.x = element_line(color = &#39;grey80&#39;, linewidth = 0.3, linetype = 1), panel.grid.minor.x = element_line(color = &#39;grey80&#39;, linewidth = 0.2, linetype = 2), panel.grid.major.y = element_line(color = &#39;grey80&#39;, linewidth = 0.3, linetype = 1), panel.grid.minor.y = element_line(color = &#39;grey80&#39;, linewidth = 0.2, linetype = 2) ) fig_att_fl_focus_others = ggplot(df_plot_fl_att, aes(x = att, y = factor(name_pa, levels = unique(rev(sort(name_pa)))), xmin = cband_lower, xmax = cband_upper)) %&gt;% + geom_point(aes(color = sig)) %&gt;% + geom_vline(xintercept = 0) %&gt;% + geom_errorbarh(aes(color = sig)) %&gt;% + scale_color_discrete(name = paste0(&quot;Significance\\n(&quot;, (1-alpha)*100, &quot;% level)&quot;), na.translate = F) %&gt;% + facet_grid(focus~time,scales=&quot;free&quot;, space=&quot;free&quot;, labeller= as_labeller(names)) %&gt;% + labs(title = &quot;Reduction of deforestation due to the conservation&quot;, x = &quot;p.p.&quot;, y = &quot;&quot;) %&gt;% + theme_minimal() %&gt;% + theme( axis.text.x = element_text(angle = 0, hjust = 0.5, vjust = 0.5), axis.text=element_text(size=11, color = &quot;black&quot;), axis.title=element_text(size=14, color = &quot;black&quot;, face = &quot;plain&quot;), plot.caption = element_text(hjust = 0), plot.title = element_text(size=16, color = &quot;black&quot;, face = &quot;plain&quot;, hjust = 0), plot.subtitle = element_text(size=12, color = &quot;black&quot;, face = &quot;plain&quot;, hjust = 0), strip.text = element_text(color = &quot;black&quot;, size = 12), strip.clip = &quot;off&quot;, panel.spacing = unit(2, &quot;lines&quot;), #legend.position = &quot;bottom&quot;, legend.text=element_text(size=10), #legend.spacing.x = unit(1.0, &#39;cm&#39;), #legend.spacing.y = unit(0.75, &#39;cm&#39;), legend.key.size = unit(2, &#39;line&#39;), panel.grid.major.x = element_line(color = &#39;grey80&#39;, linewidth = 0.3, linetype = 1), panel.grid.minor.x = element_line(color = &#39;grey80&#39;, linewidth = 0.2, linetype = 2), panel.grid.major.y = element_line(color = &#39;grey80&#39;, linewidth = 0.3, linetype = 1), panel.grid.minor.y = element_line(color = &#39;grey80&#39;, linewidth = 0.2, linetype = 2) ) fig_att_fl_focus = ggplot(filter(df_plot_fl_att, focus == &quot;focus&quot;), aes(x = att, y = factor(name_pa, levels = unique(rev(sort(name_pa)))), xmin = cband_lower, xmax = cband_upper)) %&gt;% + geom_point(aes(color = sig)) %&gt;% + geom_vline(xintercept = 0) %&gt;% + geom_errorbarh(aes(color = sig)) %&gt;% + scale_color_discrete(name = paste0(&quot;Significance\\n(&quot;, (1-alpha)*100, &quot;% level)&quot;), na.translate = F) %&gt;% + facet_grid(focus~time,scales=&quot;free&quot;, space=&quot;free&quot;, labeller= as_labeller(names)) %&gt;% + labs(title = &quot;Reduction of deforestation due to the conservation&quot;, subtitle = &quot;Protected areas funded by the FAPBM only&quot;, x = &quot;p.p.&quot;, y = &quot;&quot;) %&gt;% + theme_minimal() %&gt;% + theme( axis.text.x = element_text(angle = 0, hjust = 0.5, vjust = 0.5), axis.text=element_text(size=11, color = &quot;black&quot;), axis.title=element_text(size=14, color = &quot;black&quot;, face = &quot;plain&quot;), plot.caption = element_text(hjust = 0), plot.title = element_text(size=16, color = &quot;black&quot;, face = &quot;plain&quot;, hjust = 0), plot.subtitle = element_text(size=12, color = &quot;black&quot;, face = &quot;plain&quot;, hjust = 0), strip.text = element_text(color = &quot;black&quot;, size = 12), strip.clip = &quot;off&quot;, panel.spacing = unit(2, &quot;lines&quot;), #legend.position = &quot;bottom&quot;, legend.text=element_text(size=10), #legend.spacing.x = unit(1.0, &#39;cm&#39;), #legend.spacing.y = unit(0.75, &#39;cm&#39;), legend.key.size = unit(2, &#39;line&#39;), panel.grid.major.x = element_line(color = &#39;grey80&#39;, linewidth = 0.3, linetype = 1), panel.grid.minor.x = element_line(color = &#39;grey80&#39;, linewidth = 0.2, linetype = 2), panel.grid.major.y = element_line(color = &#39;grey80&#39;, linewidth = 0.3, linetype = 1), panel.grid.minor.y = element_line(color = &#39;grey80&#39;, linewidth = 0.2, linetype = 2) ) fig_att_fl_iucn = ggplot(df_plot_fl_att, aes(x = att, y = factor(name_pa, levels = unique(rev(sort(name_pa)))), xmin = cband_lower, xmax = cband_upper)) %&gt;% + geom_point(aes(color = sig)) %&gt;% + geom_vline(xintercept = 0) %&gt;% + geom_errorbarh(aes(color = sig)) %&gt;% + scale_color_discrete(name = paste0(&quot;Significance\\n(&quot;, (1-alpha)*100, &quot;% level)&quot;), na.translate = F) %&gt;% + facet_grid(iucn_wolf~time, scales=&quot;free&quot;, space=&quot;free&quot;, labeller= as_labeller(names)) %&gt;% + labs(title = &quot;Reduction of deforestation due to the conservation&quot;, x = &quot;p.p.&quot;, y = &quot;&quot;) %&gt;% + theme_minimal() %&gt;% + theme( axis.text.x = element_text(angle = 0, hjust = 0.5, vjust = 0.5), axis.text=element_text(size=11, color = &quot;black&quot;), axis.title=element_text(size=14, color = &quot;black&quot;, face = &quot;plain&quot;), plot.caption = element_text(hjust = 0), plot.title = element_text(size=16, color = &quot;black&quot;, face = &quot;plain&quot;, hjust = 0), plot.subtitle = element_text(size=12, color = &quot;black&quot;, face = &quot;plain&quot;, hjust = 0), strip.text = element_text(color = &quot;black&quot;, size = 12), strip.clip = &quot;off&quot;, panel.spacing = unit(2, &quot;lines&quot;), #legend.position = &quot;bottom&quot;, legend.text=element_text(size=10), #legend.spacing.x = unit(1.0, &#39;cm&#39;), #legend.spacing.y = unit(0.75, &#39;cm&#39;), legend.key.size = unit(2, &#39;line&#39;), panel.grid.major.x = element_line(color = &#39;grey80&#39;, linewidth = 0.3, linetype = 1), panel.grid.minor.x = element_line(color = &#39;grey80&#39;, linewidth = 0.2, linetype = 2), panel.grid.major.y = element_line(color = &#39;grey80&#39;, linewidth = 0.3, linetype = 1), panel.grid.minor.y = element_line(color = &#39;grey80&#39;, linewidth = 0.2, linetype = 2) ) #Tables ## treatment effect : percentage of deforestation avoided tbl_fc_att_per = df_plot_fc_att %&gt;% mutate(focus = case_when(wdpaid %in% list_focus ~ &quot;Yes&quot;, !(wdpaid %in% list_focus) ~ &quot;No&quot;), sig_per = case_when(sign(cband_lower_per) == sign(cband_upper_per) ~ &quot;Yes&quot;, sign(cband_lower_per) != sign(cband_upper_per) ~ &quot;No&quot;), iucn_wolf = case_when(iucn_cat %in% c(&quot;I&quot;, &quot;II&quot;, &quot;III&quot;, &quot;IV&quot;) ~ &quot;Strict&quot;, iucn_cat %in% c(&quot;V&quot;, &quot;VI&quot;) ~ &quot;Non strict&quot;, grepl(&quot;not&quot;, iucn_cat, ignore.case = TRUE) ~ &quot;Unknown&quot;), name_pa = case_when(nchar(name_pa) &lt;= 25 ~ stri_trans_general(name_pa, id = &quot;Latin-ASCII&quot;), nchar(name_pa) &gt; 25 ~ stri_trans_general(paste0(substr(name_pa, 1, 25), &quot;...&quot;), id = &quot;Latin-ASCII&quot;)) ) %&gt;% dplyr::select(c(name_pa, focus, treatment_year, iucn_wolf, gov_type, time, att_per, sig_per)) %&gt;% pivot_wider(values_from = c(&quot;att_per&quot;, &quot;sig_per&quot;), names_from = c(&quot;time&quot;, &quot;time&quot;)) %&gt;% dplyr::select(c(name_pa, focus, treatment_year, iucn_wolf, att_per_5, sig_per_5, att_per_10, sig_per_10)) %&gt;% #dplyr::select(c(name_pa, country_en, treatment_year, iucn_wolf, gov_type, att_per_5, sig_per_5, att_per_10, sig_per_10)) %&gt;% mutate(across(.cols = starts_with(c(&quot;att&quot;)), .fns = \\(x) case_when(is.na(x) == TRUE ~ &quot;/&quot;, TRUE ~ as.character(format(round(x, 2), scientific = FALSE))))) %&gt;% mutate(across(.cols = starts_with(c(&quot;sig&quot;)), .fns = \\(x) case_when(is.na(x) == TRUE ~ &quot;/&quot;, TRUE ~ x))) %&gt;% rename(&quot;Effect (5 y., %)&quot; = &quot;att_per_5&quot;, &quot;Signi. (5 y.)&quot; = &quot;sig_per_5&quot;, &quot;Effect (10 y., %)&quot; = &quot;att_per_10&quot;, &quot;Signi. (10 y.)&quot; = &quot;sig_per_10&quot;) %&gt;% arrange(focus, name_pa) # names(tbl_fc_att_per) = c(&quot;Name&quot;, &quot;FAPBM&quot;, &quot;Creation&quot;, &quot;Protection&quot;, # &quot;Governance&quot;, &quot;Effect (5 y., %)&quot;, &quot;Significance (5 y.)&quot;,&quot;Effect (10 y., %)&quot;, &quot;Significance (10 y.)&quot;) names(tbl_fc_att_per) = c(&quot;Name&quot;, &quot;FAPBM&quot;, &quot;Creation&quot;, &quot;Protection&quot;, &quot;Effect (5 y., %)&quot;, &quot;Signi. (5 y.)&quot;,&quot;Effect (10 y., %)&quot;, &quot;Signi. (10 y.)&quot;) # treatment effect : total deforestation avoided tbl_fc_att_pa = df_plot_fc_att %&gt;% mutate(focus = case_when(wdpaid %in% list_focus ~ &quot;Yes&quot;, !(wdpaid %in% list_focus) ~ &quot;No&quot;), sig_pa = case_when(sign(cband_lower_pa) == sign(cband_upper_pa) ~ &quot;Yes&quot;, sign(cband_lower_pa) != sign(cband_upper_pa) ~ &quot;No&quot;), iucn_wolf = case_when(iucn_cat %in% c(&quot;I&quot;, &quot;II&quot;, &quot;III&quot;, &quot;IV&quot;) ~ &quot;Strict&quot;, iucn_cat %in% c(&quot;V&quot;, &quot;VI&quot;) ~ &quot;Non strict&quot;, grepl(&quot;not&quot;, iucn_cat, ignore.case = TRUE) ~ &quot;Unknown&quot;), name_pa = case_when(nchar(name_pa) &lt;= 25 ~ stri_trans_general(name_pa, id = &quot;Latin-ASCII&quot;), nchar(name_pa) &gt; 25 ~ stri_trans_general(paste0(substr(name_pa, 1, 25), &quot;...&quot;), id = &quot;Latin-ASCII&quot;)) ) %&gt;% dplyr::select(c(name_pa, focus, country_en, treatment_year, iucn_wolf, gov_type, time, att_pa, sig_pa)) %&gt;% pivot_wider(values_from = c(&quot;att_pa&quot;, &quot;sig_pa&quot;), names_from = c(&quot;time&quot;, &quot;time&quot;)) %&gt;% # dplyr::select(c(name_pa, country_en, treatment_year, iucn_wolf, gov_type, att_pa_5, sig_pa_5, att_pa_10, sig_pa_10)) %&gt;% dplyr::select(c(name_pa, focus, treatment_year, iucn_wolf, att_pa_5, sig_pa_5, att_pa_10, sig_pa_10)) %&gt;% mutate(across(.cols = starts_with(c(&quot;att&quot;)), .fns = \\(x) case_when(is.na(x) == TRUE ~ &quot;/&quot;, TRUE ~ as.character(format(round(x, 2), scientific = FALSE))))) %&gt;% mutate(across(.cols = starts_with(c(&quot;sig&quot;)), .fns = \\(x) case_when(is.na(x) == TRUE ~ &quot;/&quot;, TRUE ~ x))) %&gt;% rename(&quot;Effect (5 y., %)&quot; = &quot;att_pa_5&quot;, &quot;Signi. (5 y.)&quot; = &quot;sig_pa_5&quot;, &quot;Effect (10 y., %)&quot; = &quot;att_pa_10&quot;, &quot;Signi. (10 y.)&quot; = &quot;sig_pa_10&quot;) %&gt;% arrange(focus, name_pa) # names(tbl_fc_att_pa) = c(&quot;Name&quot;, &quot;FAPBM&quot;, &quot;Creation&quot;, &quot;Protection&quot;, # &quot;Governance&quot;, &quot;Effect (5 y., ha)&quot;, &quot;Significance (5 y.)&quot;,&quot;Effect (10 y., ha)&quot;, &quot;Significance (10 y.)&quot;) names(tbl_fc_att_pa) = c(&quot;Name&quot;, &quot;FAPBM&quot;, &quot;Creation&quot;, &quot;Protection&quot;, &quot;Effect (5 y., ha)&quot;, &quot;Signi. (5 y.)&quot;,&quot;Effect (10 y., ha)&quot;, &quot;Signi. (10 y.)&quot;) # treatment effect : avoided deforestation, in terms of difference in cumultaed deforestation rate tbl_fl_att = df_plot_fl_att %&gt;% mutate(focus = case_when(wdpaid %in% list_focus ~ &quot;Yes&quot;, !(wdpaid %in% list_focus) ~ &quot;No&quot;), sig = case_when(sign(cband_lower) == sign(cband_upper) ~ &quot;Yes&quot;, sign(cband_lower) != sign(cband_upper) ~ &quot;No&quot;), iucn_wolf = case_when(iucn_cat %in% c(&quot;I&quot;, &quot;II&quot;, &quot;III&quot;, &quot;IV&quot;) ~ &quot;Strict&quot;, iucn_cat %in% c(&quot;V&quot;, &quot;VI&quot;) ~ &quot;Non strict&quot;, grepl(&quot;not&quot;, iucn_cat, ignore.case = TRUE) ~ &quot;Unknown&quot;), name_pa = case_when(nchar(name_pa) &lt;= 25 ~ stri_trans_general(name_pa, id = &quot;Latin-ASCII&quot;), nchar(name_pa) &gt; 25 ~ stri_trans_general(paste0(substr(name_pa, 1, 25), &quot;...&quot;), id = &quot;Latin-ASCII&quot;)) ) %&gt;% dplyr::select(c(name_pa, focus, country_en, treatment_year, iucn_wolf, gov_type, time, att, sig)) %&gt;% pivot_wider(values_from = c(&quot;att&quot;, &quot;sig&quot;), names_from = c(&quot;time&quot;, &quot;time&quot;)) %&gt;% # dplyr::select(c(name_pa, country_en, treatment_year, iucn_wolf, gov_type, att_5, sig_5, att_10, sig_10)) %&gt;% dplyr::select(c(name_pa, focus, treatment_year, iucn_wolf, att_5, sig_5, att_10, sig_10)) %&gt;% mutate(across(.cols = starts_with(c(&quot;att&quot;)), .fns = \\(x) case_when(is.na(x) == TRUE ~ &quot;/&quot;, TRUE ~ as.character(format(round(x, 2), scientific = FALSE))))) %&gt;% mutate(across(.cols = starts_with(c(&quot;sig&quot;)), .fns = \\(x) case_when(is.na(x) == TRUE ~ &quot;/&quot;, TRUE ~ x))) %&gt;% rename(&quot;Effect (5 y., %)&quot; = &quot;att_5&quot;, &quot;Signi. (5 y.)&quot; = &quot;sig_5&quot;, &quot;Effect (10 y., %)&quot; = &quot;att_10&quot;, &quot;Signi. (10 y.)&quot; = &quot;sig_10&quot;) %&gt;% arrange(focus, name_pa) # names(tbl_fl_att) = c(&quot;Name&quot;, &quot;FAPBM&quot;, &quot;Creation&quot;, &quot;Protection&quot;, # &quot;Governance&quot;, &quot;Effect (5 y., pp)&quot;, &quot;Significance (5 y.)&quot;,&quot;Effect (10 y., pp)&quot;, &quot;Significance (10 y.)&quot;) names(tbl_fl_att) = c(&quot;Name&quot;, &quot;FAPBM&quot;, &quot;Creation&quot;, &quot;Protection&quot;, &quot;Effect (5 y., pp)&quot;, &quot;Signi. (5 y.)&quot;,&quot;Effect (10 y., pp)&quot;, &quot;Signi. (10 y.)&quot;) #Saving plots ##Saving plots tmp = paste(tempdir(), &quot;fig&quot;, sep = &quot;/&quot;) ggsave(paste(tmp, &quot;fig_att_per.png&quot;, sep = &quot;/&quot;), plot = fig_att_per, device = &quot;png&quot;, height = 8, width = 12) ggsave(paste(tmp, &quot;fig_att_per_focus.png&quot;, sep = &quot;/&quot;), plot = fig_att_per_focus, device = &quot;png&quot;, height = 6, width =9) ggsave(paste(tmp, &quot;fig_att_per_focus_others.png&quot;, sep = &quot;/&quot;), plot = fig_att_per_focus_others, device = &quot;png&quot;, height = 8, width = 12) ggsave(paste(tmp, &quot;fig_att_per_iucn.png&quot;, sep = &quot;/&quot;), plot = fig_att_per_iucn, device = &quot;png&quot;, height = 8, width = 12) ggsave(paste(tmp, &quot;fig_att_pa.png&quot;, sep = &quot;/&quot;), plot = fig_att_pa, device = &quot;png&quot;, height = 8, width = 12) ggsave(paste(tmp, &quot;fig_att_pa_focus.png&quot;, sep = &quot;/&quot;), plot = fig_att_pa_focus, device = &quot;png&quot;, height = 6, width = 9) ggsave(paste(tmp, &quot;fig_att_pa_focus_others.png&quot;, sep = &quot;/&quot;), plot = fig_att_pa_focus_others, device = &quot;png&quot;, height = 8, width = 12) ggsave(paste(tmp, &quot;fig_att_pa_iucn.png&quot;, sep = &quot;/&quot;), plot = fig_att_pa_iucn, device = &quot;png&quot;, height = 8, width = 12) ggsave(paste(tmp, &quot;fig_att_fl.png&quot;, sep = &quot;/&quot;), plot = fig_att_fl, device = &quot;png&quot;, height = 8, width = 12) ggsave(paste(tmp, &quot;fig_att_fl_focus.png&quot;, sep = &quot;/&quot;), plot = fig_att_fl_focus, device = &quot;png&quot;, height = 6, width = 9) ggsave(paste(tmp, &quot;fig_att_fl_focus_others.png&quot;, sep = &quot;/&quot;), plot = fig_att_fl_focus_others, device = &quot;png&quot;, height = 8, width = 12) ggsave(paste(tmp, &quot;fig_att_fl_iucn.png&quot;, sep = &quot;/&quot;), plot = fig_att_fl_iucn, device = &quot;png&quot;, height = 8, width = 12) print(xtable(tbl_fc_att_pa, type = &quot;latex&quot;, auto = T), file = paste(tmp, &quot;tbl_fc_att_pa.tex&quot;, sep = &quot;/&quot;)) print(xtable(tbl_fc_att_per, type = &quot;latex&quot;, auto = T), file = paste(tmp, &quot;tbl_fc_att_per.tex&quot;, sep = &quot;/&quot;)) print(xtable(tbl_fl_att, type = &quot;latex&quot;, auto = T), file = paste(tmp, &quot;tbl_fl_att.tex&quot;, sep = &quot;/&quot;)) files &lt;- list.files(tmp, full.names = TRUE) ##Add each file in the bucket (same foler for every file in the temp) for(f in files) { cat(&quot;Uploading file&quot;, paste0(&quot;&#39;&quot;, f, &quot;&#39;&quot;), &quot;\\n&quot;) aws.s3::put_object(file = f, bucket = paste(&quot;projet-afd-eva-ap&quot;, save_dir, sep = &quot;/&quot;), region = &quot;&quot;, show_progress = TRUE) } do.call(file.remove, list(list.files(tmp, full.names = TRUE))) } "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
